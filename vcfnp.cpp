/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__vcfnp
#define __PYX_HAVE_API__vcfnp
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include "split.h"
#include "Variant.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "vcfnp.pyx",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "type.pxd",
  "vcflib.pxd",
};

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_6vcflib_PyVariantCallFile;
struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities;
struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills;
struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers;
struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build;
struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress;
struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants;
struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition;
struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities;
struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills;
struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build;
struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata;
struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition;
struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer;
struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer;
struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__;
struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr;
struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable;
struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "vcflib.pxd":143
 * 
 * 
 * cdef class PyVariantCallFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef VariantCallFile *thisptr
 */
struct __pyx_obj_6vcflib_PyVariantCallFile {
  PyObject_HEAD
  vcf::VariantCallFile *thisptr;
};


/* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities {
  PyObject_HEAD
  PyObject *__pyx_v_arities;
  PyObject *__pyx_v_fields;
};


/* "vcfnp.pyx":268
 *                 arities[f] = vcf_count
 *     # convert to tuple for zipping with fields
 *     arities = tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return arities
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_fills;
};


/* "vcfnp.pyx":287
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     # convert to tuple for zipping with fields
 *     fills = tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return fills
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_transformers;
};


/* "vcfnp.pyx":300
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 *     return tuple(transformers[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_info_counts;
  PyObject *__pyx_v_info_types;
};


/* "vcfnp.pyx":536
 * 
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":538
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1             # <<<<<<<<<<<<<<
 *                             for f in fields)
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":690
 * 
 * 
 * def _iter_withprogress(iterable, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator, reporting progress
 *     as we go."""
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress {
  PyObject_HEAD
  PyObject *__pyx_v_after;
  PyObject *__pyx_v_after_all;
  PyObject *__pyx_v_before;
  PyObject *__pyx_v_before_all;
  long __pyx_v_i;
  PyObject *__pyx_v_iterable;
  PyObject *__pyx_v_log;
  long __pyx_v_n;
  PyObject *__pyx_v_o;
  long __pyx_v_progress;
  PyObject *__pyx_t_0;
  long __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
};


/* "vcfnp.pyx":709
 * 
 * 
 * def _itervariants(vcf_fns, region, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                   bint flatten_filter, bint parse_info):
 *     """Iterate over variants from a VCF file, and generate a tuple for each
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants {
  PyObject_HEAD
  PyObject *__pyx_v_fieldspec;
  PyObject *__pyx_v_filter_ids;
  int __pyx_v_flatten_filter;
  int __pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":742
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, list fieldspec,             # <<<<<<<<<<<<<<
 *                                  tuple filter_ids, bint flatten_filter,
 *                                  parse_info, condition):
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition {
  PyObject_HEAD
  PyObject *__pyx_v_condition;
  PyObject *__pyx_v_fieldspec;
  PyObject *__pyx_v_filter_ids;
  int __pyx_v_flatten_filter;
  long __pyx_v_i;
  long __pyx_v_n;
  PyObject *__pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities {
  PyObject_HEAD
  PyObject *__pyx_v_arities;
  PyObject *__pyx_v_fields;
};


/* "vcfnp.pyx":1035
 *             else:
 *                 arities[f] = vcf_count
 *     return tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_fills;
};


/* "vcfnp.pyx":1049
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     return tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_format_counts;
  PyObject *__pyx_v_format_types;
};


/* "vcfnp.pyx":1121
 * 
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1             # <<<<<<<<<<<<<<
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1123
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1             # <<<<<<<<<<<<<<
 *                               for f in fields)
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1389
 * 
 * 
 * def _itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata {
  PyObject_HEAD
  PyObject *__pyx_v_fieldspec;
  int __pyx_v_ploidy;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_samples;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1411
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy,             # <<<<<<<<<<<<<<
 *                                  list fieldspec, condition):
 *     cdef VariantCallFile *variant_file
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition {
  PyObject_HEAD
  PyObject *__pyx_v_condition;
  PyObject *__pyx_v_fieldspec;
  long __pyx_v_i;
  long __pyx_v_n;
  int __pyx_v_ploidy;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_samples;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer {
  PyObject_HEAD
  PyObject *__pyx_v_fills;
};


/* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *__pyx_outer_scope;
  PyObject *__pyx_v_eff;
};


/* "vcfnp.pyx":1652
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 *                 fill if v == ''             # <<<<<<<<<<<<<<
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *__pyx_outer_scope;
  PyObject *__pyx_v_fill;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_v;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
};


/* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_info_types;
  PyObject *__pyx_v_self;
};


/* "vcfnp.pyx":1713
 *             arities = (None,) * len(fields)
 *         else:
 *             arities = tuple(self.arities.get(f) for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine if we need to parse the INFO field
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1719
 * 
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 * 
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *__pyx_outer_scope;
  PyObject *__pyx_v_f;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1757
 * 
 * 
 * def _itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                        filter_ids, flatten_filter, fill, flatten):
 *     cdef VariantCallFile *variant_file
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable {
  PyObject_HEAD
  PyObject *__pyx_v_arities;
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_fill;
  PyObject *__pyx_v_filter_ids;
  PyObject *__pyx_v_flatten;
  PyObject *__pyx_v_flatten_filter;
  PyObject *__pyx_v_info_types;
  PyObject *__pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */
struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff {
  PyObject_HEAD
  PyObject *__pyx_v_fill;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

static CYTHON_INLINE long __Pyx_mod_long(long, long); /* proto */

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE void __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions,
                                                         PyObject *classobj);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'vcflib' */
static PyTypeObject *__pyx_ptype_6vcflib_PyVariantCallFile = 0;

/* Module declarations from 'vcfnp' */
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct___variants_arities = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_2__variants_fills = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_4__info_transformers = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_6_build = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_8_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_9__iter_withprogress = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_10__itervariants = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_11__itervariants_with_condition = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_12__calldata_arities = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_14__calldata_fills = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_15_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_16_build = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_17_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_18_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_19__itercalldata = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_21_eff_default_transformer = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_22__transformer = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_23_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_24___iter__ = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_25_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_26_genexpr = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_27__itervariantstable = 0;
static PyTypeObject *__pyx_ptype_5vcfnp___pyx_scope_struct_28_flatten_eff = 0;
static size_t __pyx_v_5vcfnp_npos;
static char __pyx_v_5vcfnp_SEMICOLON;
static std::string __pyx_v_5vcfnp_DOT;
static std::string __pyx_v_5vcfnp_GT_DELIMS;
static std::string __pyx_v_5vcfnp_FIELD_NAME_CHROM;
static std::string __pyx_v_5vcfnp_FIELD_NAME_POS;
static std::string __pyx_v_5vcfnp_FIELD_NAME_ID;
static std::string __pyx_v_5vcfnp_FIELD_NAME_REF;
static std::string __pyx_v_5vcfnp_FIELD_NAME_ALT;
static std::string __pyx_v_5vcfnp_FIELD_NAME_QUAL;
static std::string __pyx_v_5vcfnp_FIELD_NAME_FILTER;
static std::string __pyx_v_5vcfnp_FIELD_NAME_INFO;
static std::string __pyx_v_5vcfnp_FIELD_NAME_NUM_ALLELES;
static std::string __pyx_v_5vcfnp_FIELD_NAME_IS_SNP;
static std::string __pyx_v_5vcfnp_FIELD_NAME_SVLEN;
static std::string __pyx_v_5vcfnp_FIELD_NAME_IS_CALLED;
static std::string __pyx_v_5vcfnp_FIELD_NAME_IS_PHASED;
static std::string __pyx_v_5vcfnp_FIELD_NAME_GENOTYPE;
static std::string __pyx_v_5vcfnp_FIELD_NAME_GT;
static CYTHON_INLINE bool __pyx_f_5vcfnp__get_next_variant(vcf::VariantCallFile *, vcf::Variant *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvrow(vcf::Variant *, PyObject *, PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvval(vcf::Variant *, std::string, int, PyObject *, int, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkaltval(vcf::Variant *, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkfilterval(vcf::Variant *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__is_snp(vcf::Variant *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen(vcf::Variant *, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen_single(std::string, std::vector<std::string>  &, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen_multi(std::string, std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval(std::vector<std::string>  &, int, PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_string(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_string_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double_single(std::vector<std::string>  &, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long_single(std::vector<std::string>  &, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcrow(vcf::Variant *, PyObject *, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcvals(vcf::Variant *, std::string, int, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcval(std::map<std::string,std::vector<std::string> >  &, int, std::string, int, PyObject *, int); /*proto*/
static CYTHON_INLINE bool __pyx_f_5vcfnp__is_called(std::map<std::string,std::vector<std::string> >  &); /*proto*/
static CYTHON_INLINE bool __pyx_f_5vcfnp__is_phased(std::map<std::string,std::vector<std::string> >  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__genotype(std::map<std::string,std::vector<std::string> >  &, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvtblrow(vcf::Variant *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mktblval_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
#define __Pyx_MODULE_NAME "vcfnp"
int __pyx_module_is_main_vcfnp = 0;

/* Implementation of 'vcfnp' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_any;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_lambda_funcdef_5vcfnp_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_5vcfnp__variants_fields(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_info_ids); /* proto */
static PyObject *__pyx_pf_5vcfnp_17_variants_arities_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_2_variants_arities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_counts); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_variants_fills_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_4_variants_fills(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_fills, PyObject *__pyx_v_info_types); /* proto */
static PyObject *__pyx_pf_5vcfnp_18_info_transformers_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_6_info_transformers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_transformers); /* proto */
static PyObject *__pyx_pf_5vcfnp_8_variants_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_info_types); /* proto */
static PyObject *__pyx_pf_5vcfnp_10_filenames_from_arg(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5vcfnp_7_Logger___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_logstream); /* proto */
static PyObject *__pyx_pf_5vcfnp_7_Logger_2__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_5vcfnp_12_nolog(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5vcfnp_14_get_logger(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_logstream, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_5vcfnp_16_mk_cache_fn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_array_type, PyObject *__pyx_v_region, PyObject *__pyx_v_cachedir); /* proto */
static PyObject *__pyx_pf_5vcfnp_18_get_cache_fn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_array_type, PyObject *__pyx_v_region, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_log); /* proto */
static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_logstream, PyObject *__pyx_v_verbose, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader_2load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader_4build(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_5build_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_5build_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_20variants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_transformers, PyObject *__pyx_v_vcf_types, PyObject *__pyx_v_count, PyObject *__pyx_v_progress, PyObject *__pyx_v_logstream, PyObject *__pyx_v_condition, PyObject *__pyx_v_slice_args, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_verbose, PyObject *__pyx_v_cache, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_skip_cached); /* proto */
static PyObject *__pyx_pf_5vcfnp_22_fromiter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_it, PyObject *__pyx_v_dtype, PyObject *__pyx_v_count, long __pyx_v_progress, PyObject *__pyx_v_log); /* proto */
static PyObject *__pyx_pf_5vcfnp_24_iter_withprogress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterable, long __pyx_v_progress, PyObject *__pyx_v_log); /* proto */
static PyObject *__pyx_pf_5vcfnp_27_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter, int __pyx_v_parse_info); /* proto */
static PyObject *__pyx_pf_5vcfnp_30_itervariants_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5vcfnp_33_warn_duplicates(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields); /* proto */
static PyObject *__pyx_pf_5vcfnp_35_calldata_fields(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_format_ids); /* proto */
static PyObject *__pyx_pf_5vcfnp_17_calldata_arities_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_37_calldata_arities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_format_counts, PyObject *__pyx_v_ploidy); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_calldata_fills_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_39_calldata_fills(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_fills, PyObject *__pyx_v_format_types, PyObject *__pyx_v_ploidy); /* proto */
static PyObject *__pyx_pf_5vcfnp_41_calldata_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_format_types, PyObject *__pyx_v_arities, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_5build_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_5build_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_43calldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_vcf_types, PyObject *__pyx_v_count, PyObject *__pyx_v_progress, PyObject *__pyx_v_logstream, PyObject *__pyx_v_condition, PyObject *__pyx_v_slice_args, PyObject *__pyx_v_verbose, PyObject *__pyx_v_cache, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_skip_cached); /* proto */
static PyObject *__pyx_pf_5vcfnp_17_Calldata2DLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_45calldata_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5vcfnp_47_itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec); /* proto */
static PyObject *__pyx_pf_5vcfnp_50_itercalldata_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5vcfnp_53view2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_5vcfnp_23eff_default_transformer_12_transformer_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_23eff_default_transformer__transformer(PyObject *__pyx_self, PyObject *__pyx_v_vals); /* proto */
static PyObject *__pyx_pf_5vcfnp_55eff_default_transformer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fills); /* proto */
static PyObject *__pyx_pf_5vcfnp_13VariantsTable___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatten); /* proto */
static PyObject *__pyx_pf_5vcfnp_13VariantsTable_8__iter___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_13VariantsTable_8__iter___3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_13VariantsTable_2__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5vcfnp_57_itervariantstable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatten); /* proto */
static PyObject *__pyx_pf_5vcfnp_11flatten_eff__flatten(PyObject *__pyx_self, PyObject *__pyx_v_vals); /* proto */
static PyObject *__pyx_pf_5vcfnp_60flatten_eff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fill); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct___variants_arities(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_2__variants_fills(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_4__info_transformers(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_6_build(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_9__iter_withprogress(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_10__itervariants(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_12__calldata_arities(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_14__calldata_fills(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_15_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_16_build(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_17_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_18_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_19__itercalldata(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_21_eff_default_transformer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_22__transformer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_23_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_24___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_25_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_26_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_27__itervariantstable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_28_flatten_eff(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_A[] = "A";
static char __pyx_k_B[] = "B";
static char __pyx_k_C[] = "C";
static char __pyx_k_G[] = "G";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_T[] = "T";
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_m[] = "m";
static char __pyx_k_n[] = "n";
static char __pyx_k_o[] = "o";
static char __pyx_k_q[] = "q";
static char __pyx_k_s[] = "s";
static char __pyx_k_t[] = "t";
static char __pyx_k_v[] = "v";
static char __pyx_k_AC[] = "AC";
static char __pyx_k_AD[] = "AD";
static char __pyx_k_AF[] = "AF";
static char __pyx_k_AN[] = "AN";
static char __pyx_k_DP[] = "DP";
static char __pyx_k_FS[] = "FS";
static char __pyx_k_GQ[] = "GQ";
static char __pyx_k_GT[] = "GT";
static char __pyx_k_ID[] = "ID";
static char __pyx_k_MQ[] = "MQ";
static char __pyx_k_PL[] = "PL";
static char __pyx_k_QD[] = "QD";
static char __pyx_k_RU[] = "RU";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__2[] = " :: ";
static char __pyx_k__3[] = " ";
static char __pyx_k__4[] = ":";
static char __pyx_k__5[] = "_";
static char __pyx_k__7[] = "-";
static char __pyx_k_a6[] = "a6";
static char __pyx_k_a7[] = "a7";
static char __pyx_k_a8[] = "a8";
static char __pyx_k_b1[] = "b1";
static char __pyx_k_f2[] = "f2";
static char __pyx_k_f4[] = "f4";
static char __pyx_k_ff[] = "ff";
static char __pyx_k_fn[] = "fn";
static char __pyx_k_i1[] = "i1";
static char __pyx_k_i4[] = "i4";
static char __pyx_k_it[] = "it";
static char __pyx_k_nm[] = "nm";
static char __pyx_k_np[] = "np";
static char __pyx_k_os[] = "os";
static char __pyx_k_re[] = "re";
static char __pyx_k_u1[] = "u1";
static char __pyx_k_u2[] = "u2";
static char __pyx_k_ALT[] = "ALT";
static char __pyx_k_EFF[] = "EFF";
static char __pyx_k_MQ0[] = "MQ0";
static char __pyx_k_OND[] = "OND";
static char __pyx_k_POS[] = "POS";
static char __pyx_k_PY2[] = "PY2";
static char __pyx_k_REF[] = "REF";
static char __pyx_k_RPA[] = "RPA";
static char __pyx_k__18[] = "/";
static char __pyx_k__19[] = ".";
static char __pyx_k__20[] = "|";
static char __pyx_k__24[] = "";
static char __pyx_k__31[] = ",";
static char __pyx_k__46[] = "/|";
static char __pyx_k_a12[] = "a12";
static char __pyx_k_a14[] = "a14";
static char __pyx_k_a20[] = "a20";
static char __pyx_k_a33[] = "a33";
static char __pyx_k_a_d[] = "a%d";
static char __pyx_k_any[] = "any";
static char __pyx_k_arr[] = "arr";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_eff[] = "eff";
static char __pyx_k_flt[] = "flt";
static char __pyx_k_get[] = "get";
static char __pyx_k_log[] = "log";
static char __pyx_k_msg[] = "msg";
static char __pyx_k_now[] = "now";
static char __pyx_k_s_s[] = "%s: %s";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_vcf[] = "vcf";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_Dels[] = "Dels";
static char __pyx_k_Exon[] = "Exon";
static char __pyx_k_Flag[] = "Flag";
static char __pyx_k_HRun[] = "HRun";
static char __pyx_k_INFO[] = "INFO";
static char __pyx_k_PASS[] = "PASS";
static char __pyx_k_QUAL[] = "QUAL";
static char __pyx_k__136[] = "([^(]+)\\(([^)]+)\\)";
static char __pyx_k_args[] = "args";
static char __pyx_k_call[] = "__call__";
static char __pyx_k_cols[] = "cols";
static char __pyx_k_data[] = "data";
static char __pyx_k_file[] = "file";
static char __pyx_k_fill[] = "fill";
static char __pyx_k_init[] = "init";
static char __pyx_k_iter[] = "__iter__";
static char __pyx_k_join[] = "join";
static char __pyx_k_load[] = "load";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "__name__";
static char __pyx_k_path[] = "path";
static char __pyx_k_rows[] = "rows";
static char __pyx_k_save[] = "save";
static char __pyx_k_self[] = "self";
static char __pyx_k_send[] = "send";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_vals[] = "vals";
static char __pyx_k_view[] = "view";
static char __pyx_k_ABHet[] = "ABHet";
static char __pyx_k_ABHom[] = "ABHom";
static char __pyx_k_CHROM[] = "CHROM";
static char __pyx_k_Float[] = "Float";
static char __pyx_k_MLEAC[] = "MLEAC";
static char __pyx_k_MLEAF[] = "MLEAF";
static char __pyx_k_after[] = "after";
static char __pyx_k_build[] = "build";
static char __pyx_k_cache[] = "cache";
static char __pyx_k_chain[] = "chain";
static char __pyx_k_close[] = "close";
static char __pyx_k_count[] = "count";
static char __pyx_k_debug[] = "debug";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_fflds[] = "fflds";
static char __pyx_k_fills[] = "fills";
static char __pyx_k_flush[] = "flush";
static char __pyx_k_group[] = "group";
static char __pyx_k_isdir[] = "isdir";
static char __pyx_k_items[] = "items";
static char __pyx_k_match[] = "match";
static char __pyx_k_nolog[] = "_nolog";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_plody[] = "plody";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_s_npy[] = "%s.npy";
static char __pyx_k_split[] = "split";
static char __pyx_k_stack[] = "stack";
static char __pyx_k_super[] = "super";
static char __pyx_k_svlen[] = "svlen";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_vcfnp[] = "[vcfnp] ";
static char __pyx_k_CODING[] = "CODING";
static char __pyx_k_Effect[] = "Effect";
static char __pyx_k_FILTER[] = "FILTER";
static char __pyx_k_Logger[] = "_Logger";
static char __pyx_k_MLPSAC[] = "MLPSAC";
static char __pyx_k_MLPSAF[] = "MLPSAF";
static char __pyx_k_String[] = "String";
static char __pyx_k_append[] = "append";
static char __pyx_k_before[] = "before";
static char __pyx_k_dtypes[] = "dtypes";
static char __pyx_k_exists[] = "exists";
static char __pyx_k_extend[] = "extend";
static char __pyx_k_fields[] = "fields";
static char __pyx_k_header[] = "header";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_init_2[] = "__init__";
static char __pyx_k_is_snp[] = "is_snp";
static char __pyx_k_islice[] = "islice";
static char __pyx_k_kwargs[] = "kwargs";
static char __pyx_k_lambda[] = "<lambda>";
static char __pyx_k_loader[] = "loader";
static char __pyx_k_logger[] = "logger";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_object[] = "object";
static char __pyx_k_ploidy[] = "ploidy";
static char __pyx_k_region[] = "region";
static char __pyx_k_result[] = "result";
static char __pyx_k_sorted[] = "sorted";
static char __pyx_k_stderr[] = "stderr";
static char __pyx_k_vcf_fn[] = "vcf_fn";
static char __pyx_k_view2d[] = "view2d";
static char __pyx_k_Integer[] = "Integer";
static char __pyx_k_arities[] = "arities";
static char __pyx_k_compile[] = "compile";
static char __pyx_k_flatten[] = "flatten";
static char __pyx_k_genexpr[] = "genexpr";
static char __pyx_k_inspect[] = "inspect";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_replace[] = "replace";
static char __pyx_k_reshape[] = "reshape";
static char __pyx_k_s_s_npy[] = "%s.%s.npy";
static char __pyx_k_samples[] = "samples";
static char __pyx_k_variant[] = "variant";
static char __pyx_k_vcf_fns[] = "vcf_fns";
static char __pyx_k_vcfnp_2[] = "vcfnp";
static char __pyx_k_verbose[] = "verbose";
static char __pyx_k_version[] = "__version__";
static char __pyx_k_visited[] = "visited";
static char __pyx_k_FILTER_2[] = "FILTER_";
static char __pyx_k_cache_fn[] = "cache_fn";
static char __pyx_k_cachedir[] = "cachedir";
static char __pyx_k_calldata[] = "calldata";
static char __pyx_k_datetime[] = "datetime";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_fromiter[] = "_fromiter";
static char __pyx_k_genotype[] = "genotype";
static char __pyx_k_getmtime[] = "getmtime";
static char __pyx_k_info_ids[] = "info_ids";
static char __pyx_k_iterable[] = "iterable";
static char __pyx_k_makedirs[] = "makedirs";
static char __pyx_k_progress[] = "progress";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_variants[] = "variants";
static char __pyx_k_vcf_type[] = "vcf_type";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_Gene_Name[] = "Gene_Name";
static char __pyx_k_MQRankSum[] = "MQRankSum";
static char __pyx_k_after_all[] = "after_all";
static char __pyx_k_condition[] = "condition";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_fieldspec[] = "fieldspec";
static char __pyx_k_filenames[] = "filenames";
static char __pyx_k_flatten_2[] = "_flatten";
static char __pyx_k_getLogger[] = "getLogger";
static char __pyx_k_is_cached[] = "is_cached";
static char __pyx_k_is_called[] = "is_called";
static char __pyx_k_is_phased[] = "is_phased";
static char __pyx_k_itertools[] = "itertools";
static char __pyx_k_logstream[] = "logstream";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_text_type[] = "text_type";
static char __pyx_k_vcf_count[] = "vcf_count";
static char __pyx_k_vcf_types[] = "vcf_types";
static char __pyx_k_2_0_0_dev0[] = "2.0.0.dev0";
static char __pyx_k_EFF_FIELDS[] = "EFF_FIELDS";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_array_type[] = "array_type";
static char __pyx_k_before_all[] = "before_all";
static char __pyx_k_cell_dtype[] = "cell_dtype";
static char __pyx_k_filter_ids[] = "filter_ids";
static char __pyx_k_format_ids[] = "format_ids";
static char __pyx_k_fromiter_2[] = "fromiter";
static char __pyx_k_get_logger[] = "_get_logger";
static char __pyx_k_info_types[] = "info_types";
static char __pyx_k_parse_info[] = "parse_info";
static char __pyx_k_region_set[] = "region_set";
static char __pyx_k_slice_args[] = "slice_args";
static char __pyx_k_ArrayLoader[] = "_ArrayLoader";
static char __pyx_k_Gene_Coding[] = "Gene_Coding";
static char __pyx_k_MQ0Fraction[] = "MQ0Fraction";
static char __pyx_k_VariantType[] = "VariantType";
static char __pyx_k_all_samples[] = "all_samples";
static char __pyx_k_binary_type[] = "binary_type";
static char __pyx_k_calldata_2d[] = "calldata_2d";
static char __pyx_k_flatten_eff[] = "flatten_eff";
static char __pyx_k_info_counts[] = "info_counts";
static char __pyx_k_mk_cache_fn[] = "_mk_cache_fn";
static char __pyx_k_num_alleles[] = "num_alleles";
static char __pyx_k_sampleNames[] = "sampleNames";
static char __pyx_k_skip_cached[] = "skip_cached";
static char __pyx_k_transformer[] = "_transformer";
static char __pyx_k_vcfnp_cache[] = ".vcfnp_cache";
static char __pyx_k_BaseQRankSum[] = "BaseQRankSum";
static char __pyx_k_Codon_Change[] = "Codon_Change";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_format_types[] = "format_types";
static char __pyx_k_get_cache_fn[] = "_get_cache_fn";
static char __pyx_k_itercalldata[] = "_itercalldata";
static char __pyx_k_itervariants[] = "_itervariants";
static char __pyx_k_string_types[] = "string_types";
static char __pyx_k_transformers[] = "transformers";
static char __pyx_k_variant_file[] = "variant_file";
static char __pyx_k_version_info[] = "version_info";
static char __pyx_k_Effect_Impact[] = "Effect_Impact";
static char __pyx_k_Logger___call[] = "_Logger.__call__";
static char __pyx_k_Logger___init[] = "_Logger.__init__";
static char __pyx_k_StopIteration[] = "StopIteration";
static char __pyx_k_Transcript_ID[] = "Transcript_ID";
static char __pyx_k_VariantsTable[] = "VariantsTable";
static char __pyx_k_format_counts[] = "format_counts";
static char __pyx_k_prog_eff_main[] = "_prog_eff_main";
static char __pyx_k_CalldataLoader[] = "_CalldataLoader";
static char __pyx_k_HaplotypeScore[] = "HaplotypeScore";
static char __pyx_k_ReadPosRankSum[] = "ReadPosRankSum";
static char __pyx_k_TYPESTRING2KEY[] = "TYPESTRING2KEY";
static char __pyx_k_VariantsLoader[] = "_VariantsLoader";
static char __pyx_k_building_array[] = "building array";
static char __pyx_k_calldata_dtype[] = "_calldata_dtype";
static char __pyx_k_calldata_fills[] = "_calldata_fills";
static char __pyx_k_exclude_fields[] = "exclude_fields";
static char __pyx_k_flatten_filter[] = "flatten_filter";
static char __pyx_k_match_eff_main[] = "match_eff_main";
static char __pyx_k_variants_dtype[] = "_variants_dtype";
static char __pyx_k_variants_fills[] = "_variants_fills";
static char __pyx_k_CACHEDIR_SUFFIX[] = "CACHEDIR_SUFFIX";
static char __pyx_k_ClippingRankSum[] = "ClippingRankSum";
static char __pyx_k_DEFAULT_FLATTEN[] = "DEFAULT_FLATTEN";
static char __pyx_k_InbreedingCoeff[] = "InbreedingCoeff";
static char __pyx_k_calldata_fields[] = "_calldata_fields";
static char __pyx_k_variants_fields[] = "_variants_fields";
static char __pyx_k_warn_duplicates[] = "_warn_duplicates";
static char __pyx_k_ArrayLoader_load[] = "_ArrayLoader.load";
static char __pyx_k_Calldata2DLoader[] = "_Calldata2DLoader";
static char __pyx_k_DEFAULT_FILL_MAP[] = "DEFAULT_FILL_MAP";
static char __pyx_k_DEFAULT_TYPE_MAP[] = "DEFAULT_TYPE_MAP";
static char __pyx_k_Functional_Class[] = "Functional_Class";
static char __pyx_k_calldata_arities[] = "_calldata_arities";
static char __pyx_k_file_not_found_s[] = "file not found: %s";
static char __pyx_k_unknown_sample_s[] = "unknown sample: %s";
static char __pyx_k_variants_arities[] = "_variants_arities";
static char __pyx_k_view2d_line_1532[] = "view2d (line 1532)";
static char __pyx_k_Amino_Acid_Change[] = "Amino_Acid_Change";
static char __pyx_k_Amino_Acid_Length[] = "Amino_Acid_Length";
static char __pyx_k_ArrayLoader_build[] = "_ArrayLoader.build";
static char __pyx_k_EFF_DEFAULT_DTYPE[] = "EFF_DEFAULT_DTYPE";
static char __pyx_k_EFF_DEFAULT_FILLS[] = "EFF_DEFAULT_FILLS";
static char __pyx_k_info_transformers[] = "_info_transformers";
static char __pyx_k_iter_withprogress[] = "_iter_withprogress";
static char __pyx_k_itervariantstable[] = "_itervariantstable";
static char __pyx_k_variants_line_581[] = "variants (line 581)";
static char __pyx_k_ArrayLoader___init[] = "_ArrayLoader.__init__";
static char __pyx_k_DEFAULT_INFO_DTYPE[] = "DEFAULT_INFO_DTYPE";
static char __pyx_k_Transcript_BioType[] = "Transcript_BioType";
static char __pyx_k_caching_is_enabled[] = "caching is enabled";
static char __pyx_k_calldata_line_1161[] = "calldata (line 1161)";
static char __pyx_k_filenames_from_arg[] = "_filenames_from_arg";
static char __pyx_k_DEFAULT_TRANSFORMER[] = "DEFAULT_TRANSFORMER";
static char __pyx_k_caching_is_disabled[] = "caching is disabled";
static char __pyx_k_no_cache_file_found[] = "no cache file found";
static char __pyx_k_CalldataLoader_build[] = "_CalldataLoader.build";
static char __pyx_k_DEFAULT_VARIANT_FILL[] = "DEFAULT_VARIANT_FILL";
static char __pyx_k_VariantsLoader_build[] = "_VariantsLoader.build";
static char __pyx_k_VariantsTable___init[] = "VariantsTable.__init__";
static char __pyx_k_VariantsTable___iter[] = "VariantsTable.__iter__";
static char __pyx_k_cache_file_available[] = "cache file available";
static char __pyx_k_saving_to_cache_file[] = "saving to cache file";
static char __pyx_k_DEFAULT_CALLDATA_FILL[] = "DEFAULT_CALLDATA_FILL";
static char __pyx_k_DEFAULT_VARIANT_ARITY[] = "DEFAULT_VARIANT_ARITY";
static char __pyx_k_DEFAULT_VARIANT_DTYPE[] = "DEFAULT_VARIANT_DTYPE";
static char __pyx_k_Calldata2DLoader_build[] = "_Calldata2DLoader.build";
static char __pyx_k_DEFAULT_CALLDATA_ARITY[] = "DEFAULT_CALLDATA_ARITY";
static char __pyx_k_DEFAULT_CALLDATA_DTYPE[] = "DEFAULT_CALLDATA_DTYPE";
static char __pyx_k_cache_file_out_of_date[] = "cache file out of date";
static char __pyx_k_s_rows_in_2fs_d_rows_s[] = "%s rows in %.2fs (%d rows/s)";
static char __pyx_k_STANDARD_VARIANT_FIELDS[] = "STANDARD_VARIANT_FIELDS";
static char __pyx_k_eff_default_transformer[] = "eff_default_transformer";
static char __pyx_k_loading_from_cache_file[] = "loading from cache file";
static char __pyx_k_STANDARD_CALLDATA_FIELDS[] = "STANDARD_CALLDATA_FIELDS";
static char __pyx_k_flatten_eff_locals__flatten[] = "flatten_eff.<locals>._flatten";
static char __pyx_k_itercalldata_with_condition[] = "_itercalldata_with_condition";
static char __pyx_k_itervariants_with_condition[] = "_itervariants_with_condition";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_calldata_fills_locals_genexpr[] = "_calldata_fills.<locals>.genexpr";
static char __pyx_k_skipping_load_from_cache_file[] = "skipping load from cache file";
static char __pyx_k_variants_fills_locals_genexpr[] = "_variants_fills.<locals>.genexpr";
static char __pyx_k_Load_an_numpy_structured_array[] = "\n    Load an numpy structured array with data from the fixed fields of a VCF file\n    (including INFO).\n\n    Parameters\n    ----------\n\n    vcf_fn: string or list\n        Name of the VCF file or list of file names\n    region: string, optional\n        Region to extract, e.g., 'chr1' or 'chr1:0-100000'\n    fields: list or array-like, optional\n        List of fields to extract from the VCF\n    exclude_fields: list or array-like, optional\n        Fields to exclude from extraction\n    dtypes: dict or dict-like, optional\n        Dictionary cotaining dtypes to use instead of the default inferred ones\n    arities: dict or dict-like, optional\n        Dictinoary containing field:integer mappings used to override the number\n        of values to expect\n    fills: dict or dict-like, optional\n        Dictionary containing field:fillvalue mappings used to override the\n        defaults used for missing values\n    transformers: dict or dict-like, optional\n        Dictionary containing field:function mappings used to preprocess\n        any values prior to loading into array\n    vcf_types: dict or dict-like, optional\n        Dictionary containing field:string mappings used to override any\n        bogus type declarations in the VCF header (e.g., MQ0Fraction declared\n        as Integer)\n    count: int, optional\n        Attempt to extract a specific number of records\n    progress: int, optional\n        If greater than 0, log progress\n    logstream: file or file-like object, optional\n        Stream to use for logging progress\n    condition: array, optional\n        Boolean array defining which rows to load\n    slice_args: tuple or list, optional\n        Slice of the underlying iterator, e.g., (0, 1000, 10) takes every\n        10th row from the first 1000\n    flatten_filter: bool, optional\n        Return FILTER as multiple boolean fields, e.g., FILTER_PASS,\n        FILTER_LowQuality, etc.\n    verbose: bool, optional\n        Log more messages.""\n    cache: bool, optional\n        If True, save the resulting numpy array to disk, and load from the\n        cache if present rather than rebuilding from the VCF.\n    cachedir: string, optional\n        Manually specify the directory to use to store cache files.\n    skip_cached: bool, optional\n        If True and cache file is fresh, do not load and return None.\n\n    Examples\n    --------\n\n        >>> from vcfnp import variants\n        >>> V = variants('fixture/sample.vcf')\n        >>> V\n        array([ ('19', 111, '.', 'A', 'C', 9.600000381469727, (False, False, False), 2, True, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('19', 112, '.', 'A', 'G', 10.0, (False, False, False), 2, True, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('20', 14370, 'rs6054257', 'G', 'A', 29.0, (False, False, True), 2, True, 0, '.', 0, 0.5, 0, True, 14, True, 3),\n               ('20', 17330, '.', 'T', 'A', 3.0, (True, False, False), 2, True, 0, '.', 0, 0.017000000923871994, 0, False, 11, False, 3),\n               ('20', 1110696, 'rs6040355', 'A', 'G', 67.0, (False, False, True), 3, True, 0, 'T', 0, 0.3330000042915344, 0, True, 10, False, 2),\n               ('20', 1230237, '.', 'T', '.', 47.0, (False, False, True), 2, False, 0, 'T', 0, 0.0, 0, False, 13, False, 3),\n               ('20', 1234567, 'microsat1', 'G', 'GA', 50.0, (False, False, True), 3, False, 1, 'G', 3, 0.0, 6, False, 9, False, 3),\n               ('20', 1235237, '.', 'T', '.', 0.0, (False, False, False), 2, False, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('X', 10, 'rsTest', 'AC', 'A', 10.0, (False, False, True), 3, False, -1, '.', 0, 0.0, 0, False, 0, False, 0)],\n              dtype=[('CHROM', 'S12'), ('POS', '<i4'), ('ID', 'S12'), ('REF', 'S12'), ('ALT', 'S12'), ('QUAL', '<f4'), ('FILTER', [('q10', '?'), ('s50', '?'), ('PASS', '?')]), ('num_alleles', 'u1'), ('is_snp', '?'), ('svlen', '<i4'), ('AA', 'S12'), ('AC', '<u2'), ('AF', '<f4'), ('AN', '<u2'), ('DB', '?'), ('""DP', '<i4'), ('H2', '?'), ('NS', '<i4')])\n        >>> V['QUAL']\n        array([  9.60000038,  10.        ,  29.        ,   3.        ,\n                67.        ,  47.        ,  50.        ,   0.        ,  10.        ], dtype=float32)\n        >>> V['FILTER']['PASS']\n        array([False, False,  True, False,  True,  True,  True, False,  True], dtype=bool)\n        >>> V['AF']\n        array([ 0.   ,  0.   ,  0.5  ,  0.017,  0.333,  0.   ,  0.   ,  0.   ,  0.   ], dtype=float32)\n\n    ";
static char __pyx_k_eff_default_transformer_locals[] = "eff_default_transformer.<locals>._transformer.<locals>.genexpr";
static char __pyx_k_CalldataLoader_build_locals_gen[] = "_CalldataLoader.build.<locals>.genexpr";
static char __pyx_k_Load_a_numpy_1_dimensional_stru[] = "\n    Load a numpy 1-dimensional structured array with data from the sample\n    columns of a VCF file.\n\n    Parameters\n    ----------\n\n    vcf_fn: string or list\n        Name of the VCF file or list of file names.\n    region: string\n        Region to extract, e.g., 'chr1' or 'chr1:0-100000'.\n    fields: list or array-like\n        List of fields to extract from the VCF.\n    exclude_fields: list or array-like\n        Fields to exclude from extraction.\n    dtypes: dict or dict-like\n        Dictionary cotaining dtypes to use instead of the default inferred ones\n    arities: dict or dict-like\n        Override the amount of values to expect.\n    fills: dict or dict-like\n        Dictionary containing field:fillvalue mappings used to override the\n        default fill in values in VCF fields.\n    vcf_types: dict or dict-like\n        Dictionary containing field:string mappings used to override any\n        bogus type declarations in the VCF header.\n    count: int\n        Attempt to extract a specific number of records.\n    progress: int\n        If greater than 0, log parsing progress.\n    logstream: file or file-like object\n        Stream to use for logging progress.\n    condition: array\n        Boolean array defining which rows to load.\n    slice_args: tuple or list\n        Slice of the underlying iterator, e.g., (0, 1000, 10) takes every\n        10th row from the first 1000.\n    verbose: bool\n        Log more messages.\n    cache: bool\n        If True, save the resulting numpy array to disk, and load from the\n        cache if present rather than rebuilding from the VCF.\n    cachedir: string\n        Manually specify the directory to use to store cache files.\n    skip_cached: bool\n        If True and cache file is fresh, do not load and return None.\n\n    Examples\n    --------\n\n        >>> from vcfnp import calldata, view2d\n        >>> C = calldata('fixture/sample.vcf')\n        >>> C\n        array([ ((True, True, [0, 0], 0, 0, '""0|0', [10, 10]), (True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, False, [0, 1], 0, 0, '0/1', [3, 3])),\n               ((True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, False, [0, 1], 0, 0, '0/1', [3, 3])),\n               ((True, True, [0, 0], 1, 48, '0|0', [51, 51]), (True, True, [1, 0], 8, 48, '1|0', [51, 51]), (True, False, [1, 1], 5, 43, '1/1', [0, 0])),\n               ((True, True, [0, 0], 3, 49, '0|0', [58, 50]), (True, True, [0, 1], 5, 3, '0|1', [65, 3]), (True, False, [0, 0], 3, 41, '0/0', [0, 0])),\n               ((True, True, [1, 2], 6, 21, '1|2', [23, 27]), (True, True, [2, 1], 0, 2, '2|1', [18, 2]), (True, False, [2, 2], 4, 35, '2/2', [0, 0])),\n               ((True, True, [0, 0], 0, 54, '0|0', [56, 60]), (True, True, [0, 0], 4, 48, '0|0', [51, 51]), (True, False, [0, 0], 2, 61, '0/0', [0, 0])),\n               ((True, False, [0, 1], 4, 0, '0/1', [0, 0]), (True, False, [0, 2], 2, 17, '0/2', [0, 0]), (False, False, [-1, -1], 3, 40, './.', [0, 0])),\n               ((True, False, [0, 0], 0, 0, '0/0', [0, 0]), (True, True, [0, 0], 0, 0, '0|0', [0, 0]), (False, False, [-1, -1], 0, 0, './.', [0, 0])),\n               ((True, False, [0, -1], 0, 0, '0', [0, 0]), (True, False, [0, 1], 0, 0, '0/1', [0, 0]), (True, True, [0, 2], 0, 0, '0|2', [0, 0]))],\n              dtype=[('NA00001', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))]), ('NA00002', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))]), ('NA00003', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])])\n        >>> C['NA00001']\n        array([(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n               (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n               (True, True, [0, 0], 1, 48, '0|0', [51, 51]),""\n               (True, True, [0, 0], 3, 49, '0|0', [58, 50]),\n               (True, True, [1, 2], 6, 21, '1|2', [23, 27]),\n               (True, True, [0, 0], 0, 54, '0|0', [56, 60]),\n               (True, False, [0, 1], 4, 0, '0/1', [0, 0]),\n               (True, False, [0, 0], 0, 0, '0/0', [0, 0]),\n               (True, False, [0, -1], 0, 0, '0', [0, 0])],\n              dtype=[('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])\n        >>> C2d = view2d(C)\n        >>> C2d\n        array([[(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, False, [0, 1], 0, 0, '0/1', [3, 3])],\n               [(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, False, [0, 1], 0, 0, '0/1', [3, 3])],\n               [(True, True, [0, 0], 1, 48, '0|0', [51, 51]),\n                (True, True, [1, 0], 8, 48, '1|0', [51, 51]),\n                (True, False, [1, 1], 5, 43, '1/1', [0, 0])],\n               [(True, True, [0, 0], 3, 49, '0|0', [58, 50]),\n                (True, True, [0, 1], 5, 3, '0|1', [65, 3]),\n                (True, False, [0, 0], 3, 41, '0/0', [0, 0])],\n               [(True, True, [1, 2], 6, 21, '1|2', [23, 27]),\n                (True, True, [2, 1], 0, 2, '2|1', [18, 2]),\n                (True, False, [2, 2], 4, 35, '2/2', [0, 0])],\n               [(True, True, [0, 0], 0, 54, '0|0', [56, 60]),\n                (True, True, [0, 0], 4, 48, '0|0', [51, 51]),\n                (True, False, [0, 0], 2, 61, '0/0', [0, 0])],\n               [(True, False, [0, 1], 4, 0, '0/1', [0, 0]),\n                (True, False, [0, 2], 2, 17, '0/2', [0, 0]),\n                (False, False, [-1, -1], 3, 40, './.', [0, 0])],\n               [(True, False, [0, 0], 0, 0, '0/0', [0, 0]),\n                (True, True, [0, 0], 0, 0, '0|0', [0, 0]),""\n                (False, False, [-1, -1], 0, 0, './.', [0, 0])],\n               [(True, False, [0, -1], 0, 0, '0', [0, 0]),\n                (True, False, [0, 1], 0, 0, '0/1', [0, 0]),\n                (True, True, [0, 2], 0, 0, '0|2', [0, 0])]],\n              dtype=[('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])\n        >>> C2d['genotype']\n        array([[[ 0,  0],\n                [ 0,  0],\n                [ 0,  1]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [ 0,  1]],\n\n               [[ 0,  0],\n                [ 1,  0],\n                [ 1,  1]],\n\n               [[ 0,  0],\n                [ 0,  1],\n                [ 0,  0]],\n\n               [[ 1,  2],\n                [ 2,  1],\n                [ 2,  2]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [ 0,  0]],\n\n               [[ 0,  1],\n                [ 0,  2],\n                [-1, -1]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [-1, -1]],\n\n               [[ 0, -1],\n                [ 0,  1],\n                [ 0,  2]]], dtype=int8)\n        >>> C2d['genotype'][3, :]\n        array([[0, 0],\n               [0, 1],\n               [0, 0]], dtype=int8)\n\n    ";
static char __pyx_k_Utility_function_to_view_a_stru[] = "\n    Utility function to view a structured 1D array where all fields have a\n    uniform dtype (e.g., an array constructed by :func:calldata) as a 2D array.\n\n    Parameters\n    ----------\n\n    a: numpy array or array-like\n        The array to be viewed as 2D, must have a uniform dtype\n\n    Returns\n    -------\n\n    A 2D view of the array.\n\n    Examples\n    --------\n\n        >>> from vcfnp import calldata\n        >>> a = calldata('sample.vcf')\n        >>> a\n        array([ ((True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, False, [0, 1], '0/1', 0, 0, [3, 3])),\n               ((True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, False, [0, 1], '0/1', 0, 0, [3, 3])),\n               ((True, True, [0, 0], '0|0', 48, 1, [51, 51]), (True, True, [1, 0], '1|0', 48, 8, [51, 51]), (True, False, [1, 1], '1/1', 43, 5, [0, 0])),\n               ((True, True, [0, 0], '0|0', 49, 3, [58, 50]), (True, True, [0, 1], '0|1', 3, 5, [65, 3]), (True, False, [0, 0], '0/0', 41, 3, [0, 0])),\n               ((True, True, [1, 2], '1|2', 21, 6, [23, 27]), (True, True, [2, 1], '2|1', 2, 0, [18, 2]), (True, False, [2, 2], '2/2', 35, 4, [0, 0])),\n               ((True, True, [0, 0], '0|0', 54, 0, [56, 60]), (True, True, [0, 0], '0|0', 48, 4, [51, 51]), (True, False, [0, 0], '0/0', 61, 2, [0, 0])),\n               ((True, False, [0, 1], '0/1', 0, 4, [0, 0]), (True, False, [0, 2], '0/2', 17, 2, [0, 0]), (True, False, [1, 1], '1/1', 40, 3, [0, 0])),\n               ((True, False, [0, 0], '0/0', 0, 0, [0, 0]), (True, True, [0, 0], '0|0', 0, 0, [0, 0]), (False, False, [-1, -1], './.', 0, 0, [0, 0])),\n               ((True, False, [0, -1], '0', 0, 0, [0, 0]), (True, False, [0, 1], '0/1', 0, 0, [0, 0]), (True, True, [0, 2], '0|2', 0, 0, [0, 0]))],\n              dtype=[('NA00001', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2""'), ('HQ', '<i4', (2,))]), ('NA00002', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))]), ('NA00003', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))])])\n        >>> from vcfnp import view2d\n        >>> b = view2d(a)\n        >>> b\n        array([[(True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, False, [0, 1], '0/1', 0, 0, [3, 3])],\n               [(True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, False, [0, 1], '0/1', 0, 0, [3, 3])],\n               [(True, True, [0, 0], '0|0', 48, 1, [51, 51]),\n                (True, True, [1, 0], '1|0', 48, 8, [51, 51]),\n                (True, False, [1, 1], '1/1', 43, 5, [0, 0])],\n               [(True, True, [0, 0], '0|0', 49, 3, [58, 50]),\n                (True, True, [0, 1], '0|1', 3, 5, [65, 3]),\n                (True, False, [0, 0], '0/0', 41, 3, [0, 0])],\n               [(True, True, [1, 2], '1|2', 21, 6, [23, 27]),\n                (True, True, [2, 1], '2|1', 2, 0, [18, 2]),\n                (True, False, [2, 2], '2/2', 35, 4, [0, 0])],\n               [(True, True, [0, 0], '0|0', 54, 0, [56, 60]),\n                (True, True, [0, 0], '0|0', 48, 4, [51, 51]),\n                (True, False, [0, 0], '0/0', 61, 2, [0, 0])],\n               [(True, False, [0, 1], '0/1', 0, 4, [0, 0]),\n                (True, False, [0, 2], '0/2', 17, 2, [0, 0]),\n                (True, False, [1, 1], '1/1', 40, 3, [0, 0])],\n               [(True, False, [0, 0], '0/0', 0, 0, [0, 0]),\n                (True, True, [0, 0], '0|0', 0, 0, [0, 0]),\n                (False, False, [-1, -1], './.', 0, 0, [0, 0])],\n               [(True, False, [0, -1], '0', 0, 0, [0, 0]),\n                (True, False, [""0, 1], '0/1', 0, 0, [0, 0]),\n                (True, True, [0, 2], '0|2', 0, 0, [0, 0])]],\n              dtype=[('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))])\n        >>> b['GT']\n        array([['0|0', '0|0', '0/1'],\n               ['0|0', '0|0', '0/1'],\n               ['0|0', '1|0', '1/1'],\n               ['0|0', '0|1', '0/0'],\n               ['1|2', '2|1', '2/2'],\n               ['0|0', '0|0', '0/0'],\n               ['0/1', '0/2', '1/1'],\n               ['0/0', '0|0', './.'],\n               ['0', '0/1', '0|2']],\n              dtype='|S3')\n\n    ";
static char __pyx_k_VariantsLoader_build_locals_gen[] = "_VariantsLoader.build.<locals>.genexpr";
static char __pyx_k_WARNING_duplicate_definition_in[] = "WARNING: duplicate definition in header: %s";
static char __pyx_k_WARNING_no_definition_found_for[] = "WARNING: no definition found for field %s";
static char __pyx_k_calldata_arities_locals_genexpr[] = "_calldata_arities.<locals>.genexpr";
static char __pyx_k_home_aliman_src_github_alimanfo[] = "/home/aliman/src/github/alimanfoo/vcfnp/vcfnp.pyx";
static char __pyx_k_info_transformers_locals_genexp[] = "_info_transformers.<locals>.genexpr";
static char __pyx_k_s_rows_in_2fs_batch_in_2fs_d_ro[] = "%s rows in %.2fs; batch in %.2fs (%d rows/s)";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_variants_arities_locals_genexpr[] = "_variants_arities.<locals>.genexpr";
static char __pyx_k_Abstract_class_providing_support[] = "Abstract class providing support for loading an array optionally via a\n    cache layer.";
static char __pyx_k_Class_for_building_variants_arra[] = "Class for building variants array.";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_VariantsTable___iter___locals_ge[] = "VariantsTable.__iter__.<locals>.genexpr";
static char __pyx_k_WARNING_no_INFO_definition_found[] = "WARNING: no INFO definition found for field %s";
static char __pyx_k_caching_only_supported_when_load[] = "caching only supported when loading from a single VCF file";
static char __pyx_k_eff_default_transformer_locals_2[] = "eff_default_transformer.<locals>._transformer";
static char __pyx_k_filename_argument_must_be_string[] = "filename argument must be string, list or tuple";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_unexpected_error_cache_directory[] = "unexpected error, cache directory is not a directory: %r";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_2_0_0_dev0;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ABHet;
static PyObject *__pyx_n_s_ABHom;
static PyObject *__pyx_n_s_AC;
static PyObject *__pyx_n_s_AD;
static PyObject *__pyx_n_s_AF;
static PyObject *__pyx_n_b_ALT;
static PyObject *__pyx_n_s_ALT;
static PyObject *__pyx_n_s_AN;
static PyObject *__pyx_kp_s_Abstract_class_providing_support;
static PyObject *__pyx_n_s_Amino_Acid_Change;
static PyObject *__pyx_n_s_Amino_Acid_Length;
static PyObject *__pyx_n_s_ArrayLoader;
static PyObject *__pyx_n_s_ArrayLoader___init;
static PyObject *__pyx_n_s_ArrayLoader_build;
static PyObject *__pyx_n_s_ArrayLoader_load;
static PyObject *__pyx_n_s_BaseQRankSum;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CACHEDIR_SUFFIX;
static PyObject *__pyx_n_b_CHROM;
static PyObject *__pyx_n_s_CHROM;
static PyObject *__pyx_n_s_CODING;
static PyObject *__pyx_n_s_Calldata2DLoader;
static PyObject *__pyx_n_s_Calldata2DLoader_build;
static PyObject *__pyx_n_s_CalldataLoader;
static PyObject *__pyx_n_s_CalldataLoader_build;
static PyObject *__pyx_n_s_CalldataLoader_build_locals_gen;
static PyObject *__pyx_kp_s_Class_for_building_variants_arra;
static PyObject *__pyx_n_s_ClippingRankSum;
static PyObject *__pyx_n_s_Codon_Change;
static PyObject *__pyx_n_s_DEFAULT_CALLDATA_ARITY;
static PyObject *__pyx_n_s_DEFAULT_CALLDATA_DTYPE;
static PyObject *__pyx_n_s_DEFAULT_CALLDATA_FILL;
static PyObject *__pyx_n_s_DEFAULT_FILL_MAP;
static PyObject *__pyx_n_s_DEFAULT_FLATTEN;
static PyObject *__pyx_n_s_DEFAULT_INFO_DTYPE;
static PyObject *__pyx_n_s_DEFAULT_TRANSFORMER;
static PyObject *__pyx_n_s_DEFAULT_TYPE_MAP;
static PyObject *__pyx_n_s_DEFAULT_VARIANT_ARITY;
static PyObject *__pyx_n_s_DEFAULT_VARIANT_DTYPE;
static PyObject *__pyx_n_s_DEFAULT_VARIANT_FILL;
static PyObject *__pyx_n_s_DP;
static PyObject *__pyx_n_s_Dels;
static PyObject *__pyx_n_s_EFF;
static PyObject *__pyx_n_s_EFF_DEFAULT_DTYPE;
static PyObject *__pyx_n_s_EFF_DEFAULT_FILLS;
static PyObject *__pyx_n_s_EFF_FIELDS;
static PyObject *__pyx_n_s_Effect;
static PyObject *__pyx_n_s_Effect_Impact;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_Exon;
static PyObject *__pyx_n_b_FILTER;
static PyObject *__pyx_n_s_FILTER;
static PyObject *__pyx_n_s_FILTER_2;
static PyObject *__pyx_n_s_FS;
static PyObject *__pyx_n_s_Flag;
static PyObject *__pyx_n_s_Float;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_Functional_Class;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_n_s_GQ;
static PyObject *__pyx_n_b_GT;
static PyObject *__pyx_n_s_GT;
static PyObject *__pyx_n_s_Gene_Coding;
static PyObject *__pyx_n_s_Gene_Name;
static PyObject *__pyx_n_s_HRun;
static PyObject *__pyx_n_s_HaplotypeScore;
static PyObject *__pyx_n_b_ID;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_b_INFO;
static PyObject *__pyx_n_s_InbreedingCoeff;
static PyObject *__pyx_n_s_Integer;
static PyObject *__pyx_kp_u_Load_a_numpy_1_dimensional_stru;
static PyObject *__pyx_kp_u_Load_an_numpy_structured_array;
static PyObject *__pyx_n_s_Logger;
static PyObject *__pyx_n_s_Logger___call;
static PyObject *__pyx_n_s_Logger___init;
static PyObject *__pyx_n_s_MLEAC;
static PyObject *__pyx_n_s_MLEAF;
static PyObject *__pyx_n_s_MLPSAC;
static PyObject *__pyx_n_s_MLPSAF;
static PyObject *__pyx_n_s_MQ;
static PyObject *__pyx_n_s_MQ0;
static PyObject *__pyx_n_s_MQ0Fraction;
static PyObject *__pyx_n_s_MQRankSum;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_OND;
static PyObject *__pyx_n_s_PASS;
static PyObject *__pyx_n_s_PL;
static PyObject *__pyx_n_b_POS;
static PyObject *__pyx_n_s_POS;
static PyObject *__pyx_n_s_PY2;
static PyObject *__pyx_n_s_QD;
static PyObject *__pyx_n_b_QUAL;
static PyObject *__pyx_n_s_QUAL;
static PyObject *__pyx_n_b_REF;
static PyObject *__pyx_n_s_REF;
static PyObject *__pyx_n_s_RPA;
static PyObject *__pyx_n_s_RU;
static PyObject *__pyx_n_s_ReadPosRankSum;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_STANDARD_CALLDATA_FIELDS;
static PyObject *__pyx_n_s_STANDARD_VARIANT_FIELDS;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_String;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_TYPESTRING2KEY;
static PyObject *__pyx_n_s_Transcript_BioType;
static PyObject *__pyx_n_s_Transcript_ID;
static PyObject *__pyx_kp_u_Utility_function_to_view_a_stru;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VariantType;
static PyObject *__pyx_n_s_VariantsLoader;
static PyObject *__pyx_n_s_VariantsLoader_build;
static PyObject *__pyx_n_s_VariantsLoader_build_locals_gen;
static PyObject *__pyx_n_s_VariantsTable;
static PyObject *__pyx_n_s_VariantsTable___init;
static PyObject *__pyx_n_s_VariantsTable___iter;
static PyObject *__pyx_n_s_VariantsTable___iter___locals_ge;
static PyObject *__pyx_kp_s_WARNING_duplicate_definition_in;
static PyObject *__pyx_kp_s_WARNING_no_INFO_definition_found;
static PyObject *__pyx_kp_s_WARNING_no_definition_found_for;
static PyObject *__pyx_kp_s__136;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_b__19;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_b__20;
static PyObject *__pyx_kp_s__20;
static PyObject *__pyx_kp_s__24;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_b__46;
static PyObject *__pyx_n_s__5;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a12;
static PyObject *__pyx_n_s_a14;
static PyObject *__pyx_n_s_a20;
static PyObject *__pyx_n_s_a33;
static PyObject *__pyx_n_s_a6;
static PyObject *__pyx_n_s_a7;
static PyObject *__pyx_n_s_a8;
static PyObject *__pyx_kp_s_a_d;
static PyObject *__pyx_n_s_after;
static PyObject *__pyx_n_s_after_all;
static PyObject *__pyx_n_s_all_samples;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_arities;
static PyObject *__pyx_n_s_arr;
static PyObject *__pyx_n_s_array_type;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b1;
static PyObject *__pyx_n_s_before;
static PyObject *__pyx_n_s_before_all;
static PyObject *__pyx_n_s_binary_type;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_kp_s_building_array;
static PyObject *__pyx_n_s_cache;
static PyObject *__pyx_kp_s_cache_file_available;
static PyObject *__pyx_kp_s_cache_file_out_of_date;
static PyObject *__pyx_n_s_cache_fn;
static PyObject *__pyx_n_s_cachedir;
static PyObject *__pyx_kp_s_caching_is_disabled;
static PyObject *__pyx_kp_s_caching_is_enabled;
static PyObject *__pyx_kp_s_caching_only_supported_when_load;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_calldata;
static PyObject *__pyx_n_s_calldata_2d;
static PyObject *__pyx_n_s_calldata_arities;
static PyObject *__pyx_n_s_calldata_arities_locals_genexpr;
static PyObject *__pyx_n_s_calldata_dtype;
static PyObject *__pyx_n_s_calldata_fields;
static PyObject *__pyx_n_s_calldata_fills;
static PyObject *__pyx_n_s_calldata_fills_locals_genexpr;
static PyObject *__pyx_kp_u_calldata_line_1161;
static PyObject *__pyx_n_s_cell_dtype;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cols;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_datetime;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtypes;
static PyObject *__pyx_n_s_eff;
static PyObject *__pyx_n_s_eff_default_transformer;
static PyObject *__pyx_n_s_eff_default_transformer_locals;
static PyObject *__pyx_n_s_eff_default_transformer_locals_2;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exclude_fields;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_extend;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_f2;
static PyObject *__pyx_n_s_f4;
static PyObject *__pyx_n_s_ff;
static PyObject *__pyx_n_s_fflds;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_fieldspec;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_file_not_found_s;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_kp_s_filename_argument_must_be_string;
static PyObject *__pyx_n_s_filenames;
static PyObject *__pyx_n_s_filenames_from_arg;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_fills;
static PyObject *__pyx_n_s_filter_ids;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_flatten_2;
static PyObject *__pyx_n_s_flatten_eff;
static PyObject *__pyx_n_s_flatten_eff_locals__flatten;
static PyObject *__pyx_n_s_flatten_filter;
static PyObject *__pyx_n_s_flt;
static PyObject *__pyx_n_s_flush;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_format_counts;
static PyObject *__pyx_n_s_format_ids;
static PyObject *__pyx_n_s_format_types;
static PyObject *__pyx_n_s_fromiter;
static PyObject *__pyx_n_s_fromiter_2;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_b_genotype;
static PyObject *__pyx_n_s_genotype;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_cache_fn;
static PyObject *__pyx_n_s_get_logger;
static PyObject *__pyx_n_s_getmtime;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_kp_s_home_aliman_src_github_alimanfo;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i4;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info_counts;
static PyObject *__pyx_n_s_info_ids;
static PyObject *__pyx_n_s_info_transformers;
static PyObject *__pyx_n_s_info_transformers_locals_genexp;
static PyObject *__pyx_n_s_info_types;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_2;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_is_cached;
static PyObject *__pyx_n_b_is_called;
static PyObject *__pyx_n_s_is_called;
static PyObject *__pyx_n_b_is_phased;
static PyObject *__pyx_n_s_is_phased;
static PyObject *__pyx_n_b_is_snp;
static PyObject *__pyx_n_s_is_snp;
static PyObject *__pyx_n_s_isdir;
static PyObject *__pyx_n_s_islice;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iter_withprogress;
static PyObject *__pyx_n_s_iterable;
static PyObject *__pyx_n_s_itercalldata;
static PyObject *__pyx_n_s_itercalldata_with_condition;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_itervariants;
static PyObject *__pyx_n_s_itervariants_with_condition;
static PyObject *__pyx_n_s_itervariantstable;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_lambda;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_loader;
static PyObject *__pyx_kp_s_loading_from_cache_file;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logstream;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makedirs;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_match_eff_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mk_cache_fn;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_nm;
static PyObject *__pyx_kp_s_no_cache_file_found;
static PyObject *__pyx_n_s_nolog;
static PyObject *__pyx_n_s_now;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_b_num_alleles;
static PyObject *__pyx_n_s_num_alleles;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_parse_info;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_plody;
static PyObject *__pyx_n_s_ploidy;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_prog_eff_main;
static PyObject *__pyx_n_s_progress;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_region;
static PyObject *__pyx_n_s_region_set;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s_npy;
static PyObject *__pyx_kp_s_s_rows_in_2fs_batch_in_2fs_d_ro;
static PyObject *__pyx_kp_s_s_rows_in_2fs_d_rows_s;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_npy;
static PyObject *__pyx_n_s_sampleNames;
static PyObject *__pyx_n_s_samples;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_kp_s_saving_to_cache_file;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_skip_cached;
static PyObject *__pyx_kp_s_skipping_load_from_cache_file;
static PyObject *__pyx_n_s_slice_args;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stack;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_string_types;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_b_svlen;
static PyObject *__pyx_n_s_svlen;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text_type;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_transformer;
static PyObject *__pyx_n_s_transformers;
static PyObject *__pyx_n_s_u1;
static PyObject *__pyx_n_s_u2;
static PyObject *__pyx_kp_s_unexpected_error_cache_directory;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_s_unknown_sample_s;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_variant;
static PyObject *__pyx_n_s_variant_file;
static PyObject *__pyx_n_s_variants;
static PyObject *__pyx_n_s_variants_arities;
static PyObject *__pyx_n_s_variants_arities_locals_genexpr;
static PyObject *__pyx_n_s_variants_dtype;
static PyObject *__pyx_n_s_variants_fields;
static PyObject *__pyx_n_s_variants_fills;
static PyObject *__pyx_n_s_variants_fills_locals_genexpr;
static PyObject *__pyx_kp_u_variants_line_581;
static PyObject *__pyx_n_s_vcf;
static PyObject *__pyx_n_s_vcf_count;
static PyObject *__pyx_n_s_vcf_fn;
static PyObject *__pyx_n_s_vcf_fns;
static PyObject *__pyx_n_s_vcf_type;
static PyObject *__pyx_n_s_vcf_types;
static PyObject *__pyx_kp_s_vcfnp;
static PyObject *__pyx_n_s_vcfnp_2;
static PyObject *__pyx_kp_s_vcfnp_cache;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_version_info;
static PyObject *__pyx_n_s_view;
static PyObject *__pyx_n_s_view2d;
static PyObject *__pyx_kp_u_view2d_line_1532;
static PyObject *__pyx_n_s_visited;
static PyObject *__pyx_n_s_warn_duplicates;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_float_0_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__22;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__23;
static PyObject *__pyx_slice__35;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__134;
static PyObject *__pyx_codeobj__139;

/* "vcfnp.pyx":35
 * logger = logging.getLogger(__name__)
 * import inspect
 * debug = lambda msg: logger.debug('%s: %s' % (inspect.stack()[0][3], msg))             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_62lambda1(PyObject *__pyx_self, PyObject *__pyx_v_msg); /*proto*/
static PyMethodDef __pyx_mdef_5vcfnp_62lambda1 = {"lambda1", (PyCFunction)__pyx_pw_5vcfnp_62lambda1, METH_O, 0};
static PyObject *__pyx_pw_5vcfnp_62lambda1(PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_5vcfnp_lambda1(__pyx_self, ((PyObject *)__pyx_v_msg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_5vcfnp_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_inspect); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_stack); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_msg);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vcfnp.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":223
 * 
 * 
 * def _variants_fields(fields, exclude_fields, info_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which fields to extract when loading
 *     variants."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_1_variants_fields(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp__variants_fields[] = "_variants_fields(fields, exclude_fields, info_ids)\nUtility function to determine which fields to extract when loading\n    variants.";
static PyMethodDef __pyx_mdef_5vcfnp_1_variants_fields = {"_variants_fields", (PyCFunction)__pyx_pw_5vcfnp_1_variants_fields, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp__variants_fields};
static PyObject *__pyx_pw_5vcfnp_1_variants_fields(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_exclude_fields = 0;
  PyObject *__pyx_v_info_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_variants_fields (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_exclude_fields,&__pyx_n_s_info_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exclude_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_fields", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_fields", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_variants_fields") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = values[0];
    __pyx_v_exclude_fields = values[1];
    __pyx_v_info_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_variants_fields", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._variants_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp__variants_fields(__pyx_self, __pyx_v_fields, __pyx_v_exclude_fields, __pyx_v_info_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp__variants_fields(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_info_ids) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_variants_fields", 0);
  __Pyx_INCREF(__pyx_v_fields);

  /* "vcfnp.pyx":226
 *     """Utility function to determine which fields to extract when loading
 *     variants."""
 *     if fields is None:             # <<<<<<<<<<<<<<
 *         # no fields specified by user
 *         # by default extract all standard and INFO fields
 */
  __pyx_t_1 = (__pyx_v_fields == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":229
 *         # no fields specified by user
 *         # by default extract all standard and INFO fields
 *         fields = STANDARD_VARIANT_FIELDS + info_ids             # <<<<<<<<<<<<<<
 *     else:
 *         # fields have been specified
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_info_ids); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":232
 *     else:
 *         # fields have been specified
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             # check for non-standard fields not declared in INFO header
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:
 */
    if (likely(PyList_CheckExact(__pyx_v_fields)) || PyTuple_CheckExact(__pyx_v_fields)) {
      __pyx_t_4 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_fields); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":234
 *         for f in fields:
 *             # check for non-standard fields not declared in INFO header
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:             # <<<<<<<<<<<<<<
 *                 # support extracting INFO even if not declared in header,
 *                 # but warn...
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = (__pyx_t_1 != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_info_ids, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = (__pyx_t_7 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":237
 *                 # support extracting INFO even if not declared in header,
 *                 # but warn...
 *                 print('WARNING: no INFO definition found for field %s' % f,             # <<<<<<<<<<<<<<
 *                       file=sys.stderr)
 *     # process any exclusions
 */
        __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_no_INFO_definition_found, __pyx_v_f); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);

        /* "vcfnp.pyx":238
 *                 # but warn...
 *                 print('WARNING: no INFO definition found for field %s' % f,
 *                       file=sys.stderr)             # <<<<<<<<<<<<<<
 *     # process any exclusions
 *     if exclude_fields is not None:
 */
        __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_stderr); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_file, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "vcfnp.pyx":237
 *                 # support extracting INFO even if not declared in header,
 *                 # but warn...
 *                 print('WARNING: no INFO definition found for field %s' % f,             # <<<<<<<<<<<<<<
 *                       file=sys.stderr)
 *     # process any exclusions
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L6;
      }
      __pyx_L6:;

      /* "vcfnp.pyx":232
 *     else:
 *         # fields have been specified
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             # check for non-standard fields not declared in INFO header
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":240
 *                       file=sys.stderr)
 *     # process any exclusions
 *     if exclude_fields is not None:             # <<<<<<<<<<<<<<
 *         fields = [f for f in fields if f not in exclude_fields]
 *     return tuple(fields)
 */
  __pyx_t_2 = (__pyx_v_exclude_fields != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":241
 *     # process any exclusions
 *     if exclude_fields is not None:
 *         fields = [f for f in fields if f not in exclude_fields]             # <<<<<<<<<<<<<<
 *     return tuple(fields)
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_fields)) || PyTuple_CheckExact(__pyx_v_fields)) {
      __pyx_t_10 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_10); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_fields); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_10);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_exclude_fields, Py_NE)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_f))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "vcfnp.pyx":242
 *     if exclude_fields is not None:
 *         fields = [f for f in fields if f not in exclude_fields]
 *     return tuple(fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":223
 * 
 * 
 * def _variants_fields(fields, exclude_fields, info_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which fields to extract when loading
 *     variants."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._variants_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_3_variants_arities(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_2_variants_arities[] = "_variants_arities(fields, arities, info_counts)\nUtility function to determine arities (i.e., number of values to\n    expect) for variants fields.";
static PyMethodDef __pyx_mdef_5vcfnp_3_variants_arities = {"_variants_arities", (PyCFunction)__pyx_pw_5vcfnp_3_variants_arities, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_2_variants_arities};
static PyObject *__pyx_pw_5vcfnp_3_variants_arities(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_info_counts = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_variants_arities (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_info_counts,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_arities", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_counts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_arities", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_variants_arities") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = values[0];
    __pyx_v_arities = values[1];
    __pyx_v_info_counts = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_variants_arities", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._variants_arities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_2_variants_arities(__pyx_self, __pyx_v_fields, __pyx_v_arities, __pyx_v_info_counts);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_17_variants_arities_2generator6(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":268
 *                 arities[f] = vcf_count
 *     # convert to tuple for zipping with fields
 *     arities = tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return arities
 * 
 */

static PyObject *__pyx_pf_5vcfnp_17_variants_arities_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_1_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_17_variants_arities_2generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_variants_arities_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._variants_arities.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_17_variants_arities_2generator6(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arities)) { __Pyx_RaiseClosureNameError("arities"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arities, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */

static PyObject *__pyx_pf_5vcfnp_2_variants_arities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_counts) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *__pyx_cur_scope;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_vcf_count = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_variants_arities", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)__pyx_tp_new_5vcfnp___pyx_scope_struct___variants_arities(__pyx_ptype_5vcfnp___pyx_scope_struct___variants_arities, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_arities = __pyx_v_arities;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arities);

  /* "vcfnp.pyx":248
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 *     if arities is None:             # <<<<<<<<<<<<<<
 *         # no arities specified by user
 *         arities = dict()
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_arities == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":250
 *     if arities is None:
 *         # no arities specified by user
 *         arities = dict()             # <<<<<<<<<<<<<<
 *     for f, vcf_count in zip(fields, info_counts):
 *         if f == 'FILTER':
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_arities);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_arities, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":251
 *         # no arities specified by user
 *         arities = dict()
 *     for f, vcf_count in zip(fields, info_counts):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER':
 *             arities[f] = 1  # force one value for the FILTER field
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_info_counts);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_info_counts);
  __Pyx_GIVEREF(__pyx_v_info_counts);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_count, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":252
 *         arities = dict()
 *     for f, vcf_count in zip(fields, info_counts):
 *         if f == 'FILTER':             # <<<<<<<<<<<<<<
 *             arities[f] = 1  # force one value for the FILTER field
 *         elif f not in arities:
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "vcfnp.pyx":253
 *     for f, vcf_count in zip(fields, info_counts):
 *         if f == 'FILTER':
 *             arities[f] = 1  # force one value for the FILTER field             # <<<<<<<<<<<<<<
 *         elif f not in arities:
 *             # arity not specified by user
 */
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }

    /* "vcfnp.pyx":254
 *         if f == 'FILTER':
 *             arities[f] = 1  # force one value for the FILTER field
 *         elif f not in arities:             # <<<<<<<<<<<<<<
 *             # arity not specified by user
 *             if f in STANDARD_VARIANT_FIELDS:
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_cur_scope->__pyx_v_arities, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":256
 *         elif f not in arities:
 *             # arity not specified by user
 *             if f in STANDARD_VARIANT_FIELDS:             # <<<<<<<<<<<<<<
 *                 arities[f] = DEFAULT_VARIANT_ARITY[f]
 *             elif vcf_count == ALLELE_NUMBER:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "vcfnp.pyx":257
 *             # arity not specified by user
 *             if f in STANDARD_VARIANT_FIELDS:
 *                 arities[f] = DEFAULT_VARIANT_ARITY[f]             # <<<<<<<<<<<<<<
 *             elif vcf_count == ALLELE_NUMBER:
 *                 # default to 1 (biallelic)
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_VARIANT_ARITY); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_4, __pyx_v_f); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":258
 *             if f in STANDARD_VARIANT_FIELDS:
 *                 arities[f] = DEFAULT_VARIANT_ARITY[f]
 *             elif vcf_count == ALLELE_NUMBER:             # <<<<<<<<<<<<<<
 *                 # default to 1 (biallelic)
 *                 arities[f] = 1
 */
      __pyx_t_8 = PyInt_FromLong(vcf::ALLELE_NUMBER); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_vcf_count, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":260
 *             elif vcf_count == ALLELE_NUMBER:
 *                 # default to 1 (biallelic)
 *                 arities[f] = 1             # <<<<<<<<<<<<<<
 *             elif vcf_count <= 0:
 *                 # catch any other cases of non-specific arity
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":261
 *                 # default to 1 (biallelic)
 *                 arities[f] = 1
 *             elif vcf_count <= 0:             # <<<<<<<<<<<<<<
 *                 # catch any other cases of non-specific arity
 *                 arities[f] = 1
 */
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_vcf_count, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":263
 *             elif vcf_count <= 0:
 *                 # catch any other cases of non-specific arity
 *                 arities[f] = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 # use arity (i.e., number) specified in INFO header
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }
      /*else*/ {

        /* "vcfnp.pyx":266
 *             else:
 *                 # use arity (i.e., number) specified in INFO header
 *                 arities[f] = vcf_count             # <<<<<<<<<<<<<<
 *     # convert to tuple for zipping with fields
 *     arities = tuple(arities[f] for f in fields)
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_v_vcf_count) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L9:;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":251
 *         # no arities specified by user
 *         arities = dict()
 *     for f, vcf_count in zip(fields, info_counts):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER':
 *             arities[f] = 1  # force one value for the FILTER field
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":268
 *                 arities[f] = vcf_count
 *     # convert to tuple for zipping with fields
 *     arities = tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return arities
 * 
 */
  __pyx_t_3 = __pyx_pf_5vcfnp_17_variants_arities_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_arities, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":269
 *     # convert to tuple for zipping with fields
 *     arities = tuple(arities[f] for f in fields)
 *     return arities             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arities);
  __pyx_r = __pyx_cur_scope->__pyx_v_arities;
  goto __pyx_L0;

  /* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._variants_arities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_vcf_count);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_5_variants_fills(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4_variants_fills[] = "_variants_fills(fields, fills, info_types)\nUtility function to determine fill values for variants fields with\n    missing values.";
static PyMethodDef __pyx_mdef_5vcfnp_5_variants_fills = {"_variants_fills", (PyCFunction)__pyx_pw_5vcfnp_5_variants_fills, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4_variants_fills};
static PyObject *__pyx_pw_5vcfnp_5_variants_fills(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_info_types = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_variants_fills (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_fills,&__pyx_n_s_info_types,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_fills", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_fills", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_variants_fills") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = values[0];
    __pyx_v_fills = values[1];
    __pyx_v_info_types = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_variants_fills", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._variants_fills", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4_variants_fills(__pyx_self, __pyx_v_fields, __pyx_v_fills, __pyx_v_info_types);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_15_variants_fills_2generator7(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":287
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     # convert to tuple for zipping with fields
 *     fills = tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return fills
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_variants_fills_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_3_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_variants_fills_2generator7, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_variants_fills_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._variants_fills.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_variants_fills_2generator7(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills)) { __Pyx_RaiseClosureNameError("fills"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */

static PyObject *__pyx_pf_5vcfnp_4_variants_fills(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_fills, PyObject *__pyx_v_info_types) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *__pyx_cur_scope;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_variants_fills", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)__pyx_tp_new_5vcfnp___pyx_scope_struct_2__variants_fills(__pyx_ptype_5vcfnp___pyx_scope_struct_2__variants_fills, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_fills = __pyx_v_fills;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fills);

  /* "vcfnp.pyx":275
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 *     if fills is None:             # <<<<<<<<<<<<<<
 *         # no fills specified by user
 *         fills = dict()
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_fills == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":277
 *     if fills is None:
 *         # no fills specified by user
 *         fills = dict()             # <<<<<<<<<<<<<<
 *     for f, vcf_type in zip(fields, info_types):
 *         if f == 'FILTER':
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fills);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fills, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":278
 *         # no fills specified by user
 *         fills = dict()
 *     for f, vcf_type in zip(fields, info_types):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER':
 *             fills[f] = False
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_v_info_types);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":279
 *         fills = dict()
 *     for f, vcf_type in zip(fields, info_types):
 *         if f == 'FILTER':             # <<<<<<<<<<<<<<
 *             fills[f] = False
 *         elif f not in fills:
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "vcfnp.pyx":280
 *     for f, vcf_type in zip(fields, info_types):
 *         if f == 'FILTER':
 *             fills[f] = False             # <<<<<<<<<<<<<<
 *         elif f not in fills:
 *             if f in STANDARD_VARIANT_FIELDS:
 */
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, Py_False) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }

    /* "vcfnp.pyx":281
 *         if f == 'FILTER':
 *             fills[f] = False
 *         elif f not in fills:             # <<<<<<<<<<<<<<
 *             if f in STANDARD_VARIANT_FIELDS:
 *                 fills[f] = DEFAULT_VARIANT_FILL[f]
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_cur_scope->__pyx_v_fills, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":282
 *             fills[f] = False
 *         elif f not in fills:
 *             if f in STANDARD_VARIANT_FIELDS:             # <<<<<<<<<<<<<<
 *                 fills[f] = DEFAULT_VARIANT_FILL[f]
 *             else:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "vcfnp.pyx":283
 *         elif f not in fills:
 *             if f in STANDARD_VARIANT_FIELDS:
 *                 fills[f] = DEFAULT_VARIANT_FILL[f]             # <<<<<<<<<<<<<<
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_VARIANT_FILL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_4, __pyx_v_f); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9;
      }
      /*else*/ {

        /* "vcfnp.pyx":285
 *                 fills[f] = DEFAULT_VARIANT_FILL[f]
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]             # <<<<<<<<<<<<<<
 *     # convert to tuple for zipping with fields
 *     fills = tuple(fills[f] for f in fields)
 */
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_FILL_MAP); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = PyObject_GetItem(__pyx_t_8, __pyx_v_vcf_type); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, __pyx_t_4) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L9:;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":278
 *         # no fills specified by user
 *         fills = dict()
 *     for f, vcf_type in zip(fields, info_types):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER':
 *             fills[f] = False
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":287
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     # convert to tuple for zipping with fields
 *     fills = tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 *     return fills
 * 
 */
  __pyx_t_3 = __pyx_pf_5vcfnp_15_variants_fills_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fills);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fills, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":288
 *     # convert to tuple for zipping with fields
 *     fills = tuple(fills[f] for f in fields)
 *     return fills             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fills);
  __pyx_r = __pyx_cur_scope->__pyx_v_fills;
  goto __pyx_L0;

  /* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._variants_fills", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_7_info_transformers(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_6_info_transformers[] = "_info_transformers(fields, transformers)\nUtility function to determine transformer functions for variants\n    fields.";
static PyMethodDef __pyx_mdef_5vcfnp_7_info_transformers = {"_info_transformers", (PyCFunction)__pyx_pw_5vcfnp_7_info_transformers, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_6_info_transformers};
static PyObject *__pyx_pw_5vcfnp_7_info_transformers(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_transformers = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_info_transformers (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_transformers,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_transformers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_info_transformers", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_info_transformers") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fields = values[0];
    __pyx_v_transformers = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_info_transformers", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._info_transformers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_6_info_transformers(__pyx_self, __pyx_v_fields, __pyx_v_transformers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_18_info_transformers_2generator8(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":300
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 *     return tuple(transformers[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_5vcfnp_18_info_transformers_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_5_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_18_info_transformers_2generator8, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_info_transformers_locals_genexp); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._info_transformers.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_18_info_transformers_2generator8(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_transformers)) { __Pyx_RaiseClosureNameError("transformers"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_transformers, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */

static PyObject *__pyx_pf_5vcfnp_6_info_transformers(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_transformers) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *__pyx_cur_scope;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_info_transformers", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)__pyx_tp_new_5vcfnp___pyx_scope_struct_4__info_transformers(__pyx_ptype_5vcfnp___pyx_scope_struct_4__info_transformers, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_transformers = __pyx_v_transformers;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_transformers);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_transformers);

  /* "vcfnp.pyx":294
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 *     if transformers is None:             # <<<<<<<<<<<<<<
 *         # no transformers specified by user
 *         transformers = dict()
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_transformers == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":296
 *     if transformers is None:
 *         # no transformers specified by user
 *         transformers = dict()             # <<<<<<<<<<<<<<
 *     for f in fields:
 *         if f not in transformers:
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_transformers);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_transformers, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":297
 *         # no transformers specified by user
 *         transformers = dict()
 *     for f in fields:             # <<<<<<<<<<<<<<
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "vcfnp.pyx":298
 *         transformers = dict()
 *     for f in fields:
 *         if f not in transformers:             # <<<<<<<<<<<<<<
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 *     return tuple(transformers[f] for f in fields)
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_cur_scope->__pyx_v_transformers, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":299
 *     for f in fields:
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)             # <<<<<<<<<<<<<<
 *     return tuple(transformers[f] for f in fields)
 * 
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_TRANSFORMER); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_9 = 1;
        }
      }
      __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_7) {
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_f);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_f);
      __Pyx_GIVEREF(__pyx_v_f);
      __Pyx_INCREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, Py_None);
      __Pyx_GIVEREF(Py_None);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_transformers, __pyx_v_f, __pyx_t_6) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":297
 *         # no transformers specified by user
 *         transformers = dict()
 *     for f in fields:             # <<<<<<<<<<<<<<
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":300
 *         if f not in transformers:
 *             transformers[f] = DEFAULT_TRANSFORMER.get(f, None)
 *     return tuple(transformers[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_pf_5vcfnp_18_info_transformers_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._info_transformers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":303
 * 
 * 
 * def _variants_dtype(fields, dtypes, arities, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                     info_types):
 *     """Utility function to build a numpy dtype for a variants array,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_9_variants_dtype(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_8_variants_dtype[] = "_variants_dtype(fields, dtypes, arities, filter_ids, flatten_filter, info_types)\nUtility function to build a numpy dtype for a variants array,\n    given user arguments and information available from VCF header.";
static PyMethodDef __pyx_mdef_5vcfnp_9_variants_dtype = {"_variants_dtype", (PyCFunction)__pyx_pw_5vcfnp_9_variants_dtype, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_8_variants_dtype};
static PyObject *__pyx_pw_5vcfnp_9_variants_dtype(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_dtypes = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_info_types = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_variants_dtype (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_dtypes,&__pyx_n_s_arities,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_info_types,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtypes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_variants_dtype") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_fields = values[0];
    __pyx_v_dtypes = values[1];
    __pyx_v_arities = values[2];
    __pyx_v_filter_ids = values[3];
    __pyx_v_flatten_filter = values[4];
    __pyx_v_info_types = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_variants_dtype", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._variants_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_8_variants_dtype(__pyx_self, __pyx_v_fields, __pyx_v_dtypes, __pyx_v_arities, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_info_types);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_8_variants_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_info_types) {
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_flt = NULL;
  PyObject *__pyx_v_nm = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_variants_dtype", 0);

  /* "vcfnp.pyx":307
 *     """Utility function to build a numpy dtype for a variants array,
 *     given user arguments and information available from VCF header."""
 *     dtype = list()             # <<<<<<<<<<<<<<
 *     for f, n, vcf_type in zip(fields, arities, info_types):
 *         if f == 'FILTER' and flatten_filter:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dtype = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":308
 *     given user arguments and information available from VCF header."""
 *     dtype = list()
 *     for f, n, vcf_type in zip(fields, arities, info_types):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER' and flatten_filter:
 *             # split FILTER into multiple boolean fields
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_v_info_types);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp.pyx":309
 *     dtype = list()
 *     for f, n, vcf_type in zip(fields, arities, info_types):
 *         if f == 'FILTER' and flatten_filter:             # <<<<<<<<<<<<<<
 *             # split FILTER into multiple boolean fields
 *             for flt in filter_ids:
 */
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_flatten_filter); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __pyx_t_11;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_10) {

      /* "vcfnp.pyx":311
 *         if f == 'FILTER' and flatten_filter:
 *             # split FILTER into multiple boolean fields
 *             for flt in filter_ids:             # <<<<<<<<<<<<<<
 *                 nm = 'FILTER_' + flt
 *                 dtype.append((nm, 'b1'))
 */
      if (likely(PyList_CheckExact(__pyx_v_filter_ids)) || PyTuple_CheckExact(__pyx_v_filter_ids)) {
        __pyx_t_2 = __pyx_v_filter_ids; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_filter_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_13(__pyx_t_2);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_flt, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "vcfnp.pyx":312
 *             # split FILTER into multiple boolean fields
 *             for flt in filter_ids:
 *                 nm = 'FILTER_' + flt             # <<<<<<<<<<<<<<
 *                 dtype.append((nm, 'b1'))
 *         elif f == 'FILTER' and not flatten_filter:
 */
        __pyx_t_7 = PyNumber_Add(__pyx_n_s_FILTER_2, __pyx_v_flt); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_v_nm, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "vcfnp.pyx":313
 *             for flt in filter_ids:
 *                 nm = 'FILTER_' + flt
 *                 dtype.append((nm, 'b1'))             # <<<<<<<<<<<<<<
 *         elif f == 'FILTER' and not flatten_filter:
 *             # represent FILTER as a structured field
 */
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_nm);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_nm);
        __Pyx_GIVEREF(__pyx_v_nm);
        __Pyx_INCREF(__pyx_n_s_b1);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_b1);
        __Pyx_GIVEREF(__pyx_n_s_b1);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dtype, __pyx_t_7); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "vcfnp.pyx":311
 *         if f == 'FILTER' and flatten_filter:
 *             # split FILTER into multiple boolean fields
 *             for flt in filter_ids:             # <<<<<<<<<<<<<<
 *                 nm = 'FILTER_' + flt
 *                 dtype.append((nm, 'b1'))
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":314
 *                 nm = 'FILTER_' + flt
 *                 dtype.append((nm, 'b1'))
 *         elif f == 'FILTER' and not flatten_filter:             # <<<<<<<<<<<<<<
 *             # represent FILTER as a structured field
 *             t = [(flt, 'b1') for flt in filter_ids]
 */
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_flatten_filter); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_15 = ((!__pyx_t_11) != 0);
    __pyx_t_10 = __pyx_t_15;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_10) {

      /* "vcfnp.pyx":316
 *         elif f == 'FILTER' and not flatten_filter:
 *             # represent FILTER as a structured field
 *             t = [(flt, 'b1') for flt in filter_ids]             # <<<<<<<<<<<<<<
 *             dtype.append((f, t))
 *         else:
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_v_filter_ids)) || PyTuple_CheckExact(__pyx_v_filter_ids)) {
        __pyx_t_7 = __pyx_v_filter_ids; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_filter_ids); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_13(__pyx_t_7);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_flt, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_flt);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_flt);
        __Pyx_GIVEREF(__pyx_v_flt);
        __Pyx_INCREF(__pyx_n_s_b1);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_b1);
        __Pyx_GIVEREF(__pyx_n_s_b1);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vcfnp.pyx":317
 *             # represent FILTER as a structured field
 *             t = [(flt, 'b1') for flt in filter_ids]
 *             dtype.append((f, t))             # <<<<<<<<<<<<<<
 *         else:
 *             if dtypes is not None and f in dtypes:
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_f);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_f);
      __Pyx_GIVEREF(__pyx_v_f);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dtype, __pyx_t_2); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "vcfnp.pyx":319
 *             dtype.append((f, t))
 *         else:
 *             if dtypes is not None and f in dtypes:             # <<<<<<<<<<<<<<
 *                 # user overrides default dtype
 *                 t = dtypes[f]
 */
      __pyx_t_15 = (__pyx_v_dtypes != Py_None);
      __pyx_t_11 = (__pyx_t_15 != 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_11 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_dtypes, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_15 = (__pyx_t_11 != 0);
      __pyx_t_10 = __pyx_t_15;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_10) {

        /* "vcfnp.pyx":321
 *             if dtypes is not None and f in dtypes:
 *                 # user overrides default dtype
 *                 t = dtypes[f]             # <<<<<<<<<<<<<<
 *             elif f in STANDARD_VARIANT_FIELDS:
 *                 t = DEFAULT_VARIANT_DTYPE[f]
 */
        __pyx_t_2 = PyObject_GetItem(__pyx_v_dtypes, __pyx_v_f); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
        __pyx_t_2 = 0;
        goto __pyx_L16;
      }

      /* "vcfnp.pyx":322
 *                 # user overrides default dtype
 *                 t = dtypes[f]
 *             elif f in STANDARD_VARIANT_FIELDS:             # <<<<<<<<<<<<<<
 *                 t = DEFAULT_VARIANT_DTYPE[f]
 *             elif f in DEFAULT_INFO_DTYPE:
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = (__pyx_t_10 != 0);
      if (__pyx_t_15) {

        /* "vcfnp.pyx":323
 *                 t = dtypes[f]
 *             elif f in STANDARD_VARIANT_FIELDS:
 *                 t = DEFAULT_VARIANT_DTYPE[f]             # <<<<<<<<<<<<<<
 *             elif f in DEFAULT_INFO_DTYPE:
 *                 # known INFO field
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_VARIANT_DTYPE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_7);
        __pyx_t_7 = 0;
        goto __pyx_L16;
      }

      /* "vcfnp.pyx":324
 *             elif f in STANDARD_VARIANT_FIELDS:
 *                 t = DEFAULT_VARIANT_DTYPE[f]
 *             elif f in DEFAULT_INFO_DTYPE:             # <<<<<<<<<<<<<<
 *                 # known INFO field
 *                 t = DEFAULT_INFO_DTYPE[f]
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_INFO_DTYPE); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_15 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_7, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = (__pyx_t_15 != 0);
      if (__pyx_t_10) {

        /* "vcfnp.pyx":326
 *             elif f in DEFAULT_INFO_DTYPE:
 *                 # known INFO field
 *                 t = DEFAULT_INFO_DTYPE[f]             # <<<<<<<<<<<<<<
 *             else:
 *                 t = DEFAULT_TYPE_MAP[vcf_type]
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_INFO_DTYPE); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = PyObject_GetItem(__pyx_t_7, __pyx_v_f); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
        __pyx_t_2 = 0;
        goto __pyx_L16;
      }
      /*else*/ {

        /* "vcfnp.pyx":328
 *                 t = DEFAULT_INFO_DTYPE[f]
 *             else:
 *                 t = DEFAULT_TYPE_MAP[vcf_type]             # <<<<<<<<<<<<<<
 *             # deal with arity
 *             if n == 1:
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_TYPE_MAP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_2, __pyx_v_vcf_type); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_7);
        __pyx_t_7 = 0;
      }
      __pyx_L16:;

      /* "vcfnp.pyx":330
 *                 t = DEFAULT_TYPE_MAP[vcf_type]
 *             # deal with arity
 *             if n == 1:             # <<<<<<<<<<<<<<
 *                 dtype.append((f, t))
 *             else:
 */
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_n, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_10) {

        /* "vcfnp.pyx":331
 *             # deal with arity
 *             if n == 1:
 *                 dtype.append((f, t))             # <<<<<<<<<<<<<<
 *             else:
 *                 dtype.append((f, t, (n,)))
 */
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_f);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_f);
        __Pyx_GIVEREF(__pyx_v_f);
        __Pyx_INCREF(__pyx_v_t);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_t);
        __Pyx_GIVEREF(__pyx_v_t);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dtype, __pyx_t_7); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L19;
      }
      /*else*/ {

        /* "vcfnp.pyx":333
 *                 dtype.append((f, t))
 *             else:
 *                 dtype.append((f, t, (n,)))             # <<<<<<<<<<<<<<
 *     return dtype
 * 
 */
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_f);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_f);
        __Pyx_GIVEREF(__pyx_v_f);
        __Pyx_INCREF(__pyx_v_t);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_t);
        __Pyx_GIVEREF(__pyx_v_t);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dtype, __pyx_t_2); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L19:;
    }
    __pyx_L7:;

    /* "vcfnp.pyx":308
 *     given user arguments and information available from VCF header."""
 *     dtype = list()
 *     for f, n, vcf_type in zip(fields, arities, info_types):             # <<<<<<<<<<<<<<
 *         if f == 'FILTER' and flatten_filter:
 *             # split FILTER into multiple boolean fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":334
 *             else:
 *                 dtype.append((f, t, (n,)))
 *     return dtype             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dtype);
  __pyx_r = __pyx_v_dtype;
  goto __pyx_L0;

  /* "vcfnp.pyx":303
 * 
 * 
 * def _variants_dtype(fields, dtypes, arities, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                     info_types):
 *     """Utility function to build a numpy dtype for a variants array,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vcfnp._variants_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_flt);
  __Pyx_XDECREF(__pyx_v_nm);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":337
 * 
 * 
 * def _filenames_from_arg(filename):             # <<<<<<<<<<<<<<
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_11_filenames_from_arg(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5vcfnp_10_filenames_from_arg[] = "_filenames_from_arg(filename)\nUtility function to deal with polymorphic filenames argument.";
static PyMethodDef __pyx_mdef_5vcfnp_11_filenames_from_arg = {"_filenames_from_arg", (PyCFunction)__pyx_pw_5vcfnp_11_filenames_from_arg, METH_O, __pyx_doc_5vcfnp_10_filenames_from_arg};
static PyObject *__pyx_pw_5vcfnp_11_filenames_from_arg(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_filenames_from_arg (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_10_filenames_from_arg(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_10_filenames_from_arg(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filenames = NULL;
  PyObject *__pyx_v_fn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_filenames_from_arg", 0);

  /* "vcfnp.pyx":339
 * def _filenames_from_arg(filename):
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):             # <<<<<<<<<<<<<<
 *         filenames = [filename]
 *     elif isinstance(filename, (list, tuple)):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_string_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_filename, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "vcfnp.pyx":340
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):
 *         filenames = [filename]             # <<<<<<<<<<<<<<
 *     elif isinstance(filename, (list, tuple)):
 *         filenames = filename
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_filename);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    __pyx_v_filenames = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":341
 *     if isinstance(filename, string_types):
 *         filenames = [filename]
 *     elif isinstance(filename, (list, tuple)):             # <<<<<<<<<<<<<<
 *         filenames = filename
 *     else:
 */
  __pyx_t_2 = PyList_Check(__pyx_v_filename); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":342
 *         filenames = [filename]
 *     elif isinstance(filename, (list, tuple)):
 *         filenames = filename             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception('filename argument must be string, list or tuple')
 */
    __Pyx_INCREF(__pyx_v_filename);
    __pyx_v_filenames = __pyx_v_filename;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":344
 *         filenames = filename
 *     else:
 *         raise Exception('filename argument must be string, list or tuple')             # <<<<<<<<<<<<<<
 *     for fn in filenames:
 *         if not os.path.exists(fn):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "vcfnp.pyx":345
 *     else:
 *         raise Exception('filename argument must be string, list or tuple')
 *     for fn in filenames:             # <<<<<<<<<<<<<<
 *         if not os.path.exists(fn):
 *             raise Exception('file not found: %s' % fn)
 */
  if (likely(PyList_CheckExact(__pyx_v_filenames)) || PyTuple_CheckExact(__pyx_v_filenames)) {
    __pyx_t_1 = __pyx_v_filenames; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_filenames); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_fn, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp.pyx":346
 *         raise Exception('filename argument must be string, list or tuple')
 *     for fn in filenames:
 *         if not os.path.exists(fn):             # <<<<<<<<<<<<<<
 *             raise Exception('file not found: %s' % fn)
 *     return filenames
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_path); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exists); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_fn); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_fn);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_fn);
      __Pyx_GIVEREF(__pyx_v_fn);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = ((!__pyx_t_2) != 0);
    if (__pyx_t_3) {

      /* "vcfnp.pyx":347
 *     for fn in filenames:
 *         if not os.path.exists(fn):
 *             raise Exception('file not found: %s' % fn)             # <<<<<<<<<<<<<<
 *     return filenames
 * 
 */
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_file_not_found_s, __pyx_v_fn); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "vcfnp.pyx":345
 *     else:
 *         raise Exception('filename argument must be string, list or tuple')
 *     for fn in filenames:             # <<<<<<<<<<<<<<
 *         if not os.path.exists(fn):
 *             raise Exception('file not found: %s' % fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":348
 *         if not os.path.exists(fn):
 *             raise Exception('file not found: %s' % fn)
 *     return filenames             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_filenames);
  __pyx_r = __pyx_v_filenames;
  goto __pyx_L0;

  /* "vcfnp.pyx":337
 * 
 * 
 * def _filenames_from_arg(filename):             # <<<<<<<<<<<<<<
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._filenames_from_arg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filenames);
  __Pyx_XDECREF(__pyx_v_fn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":356
 * class _Logger(object):
 * 
 *     def __init__(self, logstream=None):             # <<<<<<<<<<<<<<
 *         if logstream is None:
 *             logstream = sys.stderr
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_7_Logger_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_7_Logger___init__[] = "_Logger.__init__(self, logstream=None)";
static PyMethodDef __pyx_mdef_5vcfnp_7_Logger_1__init__ = {"__init__", (PyCFunction)__pyx_pw_5vcfnp_7_Logger_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_7_Logger___init__};
static PyObject *__pyx_pw_5vcfnp_7_Logger_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_logstream = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_logstream,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logstream);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_logstream = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._Logger.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_7_Logger___init__(__pyx_self, __pyx_v_self, __pyx_v_logstream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_7_Logger___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_logstream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_logstream);

  /* "vcfnp.pyx":357
 * 
 *     def __init__(self, logstream=None):
 *         if logstream is None:             # <<<<<<<<<<<<<<
 *             logstream = sys.stderr
 *         self.logstream = logstream
 */
  __pyx_t_1 = (__pyx_v_logstream == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":358
 *     def __init__(self, logstream=None):
 *         if logstream is None:
 *             logstream = sys.stderr             # <<<<<<<<<<<<<<
 *         self.logstream = logstream
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stderr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_logstream, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":359
 *         if logstream is None:
 *             logstream = sys.stderr
 *         self.logstream = logstream             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, *msg):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_logstream, __pyx_v_logstream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":356
 * class _Logger(object):
 * 
 *     def __init__(self, logstream=None):             # <<<<<<<<<<<<<<
 *         if logstream is None:
 *             logstream = sys.stderr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp._Logger.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_logstream);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":361
 *         self.logstream = logstream
 * 
 *     def __call__(self, *msg):             # <<<<<<<<<<<<<<
 *         s = ('[vcfnp] '
 *              + str(datetime.now())
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_7_Logger_3__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_7_Logger_2__call__[] = "_Logger.__call__(self, *msg)";
static PyMethodDef __pyx_mdef_5vcfnp_7_Logger_3__call__ = {"__call__", (PyCFunction)__pyx_pw_5vcfnp_7_Logger_3__call__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_7_Logger_2__call__};
static PyObject *__pyx_pw_5vcfnp_7_Logger_3__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_msg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_msg = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_msg)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_msg);
  } else {
    __pyx_v_msg = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "__call__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_msg); __pyx_v_msg = 0;
  __Pyx_AddTraceback("vcfnp._Logger.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_7_Logger_2__call__(__pyx_self, __pyx_v_self, __pyx_v_msg);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_7_Logger_2__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "vcfnp.pyx":363
 *     def __call__(self, *msg):
 *         s = ('[vcfnp] '
 *              + str(datetime.now())             # <<<<<<<<<<<<<<
 *              + ' :: '
 *              + ' '.join([str(m) for m in msg]))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_now); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_kp_s_vcfnp, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":364
 *         s = ('[vcfnp] '
 *              + str(datetime.now())
 *              + ' :: '             # <<<<<<<<<<<<<<
 *              + ' '.join([str(m) for m in msg]))
 *         print(s, file=self.logstream)
 */
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":365
 *              + str(datetime.now())
 *              + ' :: '
 *              + ' '.join([str(m) for m in msg]))             # <<<<<<<<<<<<<<
 *         print(s, file=self.logstream)
 *         self.logstream.flush()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_v_msg; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_m, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_m);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_m);
    __Pyx_GIVEREF(__pyx_v_m);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__3, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":366
 *              + ' :: '
 *              + ' '.join([str(m) for m in msg]))
 *         print(s, file=self.logstream)             # <<<<<<<<<<<<<<
 *         self.logstream.flush()
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_logstream); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_file, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":367
 *              + ' '.join([str(m) for m in msg]))
 *         print(s, file=self.logstream)
 *         self.logstream.flush()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_logstream); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":361
 *         self.logstream = logstream
 * 
 *     def __call__(self, *msg):             # <<<<<<<<<<<<<<
 *         s = ('[vcfnp] '
 *              + str(datetime.now())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("vcfnp._Logger.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":370
 * 
 * 
 * def _nolog(*args, **kwargs):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_13_nolog(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_12_nolog[] = "_nolog(*args, **kwargs)";
static PyMethodDef __pyx_mdef_5vcfnp_13_nolog = {"_nolog", (PyCFunction)__pyx_pw_5vcfnp_13_nolog, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_12_nolog};
static PyObject *__pyx_pw_5vcfnp_13_nolog(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_nolog (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_nolog", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5vcfnp_12_nolog(__pyx_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_12_nolog(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_nolog", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":374
 * 
 * 
 * def _get_logger(logstream, verbose):             # <<<<<<<<<<<<<<
 *     if verbose:
 *         log = _Logger(logstream)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_15_get_logger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_14_get_logger[] = "_get_logger(logstream, verbose)";
static PyMethodDef __pyx_mdef_5vcfnp_15_get_logger = {"_get_logger", (PyCFunction)__pyx_pw_5vcfnp_15_get_logger, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_14_get_logger};
static PyObject *__pyx_pw_5vcfnp_15_get_logger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_logstream = 0;
  PyObject *__pyx_v_verbose = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_logger (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_logstream,&__pyx_n_s_verbose,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logstream)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_logger", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_logger") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_logstream = values[0];
    __pyx_v_verbose = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_logger", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._get_logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_14_get_logger(__pyx_self, __pyx_v_logstream, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_14_get_logger(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_logstream, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_log = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_logger", 0);

  /* "vcfnp.pyx":375
 * 
 * def _get_logger(logstream, verbose):
 *     if verbose:             # <<<<<<<<<<<<<<
 *         log = _Logger(logstream)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "vcfnp.pyx":376
 * def _get_logger(logstream, verbose):
 *     if verbose:
 *         log = _Logger(logstream)             # <<<<<<<<<<<<<<
 *     else:
 *         log = _nolog
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Logger); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_logstream); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_logstream);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_logstream);
      __Pyx_GIVEREF(__pyx_v_logstream);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_log = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":378
 *         log = _Logger(logstream)
 *     else:
 *         log = _nolog             # <<<<<<<<<<<<<<
 *     return log
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_nolog); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_log = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":379
 *     else:
 *         log = _nolog
 *     return log             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_log);
  __pyx_r = __pyx_v_log;
  goto __pyx_L0;

  /* "vcfnp.pyx":374
 * 
 * 
 * def _get_logger(logstream, verbose):             # <<<<<<<<<<<<<<
 *     if verbose:
 *         log = _Logger(logstream)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vcfnp._get_logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_log);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":385
 * 
 * 
 * def _mk_cache_fn(vcf_fn, array_type, region=None, cachedir=None):             # <<<<<<<<<<<<<<
 *     """Utility function to construct a filename for a cache file, given a VCF
 *     file name (where the original data came from) and other parameters."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_17_mk_cache_fn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_16_mk_cache_fn[] = "_mk_cache_fn(vcf_fn, array_type, region=None, cachedir=None)\nUtility function to construct a filename for a cache file, given a VCF\n    file name (where the original data came from) and other parameters.";
static PyMethodDef __pyx_mdef_5vcfnp_17_mk_cache_fn = {"_mk_cache_fn", (PyCFunction)__pyx_pw_5vcfnp_17_mk_cache_fn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_16_mk_cache_fn};
static PyObject *__pyx_pw_5vcfnp_17_mk_cache_fn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_array_type = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_cachedir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mk_cache_fn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fn,&__pyx_n_s_array_type,&__pyx_n_s_region,&__pyx_n_s_cachedir,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_mk_cache_fn", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cachedir);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_mk_cache_fn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vcf_fn = values[0];
    __pyx_v_array_type = values[1];
    __pyx_v_region = values[2];
    __pyx_v_cachedir = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_mk_cache_fn", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._mk_cache_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_16_mk_cache_fn(__pyx_self, __pyx_v_vcf_fn, __pyx_v_array_type, __pyx_v_region, __pyx_v_cachedir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_16_mk_cache_fn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_array_type, PyObject *__pyx_v_region, PyObject *__pyx_v_cachedir) {
  PyObject *__pyx_v_cache_fn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mk_cache_fn", 0);
  __Pyx_INCREF(__pyx_v_region);
  __Pyx_INCREF(__pyx_v_cachedir);

  /* "vcfnp.pyx":388
 *     """Utility function to construct a filename for a cache file, given a VCF
 *     file name (where the original data came from) and other parameters."""
 *     if cachedir is None:             # <<<<<<<<<<<<<<
 *         # use the VCF file name as the base for a directory name
 *         cachedir = vcf_fn + CACHEDIR_SUFFIX
 */
  __pyx_t_1 = (__pyx_v_cachedir == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":390
 *     if cachedir is None:
 *         # use the VCF file name as the base for a directory name
 *         cachedir = vcf_fn + CACHEDIR_SUFFIX             # <<<<<<<<<<<<<<
 *     if not os.path.exists(cachedir):
 *         # ensure cache dir exists
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_CACHEDIR_SUFFIX); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_v_vcf_fn, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_cachedir, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":391
 *         # use the VCF file name as the base for a directory name
 *         cachedir = vcf_fn + CACHEDIR_SUFFIX
 *     if not os.path.exists(cachedir):             # <<<<<<<<<<<<<<
 *         # ensure cache dir exists
 *         os.makedirs(cachedir)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_cachedir); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_cachedir);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_cachedir);
    __Pyx_GIVEREF(__pyx_v_cachedir);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((!__pyx_t_2) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":393
 *     if not os.path.exists(cachedir):
 *         # ensure cache dir exists
 *         os.makedirs(cachedir)             # <<<<<<<<<<<<<<
 *     else:
 *         assert os.path.isdir(cachedir), \
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_cachedir); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_cachedir);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_cachedir);
      __Pyx_GIVEREF(__pyx_v_cachedir);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "vcfnp.pyx":395
 *         os.makedirs(cachedir)
 *     else:
 *         assert os.path.isdir(cachedir), \             # <<<<<<<<<<<<<<
 *             'unexpected error, cache directory is not a directory: %r' \
 *             % cachedir
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isdir); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_cachedir); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_cachedir);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_cachedir);
        __Pyx_GIVEREF(__pyx_v_cachedir);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) {

        /* "vcfnp.pyx":397
 *         assert os.path.isdir(cachedir), \
 *             'unexpected error, cache directory is not a directory: %r' \
 *             % cachedir             # <<<<<<<<<<<<<<
 *     if region is None:
 *         # loading the whole genome (i.e., all variants)
 */
        __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_unexpected_error_cache_directory, __pyx_v_cachedir); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
  }
  __pyx_L4:;

  /* "vcfnp.pyx":398
 *             'unexpected error, cache directory is not a directory: %r' \
 *             % cachedir
 *     if region is None:             # <<<<<<<<<<<<<<
 *         # loading the whole genome (i.e., all variants)
 *         cache_fn = os.path.join(cachedir, '%s.npy' % array_type)
 */
  __pyx_t_1 = (__pyx_v_region == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":400
 *     if region is None:
 *         # loading the whole genome (i.e., all variants)
 *         cache_fn = os.path.join(cachedir, '%s.npy' % array_type)             # <<<<<<<<<<<<<<
 *     else:
 *         # loading a specific region
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_npy, __pyx_v_array_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cachedir);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_cachedir);
    __Pyx_GIVEREF(__pyx_v_cachedir);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cache_fn = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "vcfnp.pyx":403
 *     else:
 *         # loading a specific region
 *         region = region.replace(':', '_').replace('-', '_')             # <<<<<<<<<<<<<<
 *         cache_fn = os.path.join(cachedir, '%s.%s.npy' % (array_type, region))
 *     return cache_fn
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_region, __pyx_n_s_replace); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_replace); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_region, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "vcfnp.pyx":404
 *         # loading a specific region
 *         region = region.replace(':', '_').replace('-', '_')
 *         cache_fn = os.path.join(cachedir, '%s.%s.npy' % (array_type, region))             # <<<<<<<<<<<<<<
 *     return cache_fn
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_array_type);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_array_type);
    __Pyx_GIVEREF(__pyx_v_array_type);
    __Pyx_INCREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_s_npy, __pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_8) {
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cachedir);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_cachedir);
    __Pyx_GIVEREF(__pyx_v_cachedir);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cache_fn = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_L5:;

  /* "vcfnp.pyx":405
 *         region = region.replace(':', '_').replace('-', '_')
 *         cache_fn = os.path.join(cachedir, '%s.%s.npy' % (array_type, region))
 *     return cache_fn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cache_fn);
  __pyx_r = __pyx_v_cache_fn;
  goto __pyx_L0;

  /* "vcfnp.pyx":385
 * 
 * 
 * def _mk_cache_fn(vcf_fn, array_type, region=None, cachedir=None):             # <<<<<<<<<<<<<<
 *     """Utility function to construct a filename for a cache file, given a VCF
 *     file name (where the original data came from) and other parameters."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vcfnp._mk_cache_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cache_fn);
  __Pyx_XDECREF(__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_cachedir);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":408
 * 
 * 
 * def _get_cache_fn(vcf_fn, array_type, region, cachedir, log):             # <<<<<<<<<<<<<<
 *     """Utility function to obtain a cache file name and determine whether or
 *     not a fresh cache file is available."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_19_get_cache_fn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_18_get_cache_fn[] = "_get_cache_fn(vcf_fn, array_type, region, cachedir, log)\nUtility function to obtain a cache file name and determine whether or\n    not a fresh cache file is available.";
static PyMethodDef __pyx_mdef_5vcfnp_19_get_cache_fn = {"_get_cache_fn", (PyCFunction)__pyx_pw_5vcfnp_19_get_cache_fn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_18_get_cache_fn};
static PyObject *__pyx_pw_5vcfnp_19_get_cache_fn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_array_type = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_cachedir = 0;
  PyObject *__pyx_v_log = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_cache_fn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fn,&__pyx_n_s_array_type,&__pyx_n_s_region,&__pyx_n_s_cachedir,&__pyx_n_s_log,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_cache_fn", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_cache_fn", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cachedir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_cache_fn", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_log)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_cache_fn", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_cache_fn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_vcf_fn = values[0];
    __pyx_v_array_type = values[1];
    __pyx_v_region = values[2];
    __pyx_v_cachedir = values[3];
    __pyx_v_log = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_cache_fn", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._get_cache_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_18_get_cache_fn(__pyx_self, __pyx_v_vcf_fn, __pyx_v_array_type, __pyx_v_region, __pyx_v_cachedir, __pyx_v_log);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_18_get_cache_fn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_array_type, PyObject *__pyx_v_region, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_log) {
  PyObject *__pyx_v_cache_fn = NULL;
  int __pyx_v_is_cached;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_cache_fn", 0);

  /* "vcfnp.pyx":413
 * 
 *     # guard condition
 *     if isinstance(vcf_fn, (list, tuple)):             # <<<<<<<<<<<<<<
 *         raise Exception(
 *             'caching only supported when loading from a single VCF file'
 */
  __pyx_t_2 = PyList_Check(__pyx_v_vcf_fn); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_Check(__pyx_v_vcf_fn); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":414
 *     # guard condition
 *     if isinstance(vcf_fn, (list, tuple)):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             'caching only supported when loading from a single VCF file'
 *         )
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "vcfnp.pyx":419
 * 
 *     # create cache file name
 *     cache_fn = _mk_cache_fn(vcf_fn, array_type=array_type, region=region,             # <<<<<<<<<<<<<<
 *                             cachedir=cachedir)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_mk_cache_fn); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_vcf_fn);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_vcf_fn);
  __Pyx_GIVEREF(__pyx_v_vcf_fn);
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_array_type, __pyx_v_array_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_region, __pyx_v_region) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":420
 *     # create cache file name
 *     cache_fn = _mk_cache_fn(vcf_fn, array_type=array_type, region=region,
 *                             cachedir=cachedir)             # <<<<<<<<<<<<<<
 * 
 *     # decide whether or not a fresh cache file is available
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_cachedir, __pyx_v_cachedir) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":419
 * 
 *     # create cache file name
 *     cache_fn = _mk_cache_fn(vcf_fn, array_type=array_type, region=region,             # <<<<<<<<<<<<<<
 *                             cachedir=cachedir)
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cache_fn = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "vcfnp.pyx":424
 *     # decide whether or not a fresh cache file is available
 *     # (if not, we will parse the VCF and build array from scratch)
 *     if not os.path.exists(cache_fn):             # <<<<<<<<<<<<<<
 *         log('no cache file found')
 *         is_cached = False
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_cache_fn); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_cache_fn);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_cache_fn);
    __Pyx_GIVEREF(__pyx_v_cache_fn);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_1 = ((!__pyx_t_2) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":425
 *     # (if not, we will parse the VCF and build array from scratch)
 *     if not os.path.exists(cache_fn):
 *         log('no cache file found')             # <<<<<<<<<<<<<<
 *         is_cached = False
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "vcfnp.pyx":426
 *     if not os.path.exists(cache_fn):
 *         log('no cache file found')
 *         is_cached = False             # <<<<<<<<<<<<<<
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 *         is_cached = False
 */
    __pyx_v_is_cached = 0;
    goto __pyx_L6;
  }

  /* "vcfnp.pyx":427
 *         log('no cache file found')
 *         is_cached = False
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):             # <<<<<<<<<<<<<<
 *         is_cached = False
 *         log('cache file out of date')
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getmtime); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_vcf_fn); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_vcf_fn);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_vcf_fn);
    __Pyx_GIVEREF(__pyx_v_vcf_fn);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getmtime); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_cache_fn); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_cache_fn);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_cache_fn);
    __Pyx_GIVEREF(__pyx_v_cache_fn);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "vcfnp.pyx":428
 *         is_cached = False
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 *         is_cached = False             # <<<<<<<<<<<<<<
 *         log('cache file out of date')
 *     else:
 */
    __pyx_v_is_cached = 0;

    /* "vcfnp.pyx":429
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 *         is_cached = False
 *         log('cache file out of date')             # <<<<<<<<<<<<<<
 *     else:
 *         is_cached = True
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "vcfnp.pyx":431
 *         log('cache file out of date')
 *     else:
 *         is_cached = True             # <<<<<<<<<<<<<<
 *         log('cache file available')
 * 
 */
    __pyx_v_is_cached = 1;

    /* "vcfnp.pyx":432
 *     else:
 *         is_cached = True
 *         log('cache file available')             # <<<<<<<<<<<<<<
 * 
 *     return cache_fn, is_cached
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L6:;

  /* "vcfnp.pyx":434
 *         log('cache file available')
 * 
 *     return cache_fn, is_cached             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_is_cached); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_cache_fn);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_cache_fn);
  __Pyx_GIVEREF(__pyx_v_cache_fn);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":408
 * 
 * 
 * def _get_cache_fn(vcf_fn, array_type, region, cachedir, log):             # <<<<<<<<<<<<<<
 *     """Utility function to obtain a cache file name and determine whether or
 *     not a fresh cache file is available."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vcfnp._get_cache_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cache_fn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":444
 *     array_type = None
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):             # <<<<<<<<<<<<<<
 *         debug('init')
 *         self.vcf_fn = vcf_fn
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_12_ArrayLoader___init__[] = "_ArrayLoader.__init__(self, vcf_fn, logstream, verbose, **kwargs)";
static PyMethodDef __pyx_mdef_5vcfnp_12_ArrayLoader_1__init__ = {"__init__", (PyCFunction)__pyx_pw_5vcfnp_12_ArrayLoader_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_12_ArrayLoader___init__};
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_logstream = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vcf_fn,&__pyx_n_s_logstream,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logstream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_vcf_fn = values[1];
    __pyx_v_logstream = values[2];
    __pyx_v_verbose = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("vcfnp._ArrayLoader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_12_ArrayLoader___init__(__pyx_self, __pyx_v_self, __pyx_v_vcf_fn, __pyx_v_logstream, __pyx_v_verbose, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_logstream, PyObject *__pyx_v_verbose, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vcfnp.pyx":445
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):
 *         debug('init')             # <<<<<<<<<<<<<<
 *         self.vcf_fn = vcf_fn
 *         # deal with polymorphic vcf_fn argument
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_debug); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":446
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):
 *         debug('init')
 *         self.vcf_fn = vcf_fn             # <<<<<<<<<<<<<<
 *         # deal with polymorphic vcf_fn argument
 *         self.vcf_fns = _filenames_from_arg(vcf_fn)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_vcf_fn, __pyx_v_vcf_fn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":448
 *         self.vcf_fn = vcf_fn
 *         # deal with polymorphic vcf_fn argument
 *         self.vcf_fns = _filenames_from_arg(vcf_fn)             # <<<<<<<<<<<<<<
 *         self.log = _get_logger(logstream, verbose)
 *         for k, v in kwargs.items():
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_filenames_from_arg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_vcf_fn); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_vcf_fn);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_vcf_fn);
    __Pyx_GIVEREF(__pyx_v_vcf_fn);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_vcf_fns, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":449
 *         # deal with polymorphic vcf_fn argument
 *         self.vcf_fns = _filenames_from_arg(vcf_fn)
 *         self.log = _get_logger(logstream, verbose)             # <<<<<<<<<<<<<<
 *         for k, v in kwargs.items():
 *             setattr(self, k, v)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_INCREF(__pyx_v_logstream);
  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_logstream);
  __Pyx_GIVEREF(__pyx_v_logstream);
  __Pyx_INCREF(__pyx_v_verbose);
  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_verbose);
  __Pyx_GIVEREF(__pyx_v_verbose);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_log, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":450
 *         self.vcf_fns = _filenames_from_arg(vcf_fn)
 *         self.log = _get_logger(logstream, verbose)
 *         for k, v in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, k, v)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":451
 *         self.log = _get_logger(logstream, verbose)
 *         for k, v in kwargs.items():
 *             setattr(self, k, v)             # <<<<<<<<<<<<<<
 * 
 *     def load(self):
 */
    __pyx_t_9 = PyObject_SetAttr(__pyx_v_self, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":450
 *         self.vcf_fns = _filenames_from_arg(vcf_fn)
 *         self.log = _get_logger(logstream, verbose)
 *         for k, v in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, k, v)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":444
 *     array_type = None
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):             # <<<<<<<<<<<<<<
 *         debug('init')
 *         self.vcf_fn = vcf_fn
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp._ArrayLoader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":453
 *             setattr(self, k, v)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 *         debug(log)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_3load(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_12_ArrayLoader_2load[] = "_ArrayLoader.load(self)";
static PyMethodDef __pyx_mdef_5vcfnp_12_ArrayLoader_3load = {"load", (PyCFunction)__pyx_pw_5vcfnp_12_ArrayLoader_3load, METH_O, __pyx_doc_5vcfnp_12_ArrayLoader_2load};
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_3load(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_12_ArrayLoader_2load(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader_2load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_log = NULL;
  PyObject *__pyx_v_array_type = NULL;
  PyObject *__pyx_v_vcf_fn = NULL;
  PyObject *__pyx_v_region = NULL;
  PyObject *__pyx_v_cache = NULL;
  PyObject *__pyx_v_cachedir = NULL;
  PyObject *__pyx_v_skip_cached = NULL;
  PyObject *__pyx_v_cache_fn = NULL;
  PyObject *__pyx_v_is_cached = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "vcfnp.pyx":454
 * 
 *     def load(self):
 *         log = self.log             # <<<<<<<<<<<<<<
 *         debug(log)
 *         array_type = self.array_type
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_log = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":455
 *     def load(self):
 *         log = self.log
 *         debug(log)             # <<<<<<<<<<<<<<
 *         array_type = self.array_type
 *         vcf_fn = self.vcf_fn
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_debug); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_log); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_log);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_log);
    __Pyx_GIVEREF(__pyx_v_log);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":456
 *         log = self.log
 *         debug(log)
 *         array_type = self.array_type             # <<<<<<<<<<<<<<
 *         vcf_fn = self.vcf_fn
 *         region = self.region
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_array_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_array_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":457
 *         debug(log)
 *         array_type = self.array_type
 *         vcf_fn = self.vcf_fn             # <<<<<<<<<<<<<<
 *         region = self.region
 *         cache = self.cache
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_vcf_fn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vcf_fn = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":458
 *         array_type = self.array_type
 *         vcf_fn = self.vcf_fn
 *         region = self.region             # <<<<<<<<<<<<<<
 *         cache = self.cache
 *         cachedir = self.cachedir
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_region); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_region = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":459
 *         vcf_fn = self.vcf_fn
 *         region = self.region
 *         cache = self.cache             # <<<<<<<<<<<<<<
 *         cachedir = self.cachedir
 *         skip_cached = self.skip_cached
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cache = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":460
 *         region = self.region
 *         cache = self.cache
 *         cachedir = self.cachedir             # <<<<<<<<<<<<<<
 *         skip_cached = self.skip_cached
 *         if cache:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_cachedir); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cachedir = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":461
 *         cache = self.cache
 *         cachedir = self.cachedir
 *         skip_cached = self.skip_cached             # <<<<<<<<<<<<<<
 *         if cache:
 *             log('caching is enabled')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_skip_cached); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_skip_cached = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":462
 *         cachedir = self.cachedir
 *         skip_cached = self.skip_cached
 *         if cache:             # <<<<<<<<<<<<<<
 *             log('caching is enabled')
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_cache); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "vcfnp.pyx":463
 *         skip_cached = self.skip_cached
 *         if cache:
 *             log('caching is enabled')             # <<<<<<<<<<<<<<
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,
 *                                                 region=region,
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vcfnp.pyx":464
 *         if cache:
 *             log('caching is enabled')
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,             # <<<<<<<<<<<<<<
 *                                                 region=region,
 *                                                 cachedir=cachedir, log=log)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_cache_fn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_vcf_fn);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_vcf_fn);
    __Pyx_GIVEREF(__pyx_v_vcf_fn);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_array_type, __pyx_v_array_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":465
 *             log('caching is enabled')
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,
 *                                                 region=region,             # <<<<<<<<<<<<<<
 *                                                 cachedir=cachedir, log=log)
 *             if not is_cached:
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_region, __pyx_v_region) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":466
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,
 *                                                 region=region,
 *                                                 cachedir=cachedir, log=log)             # <<<<<<<<<<<<<<
 *             if not is_cached:
 *                 log('building array')
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_cachedir, __pyx_v_cachedir) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_log, __pyx_v_log) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":464
 *         if cache:
 *             log('caching is enabled')
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,             # <<<<<<<<<<<<<<
 *                                                 region=region,
 *                                                 cachedir=cachedir, log=log)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_1), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_cache_fn = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_is_cached = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":467
 *                                                 region=region,
 *                                                 cachedir=cachedir, log=log)
 *             if not is_cached:             # <<<<<<<<<<<<<<
 *                 log('building array')
 *                 arr = self.build()
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_is_cached); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {

      /* "vcfnp.pyx":468
 *                                                 cachedir=cachedir, log=log)
 *             if not is_cached:
 *                 log('building array')             # <<<<<<<<<<<<<<
 *                 arr = self.build()
 *                 log('saving to cache file', cache_fn)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vcfnp.pyx":469
 *             if not is_cached:
 *                 log('building array')
 *                 arr = self.build()             # <<<<<<<<<<<<<<
 *                 log('saving to cache file', cache_fn)
 *                 np.save(cache_fn, arr)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_build); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_arr = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":470
 *                 log('building array')
 *                 arr = self.build()
 *                 log('saving to cache file', cache_fn)             # <<<<<<<<<<<<<<
 *                 np.save(cache_fn, arr)
 *             elif skip_cached:
 */
      __Pyx_INCREF(__pyx_v_log);
      __pyx_t_2 = __pyx_v_log; __pyx_t_4 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_1 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_4) {
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_saving_to_cache_file);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_kp_s_saving_to_cache_file);
      __Pyx_GIVEREF(__pyx_kp_s_saving_to_cache_file);
      __Pyx_INCREF(__pyx_v_cache_fn);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_cache_fn);
      __Pyx_GIVEREF(__pyx_v_cache_fn);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vcfnp.pyx":471
 *                 arr = self.build()
 *                 log('saving to cache file', cache_fn)
 *                 np.save(cache_fn, arr)             # <<<<<<<<<<<<<<
 *             elif skip_cached:
 *                 log('skipping load from cache file', cache_fn)
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_save); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cache_fn);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_cache_fn);
      __Pyx_GIVEREF(__pyx_v_cache_fn);
      __Pyx_INCREF(__pyx_v_arr);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_arr);
      __Pyx_GIVEREF(__pyx_v_arr);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6;
    }

    /* "vcfnp.pyx":472
 *                 log('saving to cache file', cache_fn)
 *                 np.save(cache_fn, arr)
 *             elif skip_cached:             # <<<<<<<<<<<<<<
 *                 log('skipping load from cache file', cache_fn)
 *                 arr = None
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_skip_cached); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_7) {

      /* "vcfnp.pyx":473
 *                 np.save(cache_fn, arr)
 *             elif skip_cached:
 *                 log('skipping load from cache file', cache_fn)             # <<<<<<<<<<<<<<
 *                 arr = None
 *             else:
 */
      __Pyx_INCREF(__pyx_v_log);
      __pyx_t_1 = __pyx_v_log; __pyx_t_4 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_4) {
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_skipping_load_from_cache_file);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_kp_s_skipping_load_from_cache_file);
      __Pyx_GIVEREF(__pyx_kp_s_skipping_load_from_cache_file);
      __Pyx_INCREF(__pyx_v_cache_fn);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_v_cache_fn);
      __Pyx_GIVEREF(__pyx_v_cache_fn);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vcfnp.pyx":474
 *             elif skip_cached:
 *                 log('skipping load from cache file', cache_fn)
 *                 arr = None             # <<<<<<<<<<<<<<
 *             else:
 *                 log('loading from cache file', cache_fn)
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_arr = Py_None;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "vcfnp.pyx":476
 *                 arr = None
 *             else:
 *                 log('loading from cache file', cache_fn)             # <<<<<<<<<<<<<<
 *                 arr = np.load(cache_fn)
 * 
 */
      __Pyx_INCREF(__pyx_v_log);
      __pyx_t_1 = __pyx_v_log; __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_2) {
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_loading_from_cache_file);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_kp_s_loading_from_cache_file);
      __Pyx_GIVEREF(__pyx_kp_s_loading_from_cache_file);
      __Pyx_INCREF(__pyx_v_cache_fn);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_cache_fn);
      __Pyx_GIVEREF(__pyx_v_cache_fn);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vcfnp.pyx":477
 *             else:
 *                 log('loading from cache file', cache_fn)
 *                 arr = np.load(cache_fn)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_load); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_cache_fn); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_INCREF(__pyx_v_cache_fn);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_cache_fn);
        __Pyx_GIVEREF(__pyx_v_cache_fn);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_arr = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L6:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":480
 * 
 *         else:
 *             log('caching is disabled')             # <<<<<<<<<<<<<<
 *             log('building array')
 *             arr = self.build()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vcfnp.pyx":481
 *         else:
 *             log('caching is disabled')
 *             log('building array')             # <<<<<<<<<<<<<<
 *             arr = self.build()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_log, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vcfnp.pyx":482
 *             log('caching is disabled')
 *             log('building array')
 *             arr = self.build()             # <<<<<<<<<<<<<<
 * 
 *         return arr
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_build); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_arr = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":484
 *             arr = self.build()
 * 
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     # to be overridden in subclass
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "vcfnp.pyx":453
 *             setattr(self, k, v)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 *         debug(log)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp._ArrayLoader.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_log);
  __Pyx_XDECREF(__pyx_v_array_type);
  __Pyx_XDECREF(__pyx_v_vcf_fn);
  __Pyx_XDECREF(__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_cache);
  __Pyx_XDECREF(__pyx_v_cachedir);
  __Pyx_XDECREF(__pyx_v_skip_cached);
  __Pyx_XDECREF(__pyx_v_cache_fn);
  __Pyx_XDECREF(__pyx_v_is_cached);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":487
 * 
 *     # to be overridden in subclass
 *     def build(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_5build(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_12_ArrayLoader_4build[] = "_ArrayLoader.build(self)";
static PyMethodDef __pyx_mdef_5vcfnp_12_ArrayLoader_5build = {"build", (PyCFunction)__pyx_pw_5vcfnp_12_ArrayLoader_5build, METH_O, __pyx_doc_5vcfnp_12_ArrayLoader_4build};
static PyObject *__pyx_pw_5vcfnp_12_ArrayLoader_5build(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_12_ArrayLoader_4build(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_12_ArrayLoader_4build(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_15_VariantsLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_15_VariantsLoader_build[] = "_VariantsLoader.build(self)";
static PyMethodDef __pyx_mdef_5vcfnp_15_VariantsLoader_1build = {"build", (PyCFunction)__pyx_pw_5vcfnp_15_VariantsLoader_1build, METH_O, __pyx_doc_5vcfnp_15_VariantsLoader_build};
static PyObject *__pyx_pw_5vcfnp_15_VariantsLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_15_VariantsLoader_build(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_15_VariantsLoader_5build_2generator9(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":536
 * 
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 */

static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_5build_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_7_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_VariantsLoader_5build_2generator9, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_VariantsLoader_build_locals_gen); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._VariantsLoader.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_VariantsLoader_5build_2generator9(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":537
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)             # <<<<<<<<<<<<<<
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 *                             for f in fields)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":536
 * 
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types)) { __Pyx_RaiseClosureNameError("info_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_cur_scope->__pyx_v_f, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if ((__pyx_t_5 != 0)) {
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types)) { __Pyx_RaiseClosureNameError("info_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_t_4 = __pyx_int_neg_1;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":537
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)             # <<<<<<<<<<<<<<
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 *                             for f in fields)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":536
 * 
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_15_VariantsLoader_5build_5generator10(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":538
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1             # <<<<<<<<<<<<<<
 *                             for f in fields)
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_5build_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_8_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_VariantsLoader_5build_5generator10, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_VariantsLoader_build_locals_gen); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._VariantsLoader.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_VariantsLoader_5build_5generator10(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":539
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 *                             for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine expected number of values for each field
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":538
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1             # <<<<<<<<<<<<<<
 *                             for f in fields)
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_counts)) { __Pyx_RaiseClosureNameError("info_counts"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_cur_scope->__pyx_v_f, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_counts, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if ((__pyx_t_5 != 0)) {
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_counts)) { __Pyx_RaiseClosureNameError("info_counts"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_counts, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_t_4 = __pyx_int_neg_1;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":539
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 *                             for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine expected number of values for each field
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":538
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1             # <<<<<<<<<<<<<<
 *                             for f in fields)
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_VariantsLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *__pyx_cur_scope;
  PyObject *__pyx_v_log = NULL;
  PyObject *__pyx_v_vcf_fns = NULL;
  struct __pyx_obj_6vcflib_PyVariantCallFile *__pyx_v_vcf = NULL;
  PyObject *__pyx_v_filter_ids = NULL;
  PyObject *__pyx_v_info_ids = NULL;
  PyObject *__pyx_v_parse_info = NULL;
  PyObject *__pyx_v_vcf_types = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_arities = NULL;
  PyObject *__pyx_v_fills = NULL;
  PyObject *__pyx_v_transformers = NULL;
  PyObject *__pyx_v_fieldspec = NULL;
  PyObject *__pyx_v_flatten_filter = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_region = NULL;
  PyObject *__pyx_v_condition = NULL;
  PyObject *__pyx_v_it = NULL;
  PyObject *__pyx_v_slice_args = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)__pyx_tp_new_5vcfnp___pyx_scope_struct_6_build(__pyx_ptype_5vcfnp___pyx_scope_struct_6_build, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);

  /* "vcfnp.pyx":497
 * 
 *     def build(self):
 *         log = self.log             # <<<<<<<<<<<<<<
 * 
 *         # open VCF file to inspect header
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_log = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":500
 * 
 *         # open VCF file to inspect header
 *         vcf_fns = self.vcf_fns             # <<<<<<<<<<<<<<
 *         vcf = PyVariantCallFile(vcf_fns[0])
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_vcf_fns); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vcf_fns = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":501
 *         # open VCF file to inspect header
 *         vcf_fns = self.vcf_fns
 *         vcf = PyVariantCallFile(vcf_fns[0])             # <<<<<<<<<<<<<<
 * 
 *         # extract FILTER definitions
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vcf_fns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6vcflib_PyVariantCallFile)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vcf = ((struct __pyx_obj_6vcflib_PyVariantCallFile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":504
 * 
 *         # extract FILTER definitions
 *         filter_ids = vcf.filter_ids             # <<<<<<<<<<<<<<
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_filter_ids = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":505
 *         # extract FILTER definitions
 *         filter_ids = vcf.filter_ids
 *         _warn_duplicates(filter_ids)             # <<<<<<<<<<<<<<
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn_duplicates); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_filter_ids);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_filter_ids);
    __Pyx_GIVEREF(__pyx_v_filter_ids);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":506
 *         filter_ids = vcf.filter_ids
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))             # <<<<<<<<<<<<<<
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')
 */
  __pyx_t_1 = PySet_New(__pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_filter_ids, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":507
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:             # <<<<<<<<<<<<<<
 *             filter_ids.append('PASS')
 *         filter_ids = tuple(filter_ids)
 */
  __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_n_s_PASS, __pyx_v_filter_ids, Py_NE)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "vcfnp.pyx":508
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')             # <<<<<<<<<<<<<<
 *         filter_ids = tuple(filter_ids)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_filter_ids, __pyx_n_s_PASS); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":509
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')
 *         filter_ids = tuple(filter_ids)             # <<<<<<<<<<<<<<
 * 
 *         # extract INFO definitions
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filter_ids);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_v_filter_ids);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_filter_ids, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":512
 * 
 *         # extract INFO definitions
 *         _warn_duplicates(vcf.info_ids)             # <<<<<<<<<<<<<<
 *         info_ids = tuple(sorted(set(vcf.info_ids)))
 *         info_types = vcf.info_types
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn_duplicates); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_ids); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":513
 *         # extract INFO definitions
 *         _warn_duplicates(vcf.info_ids)
 *         info_ids = tuple(sorted(set(vcf.info_ids)))             # <<<<<<<<<<<<<<
 *         info_types = vcf.info_types
 *         info_counts = vcf.info_counts
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_info_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":514
 *         _warn_duplicates(vcf.info_ids)
 *         info_ids = tuple(sorted(set(vcf.info_ids)))
 *         info_types = vcf.info_types             # <<<<<<<<<<<<<<
 *         info_counts = vcf.info_counts
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_info_types = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":515
 *         info_ids = tuple(sorted(set(vcf.info_ids)))
 *         info_types = vcf.info_types
 *         info_counts = vcf.info_counts             # <<<<<<<<<<<<<<
 * 
 *         # determine which fields to load
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_counts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_info_counts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":518
 * 
 *         # determine which fields to load
 *         fields = _variants_fields(self.fields, self.exclude_fields, info_ids)             # <<<<<<<<<<<<<<
 * 
 *         # determine whether we need to parse the INFO field at all
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_variants_fields); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exclude_fields); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_3) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_info_ids);
  PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_info_ids);
  __Pyx_GIVEREF(__pyx_v_info_ids);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_fields = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":521
 * 
 *         # determine whether we need to parse the INFO field at all
 *         parse_info = any([f not in STANDARD_VARIANT_FIELDS for f in fields])             # <<<<<<<<<<<<<<
 * 
 *         # support for working around VCFs with bad INFO headers
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_10); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_10); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_11(__pyx_t_2);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_10, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_any, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_parse_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":524
 * 
 *         # support for working around VCFs with bad INFO headers
 *         vcf_types = self.vcf_types             # <<<<<<<<<<<<<<
 *         for f in fields:
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_vcf_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vcf_types = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":525
 *         # support for working around VCFs with bad INFO headers
 *         vcf_types = self.vcf_types
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:
 *                 # fall back to unary string; can be overridden with
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_11(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":526
 *         vcf_types = self.vcf_types
 *         for f in fields:
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:             # <<<<<<<<<<<<<<
 *                 # fall back to unary string; can be overridden with
 *                 # vcf_types, dtypes and arities args
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_NE)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = (__pyx_t_5 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_6 = __pyx_t_12;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_info_ids, Py_NE)); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_t_12 != 0);
    __pyx_t_6 = __pyx_t_5;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vcfnp.pyx":529
 *                 # fall back to unary string; can be overridden with
 *                 # vcf_types, dtypes and arities args
 *                 info_types[f] = FIELD_STRING             # <<<<<<<<<<<<<<
 *                 info_counts[f] = 1
 *             if vcf_types is not None and f in vcf_types:
 */
      __pyx_t_2 = PyInt_FromLong(vcf::FIELD_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_info_types, __pyx_v_f, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp.pyx":530
 *                 # vcf_types, dtypes and arities args
 *                 info_types[f] = FIELD_STRING
 *                 info_counts[f] = 1             # <<<<<<<<<<<<<<
 *             if vcf_types is not None and f in vcf_types:
 *                 # override type declared in VCF header
 */
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_info_counts, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":531
 *                 info_types[f] = FIELD_STRING
 *                 info_counts[f] = 1
 *             if vcf_types is not None and f in vcf_types:             # <<<<<<<<<<<<<<
 *                 # override type declared in VCF header
 *                 info_types[f] = TYPESTRING2KEY[vcf_types[f]]
 */
    __pyx_t_5 = (__pyx_v_vcf_types != Py_None);
    __pyx_t_12 = (__pyx_t_5 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_6 = __pyx_t_12;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_vcf_types, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_t_12 != 0);
    __pyx_t_6 = __pyx_t_5;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vcfnp.pyx":533
 *             if vcf_types is not None and f in vcf_types:
 *                 # override type declared in VCF header
 *                 info_types[f] = TYPESTRING2KEY[vcf_types[f]]             # <<<<<<<<<<<<<<
 * 
 *          # convert to tuples for convenience
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPESTRING2KEY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyObject_GetItem(__pyx_v_vcf_types, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_10); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_info_types, __pyx_v_f, __pyx_t_4) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "vcfnp.pyx":525
 *         # support for working around VCFs with bad INFO headers
 *         vcf_types = self.vcf_types
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if f not in STANDARD_VARIANT_FIELDS and f not in info_ids:
 *                 # fall back to unary string; can be overridden with
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":536
 * 
 *          # convert to tuples for convenience
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1
 */
  __pyx_t_1 = __pyx_pf_5vcfnp_15_VariantsLoader_5build_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_info_types, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":538
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)
 *         info_counts = tuple(info_counts[f] if f in info_counts else -1             # <<<<<<<<<<<<<<
 *                             for f in fields)
 * 
 */
  __pyx_t_1 = __pyx_pf_5vcfnp_15_VariantsLoader_5build_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_info_counts);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_info_counts, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":542
 * 
 *         # determine expected number of values for each field
 *         arities = _variants_arities(fields, self.arities, info_counts)             # <<<<<<<<<<<<<<
 * 
 *         # determine fill values to use where number of values is less than
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_variants_arities); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_counts);
  PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_cur_scope->__pyx_v_info_counts);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_counts);
  __pyx_t_10 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_arities = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":546
 *         # determine fill values to use where number of values is less than
 *         # expectation
 *         fills = _variants_fills(fields, self.fills, info_types)             # <<<<<<<<<<<<<<
 * 
 *         # initialise INFO field transformers
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_variants_fills); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fills); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_2 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_10) {
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __Pyx_GIVEREF(__pyx_t_10); __pyx_t_10 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_9, __pyx_cur_scope->__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_types);
  __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_fills = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":549
 * 
 *         # initialise INFO field transformers
 *         transformers = _info_transformers(fields, self.transformers)             # <<<<<<<<<<<<<<
 * 
 *         # zip up field information for convenience
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_info_transformers); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_transformers); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_8) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_transformers = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":552
 * 
 *         # zip up field information for convenience
 *         fieldspec = list(zip(fields, arities, fills, info_types, transformers))             # <<<<<<<<<<<<<<
 * 
 *         # determine dtype to use
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_fills);
  __Pyx_GIVEREF(__pyx_v_fills);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_INCREF(__pyx_v_transformers);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_transformers);
  __Pyx_GIVEREF(__pyx_v_transformers);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fieldspec = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":555
 * 
 *         # determine dtype to use
 *         flatten_filter = self.flatten_filter             # <<<<<<<<<<<<<<
 *         dtype = _variants_dtype(fields, self.dtypes, arities, filter_ids,
 *                                 flatten_filter, info_types)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_flatten_filter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_flatten_filter = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":556
 *         # determine dtype to use
 *         flatten_filter = self.flatten_filter
 *         dtype = _variants_dtype(fields, self.dtypes, arities, filter_ids,             # <<<<<<<<<<<<<<
 *                                 flatten_filter, info_types)
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_variants_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dtypes); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "vcfnp.pyx":557
 *         flatten_filter = self.flatten_filter
 *         dtype = _variants_dtype(fields, self.dtypes, arities, filter_ids,
 *                                 flatten_filter, info_types)             # <<<<<<<<<<<<<<
 * 
 *         # set up iterator
 */
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(6+__pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_filter_ids);
  PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_9, __pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_v_filter_ids);
  __Pyx_INCREF(__pyx_v_flatten_filter);
  PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_9, __pyx_v_flatten_filter);
  __Pyx_GIVEREF(__pyx_v_flatten_filter);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_9, __pyx_cur_scope->__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_types);
  __pyx_t_10 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dtype = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":560
 * 
 *         # set up iterator
 *         region = self.region             # <<<<<<<<<<<<<<
 *         condition = self.condition
 *         if condition is not None:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_region); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_region = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":561
 *         # set up iterator
 *         region = self.region
 *         condition = self.condition             # <<<<<<<<<<<<<<
 *         if condition is not None:
 *             it = _itervariants_with_condition(vcf_fns, region, fieldspec,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_condition); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_condition = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":562
 *         region = self.region
 *         condition = self.condition
 *         if condition is not None:             # <<<<<<<<<<<<<<
 *             it = _itervariants_with_condition(vcf_fns, region, fieldspec,
 *                                               filter_ids, flatten_filter,
 */
  __pyx_t_6 = (__pyx_v_condition != Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "vcfnp.pyx":563
 *         condition = self.condition
 *         if condition is not None:
 *             it = _itervariants_with_condition(vcf_fns, region, fieldspec,             # <<<<<<<<<<<<<<
 *                                               filter_ids, flatten_filter,
 *                                               parse_info, condition)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itervariants_with_condition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "vcfnp.pyx":565
 *             it = _itervariants_with_condition(vcf_fns, region, fieldspec,
 *                                               filter_ids, flatten_filter,
 *                                               parse_info, condition)             # <<<<<<<<<<<<<<
 *         else:
 *             it = _itervariants(vcf_fns, region, fieldspec, filter_ids,
 */
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_10 = PyTuple_New(7+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    __Pyx_INCREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    __Pyx_INCREF(__pyx_v_filter_ids);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_v_filter_ids);
    __Pyx_GIVEREF(__pyx_v_filter_ids);
    __Pyx_INCREF(__pyx_v_flatten_filter);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_v_flatten_filter);
    __Pyx_GIVEREF(__pyx_v_flatten_filter);
    __Pyx_INCREF(__pyx_v_parse_info);
    PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_9, __pyx_v_parse_info);
    __Pyx_GIVEREF(__pyx_v_parse_info);
    __Pyx_INCREF(__pyx_v_condition);
    PyTuple_SET_ITEM(__pyx_t_10, 6+__pyx_t_9, __pyx_v_condition);
    __Pyx_GIVEREF(__pyx_v_condition);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_it = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "vcfnp.pyx":567
 *                                               parse_info, condition)
 *         else:
 *             it = _itervariants(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                flatten_filter, parse_info)
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itervariants); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "vcfnp.pyx":568
 *         else:
 *             it = _itervariants(vcf_fns, region, fieldspec, filter_ids,
 *                                flatten_filter, parse_info)             # <<<<<<<<<<<<<<
 * 
 *         # slice iterator
 */
    __pyx_t_10 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(6+__pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_10) {
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __Pyx_GIVEREF(__pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    __Pyx_INCREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_9, __pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    __Pyx_INCREF(__pyx_v_filter_ids);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_9, __pyx_v_filter_ids);
    __Pyx_GIVEREF(__pyx_v_filter_ids);
    __Pyx_INCREF(__pyx_v_flatten_filter);
    PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_9, __pyx_v_flatten_filter);
    __Pyx_GIVEREF(__pyx_v_flatten_filter);
    __Pyx_INCREF(__pyx_v_parse_info);
    PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_9, __pyx_v_parse_info);
    __Pyx_GIVEREF(__pyx_v_parse_info);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_it = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L14:;

  /* "vcfnp.pyx":571
 * 
 *         # slice iterator
 *         slice_args = self.slice_args             # <<<<<<<<<<<<<<
 *         if slice_args:
 *             it = islice(it, *slice_args)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_slice_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_slice_args = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":572
 *         # slice iterator
 *         slice_args = self.slice_args
 *         if slice_args:             # <<<<<<<<<<<<<<
 *             it = islice(it, *slice_args)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_slice_args); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "vcfnp.pyx":573
 *         slice_args = self.slice_args
 *         if slice_args:
 *             it = islice(it, *slice_args)             # <<<<<<<<<<<<<<
 * 
 *         # load array
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_islice); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    __pyx_t_8 = PySequence_Tuple(__pyx_v_slice_args); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = PyNumber_Add(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_it, __pyx_t_8);
    __pyx_t_8 = 0;
    goto __pyx_L15;
  }
  __pyx_L15:;

  /* "vcfnp.pyx":576
 * 
 *         # load array
 *         arr = _fromiter(it, dtype, self.count, self.progress, log)             # <<<<<<<<<<<<<<
 * 
 *         return arr
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_fromiter); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_count); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_progress); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_3 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_v_it);
  PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_v_it);
  __Pyx_GIVEREF(__pyx_v_it);
  __Pyx_INCREF(__pyx_v_dtype);
  PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, __pyx_v_dtype);
  __Pyx_GIVEREF(__pyx_v_dtype);
  PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_9, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_9, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_log);
  PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_9, __pyx_v_log);
  __Pyx_GIVEREF(__pyx_v_log);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_arr = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "vcfnp.pyx":578
 *         arr = _fromiter(it, dtype, self.count, self.progress, log)
 * 
 *         return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._VariantsLoader.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_log);
  __Pyx_XDECREF(__pyx_v_vcf_fns);
  __Pyx_XDECREF((PyObject *)__pyx_v_vcf);
  __Pyx_XDECREF(__pyx_v_filter_ids);
  __Pyx_XDECREF(__pyx_v_info_ids);
  __Pyx_XDECREF(__pyx_v_parse_info);
  __Pyx_XDECREF(__pyx_v_vcf_types);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_arities);
  __Pyx_XDECREF(__pyx_v_fills);
  __Pyx_XDECREF(__pyx_v_transformers);
  __Pyx_XDECREF(__pyx_v_fieldspec);
  __Pyx_XDECREF(__pyx_v_flatten_filter);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_condition);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_slice_args);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":581
 * 
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,             # <<<<<<<<<<<<<<
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_21variants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_20variants[] = "variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None, arities=None, fills=None, transformers=None, vcf_types=None, count=None, progress=0, logstream=None, condition=None, slice_args=None, flatten_filter=False, verbose=True, cache=True, cachedir=None, skip_cached=False)\n\n    Load an numpy structured array with data from the fixed fields of a VCF file\n    (including INFO).\n\n    Parameters\n    ----------\n\n    vcf_fn: string or list\n        Name of the VCF file or list of file names\n    region: string, optional\n        Region to extract, e.g., 'chr1' or 'chr1:0-100000'\n    fields: list or array-like, optional\n        List of fields to extract from the VCF\n    exclude_fields: list or array-like, optional\n        Fields to exclude from extraction\n    dtypes: dict or dict-like, optional\n        Dictionary cotaining dtypes to use instead of the default inferred ones\n    arities: dict or dict-like, optional\n        Dictinoary containing field:integer mappings used to override the number\n        of values to expect\n    fills: dict or dict-like, optional\n        Dictionary containing field:fillvalue mappings used to override the\n        defaults used for missing values\n    transformers: dict or dict-like, optional\n        Dictionary containing field:function mappings used to preprocess\n        any values prior to loading into array\n    vcf_types: dict or dict-like, optional\n        Dictionary containing field:string mappings used to override any\n        bogus type declarations in the VCF header (e.g., MQ0Fraction declared\n        as Integer)\n    count: int, optional\n        Attempt to extract a specific number of records\n    progress: int, optional\n        If greater than 0, log progress\n    logstream: file or file-like object, optional\n        Stream to use for logging progress\n    condition: array, optional\n        Boolean array defining which rows to load\n    slice_args: tuple or list, optional\n        Slice of ""the underlying iterator, e.g., (0, 1000, 10) takes every\n        10th row from the first 1000\n    flatten_filter: bool, optional\n        Return FILTER as multiple boolean fields, e.g., FILTER_PASS,\n        FILTER_LowQuality, etc.\n    verbose: bool, optional\n        Log more messages.\n    cache: bool, optional\n        If True, save the resulting numpy array to disk, and load from the\n        cache if present rather than rebuilding from the VCF.\n    cachedir: string, optional\n        Manually specify the directory to use to store cache files.\n    skip_cached: bool, optional\n        If True and cache file is fresh, do not load and return None.\n\n    Examples\n    --------\n\n        >>> from vcfnp import variants\n        >>> V = variants('fixture/sample.vcf')\n        >>> V\n        array([ ('19', 111, '.', 'A', 'C', 9.600000381469727, (False, False, False), 2, True, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('19', 112, '.', 'A', 'G', 10.0, (False, False, False), 2, True, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('20', 14370, 'rs6054257', 'G', 'A', 29.0, (False, False, True), 2, True, 0, '.', 0, 0.5, 0, True, 14, True, 3),\n               ('20', 17330, '.', 'T', 'A', 3.0, (True, False, False), 2, True, 0, '.', 0, 0.017000000923871994, 0, False, 11, False, 3),\n               ('20', 1110696, 'rs6040355', 'A', 'G', 67.0, (False, False, True), 3, True, 0, 'T', 0, 0.3330000042915344, 0, True, 10, False, 2),\n               ('20', 1230237, '.', 'T', '.', 47.0, (False, False, True), 2, False, 0, 'T', 0, 0.0, 0, False, 13, False, 3),\n               ('20', 1234567, 'microsat1', 'G', 'GA', 50.0, (False, False, True), 3, False, 1, 'G', 3, 0.0, 6, False, 9, False, 3),\n               ('20', 1235237, '.', 'T', '.', 0.0, (False, False, False), 2, False, 0, '.', 0, 0.0, 0, False, 0, False, 0),\n               ('X', 10, 'rsTest', 'AC', 'A', 10.0, (False, False, True), 3, False, -1, '.', 0, 0.0, 0, False, 0, False, 0)],\n              dtype""=[('CHROM', 'S12'), ('POS', '<i4'), ('ID', 'S12'), ('REF', 'S12'), ('ALT', 'S12'), ('QUAL', '<f4'), ('FILTER', [('q10', '?'), ('s50', '?'), ('PASS', '?')]), ('num_alleles', 'u1'), ('is_snp', '?'), ('svlen', '<i4'), ('AA', 'S12'), ('AC', '<u2'), ('AF', '<f4'), ('AN', '<u2'), ('DB', '?'), ('DP', '<i4'), ('H2', '?'), ('NS', '<i4')])\n        >>> V['QUAL']\n        array([  9.60000038,  10.        ,  29.        ,   3.        ,\n                67.        ,  47.        ,  50.        ,   0.        ,  10.        ], dtype=float32)\n        >>> V['FILTER']['PASS']\n        array([False, False,  True, False,  True,  True,  True, False,  True], dtype=bool)\n        >>> V['AF']\n        array([ 0.   ,  0.   ,  0.5  ,  0.017,  0.333,  0.   ,  0.   ,  0.   ,  0.   ], dtype=float32)\n\n    ";
static PyMethodDef __pyx_mdef_5vcfnp_21variants = {"variants", (PyCFunction)__pyx_pw_5vcfnp_21variants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_20variants};
static PyObject *__pyx_pw_5vcfnp_21variants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_exclude_fields = 0;
  PyObject *__pyx_v_dtypes = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_transformers = 0;
  PyObject *__pyx_v_vcf_types = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_v_progress = 0;
  PyObject *__pyx_v_logstream = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_slice_args = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_cache = 0;
  PyObject *__pyx_v_cachedir = 0;
  PyObject *__pyx_v_skip_cached = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("variants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fn,&__pyx_n_s_region,&__pyx_n_s_fields,&__pyx_n_s_exclude_fields,&__pyx_n_s_dtypes,&__pyx_n_s_arities,&__pyx_n_s_fills,&__pyx_n_s_transformers,&__pyx_n_s_vcf_types,&__pyx_n_s_count,&__pyx_n_s_progress,&__pyx_n_s_logstream,&__pyx_n_s_condition,&__pyx_n_s_slice_args,&__pyx_n_s_flatten_filter,&__pyx_n_s_verbose,&__pyx_n_s_cache,&__pyx_n_s_cachedir,&__pyx_n_s_skip_cached,0};
    PyObject* values[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":582
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,
 *              arities=None, fills=None, transformers=None, vcf_types=None,             # <<<<<<<<<<<<<<
 *              count=None, progress=0, logstream=None, condition=None,
 *              slice_args=None, flatten_filter=False, verbose=True, cache=True,
 */
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":583
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,             # <<<<<<<<<<<<<<
 *              slice_args=None, flatten_filter=False, verbose=True, cache=True,
 *              cachedir=None, skip_cached=False):
 */
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)__pyx_int_0);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":584
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 *              slice_args=None, flatten_filter=False, verbose=True, cache=True,             # <<<<<<<<<<<<<<
 *              cachedir=None, skip_cached=False):
 *     """
 */
    values[13] = ((PyObject *)Py_None);
    values[14] = ((PyObject *)Py_False);
    values[15] = ((PyObject *)Py_True);
    values[16] = ((PyObject *)Py_True);

    /* "vcfnp.pyx":585
 *              count=None, progress=0, logstream=None, condition=None,
 *              slice_args=None, flatten_filter=False, verbose=True, cache=True,
 *              cachedir=None, skip_cached=False):             # <<<<<<<<<<<<<<
 *     """
 *     Load an numpy structured array with data from the fixed fields of a VCF file
 */
    values[17] = ((PyObject *)Py_None);
    values[18] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exclude_fields);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtypes);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_transformers);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_types);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_progress);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logstream);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slice_args);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cache);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cachedir);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_cached);
          if (value) { values[18] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "variants") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vcf_fn = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fields = values[2];
    __pyx_v_exclude_fields = values[3];
    __pyx_v_dtypes = values[4];
    __pyx_v_arities = values[5];
    __pyx_v_fills = values[6];
    __pyx_v_transformers = values[7];
    __pyx_v_vcf_types = values[8];
    __pyx_v_count = values[9];
    __pyx_v_progress = values[10];
    __pyx_v_logstream = values[11];
    __pyx_v_condition = values[12];
    __pyx_v_slice_args = values[13];
    __pyx_v_flatten_filter = values[14];
    __pyx_v_verbose = values[15];
    __pyx_v_cache = values[16];
    __pyx_v_cachedir = values[17];
    __pyx_v_skip_cached = values[18];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("variants", 0, 1, 19, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.variants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_20variants(__pyx_self, __pyx_v_vcf_fn, __pyx_v_region, __pyx_v_fields, __pyx_v_exclude_fields, __pyx_v_dtypes, __pyx_v_arities, __pyx_v_fills, __pyx_v_transformers, __pyx_v_vcf_types, __pyx_v_count, __pyx_v_progress, __pyx_v_logstream, __pyx_v_condition, __pyx_v_slice_args, __pyx_v_flatten_filter, __pyx_v_verbose, __pyx_v_cache, __pyx_v_cachedir, __pyx_v_skip_cached);

  /* "vcfnp.pyx":581
 * 
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,             # <<<<<<<<<<<<<<
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_20variants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_transformers, PyObject *__pyx_v_vcf_types, PyObject *__pyx_v_count, PyObject *__pyx_v_progress, PyObject *__pyx_v_logstream, PyObject *__pyx_v_condition, PyObject *__pyx_v_slice_args, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_verbose, PyObject *__pyx_v_cache, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_skip_cached) {
  PyObject *__pyx_v_loader = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("variants", 0);

  /* "vcfnp.pyx":666
 *     """
 * 
 *     loader = _VariantsLoader(vcf_fn, region=region, fields=fields,             # <<<<<<<<<<<<<<
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_VariantsLoader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_vcf_fn);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_vcf_fn);
  __Pyx_GIVEREF(__pyx_v_vcf_fn);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_region, __pyx_v_region) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fields, __pyx_v_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":667
 * 
 *     loader = _VariantsLoader(vcf_fn, region=region, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,             # <<<<<<<<<<<<<<
 *                              arities=arities, fills=fills,
 *                              transformers=transformers, vcf_types=vcf_types,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_exclude_fields, __pyx_v_exclude_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtypes, __pyx_v_dtypes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":668
 *     loader = _VariantsLoader(vcf_fn, region=region, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills,             # <<<<<<<<<<<<<<
 *                              transformers=transformers, vcf_types=vcf_types,
 *                              count=count, progress=progress,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_arities, __pyx_v_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fills, __pyx_v_fills) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":669
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills,
 *                              transformers=transformers, vcf_types=vcf_types,             # <<<<<<<<<<<<<<
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_transformers, __pyx_v_transformers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_vcf_types, __pyx_v_vcf_types) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":670
 *                              arities=arities, fills=fills,
 *                              transformers=transformers, vcf_types=vcf_types,
 *                              count=count, progress=progress,             # <<<<<<<<<<<<<<
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_count, __pyx_v_count) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_progress, __pyx_v_progress) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":671
 *                              transformers=transformers, vcf_types=vcf_types,
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,             # <<<<<<<<<<<<<<
 *                              slice_args=slice_args,
 *                              flatten_filter=flatten_filter, verbose=verbose,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_logstream, __pyx_v_logstream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_condition, __pyx_v_condition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":672
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args,             # <<<<<<<<<<<<<<
 *                              flatten_filter=flatten_filter, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_slice_args, __pyx_v_slice_args) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":673
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args,
 *                              flatten_filter=flatten_filter, verbose=verbose,             # <<<<<<<<<<<<<<
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_flatten_filter, __pyx_v_flatten_filter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_verbose, __pyx_v_verbose) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":674
 *                              slice_args=slice_args,
 *                              flatten_filter=flatten_filter, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,             # <<<<<<<<<<<<<<
 *                              skip_cached=skip_cached)
 *     return loader.load()
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_cache, __pyx_v_cache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_cachedir, __pyx_v_cachedir) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":675
 *                              flatten_filter=flatten_filter, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)             # <<<<<<<<<<<<<<
 *     return loader.load()
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_skip_cached, __pyx_v_skip_cached) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":666
 *     """
 * 
 *     loader = _VariantsLoader(vcf_fn, region=region, fields=fields,             # <<<<<<<<<<<<<<
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_loader = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":676
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)
 *     return loader.load()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_loader, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":581
 * 
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,             # <<<<<<<<<<<<<<
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.variants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_loader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":679
 * 
 * 
 * def _fromiter(it, dtype, count, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_23_fromiter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_22_fromiter[] = "_fromiter(it, dtype, count, long progress, log)\nUtility function to load an array from an iterator.";
static PyMethodDef __pyx_mdef_5vcfnp_23_fromiter = {"_fromiter", (PyCFunction)__pyx_pw_5vcfnp_23_fromiter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_22_fromiter};
static PyObject *__pyx_pw_5vcfnp_23_fromiter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_it = 0;
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_v_count = 0;
  long __pyx_v_progress;
  PyObject *__pyx_v_log = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fromiter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_it,&__pyx_n_s_dtype,&__pyx_n_s_count,&__pyx_n_s_progress,&__pyx_n_s_log,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_it)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_fromiter", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_fromiter", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_progress)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_fromiter", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_log)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_fromiter", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_fromiter") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_it = values[0];
    __pyx_v_dtype = values[1];
    __pyx_v_count = values[2];
    __pyx_v_progress = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_progress == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_log = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_fromiter", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._fromiter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_22_fromiter(__pyx_self, __pyx_v_it, __pyx_v_dtype, __pyx_v_count, __pyx_v_progress, __pyx_v_log);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_22_fromiter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_it, PyObject *__pyx_v_dtype, PyObject *__pyx_v_count, long __pyx_v_progress, PyObject *__pyx_v_log) {
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fromiter", 0);
  __Pyx_INCREF(__pyx_v_it);

  /* "vcfnp.pyx":681
 * def _fromiter(it, dtype, count, long progress, log):
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:             # <<<<<<<<<<<<<<
 *         it = _iter_withprogress(it, progress, log)
 *     if count is not None:
 */
  __pyx_t_1 = ((__pyx_v_progress > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":682
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:
 *         it = _iter_withprogress(it, progress, log)             # <<<<<<<<<<<<<<
 *     if count is not None:
 *         a = np.fromiter(it, dtype=dtype, count=count)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_iter_withprogress); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_progress); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_log);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_log);
    __Pyx_GIVEREF(__pyx_v_log);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_it, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":683
 *     if progress > 0:
 *         it = _iter_withprogress(it, progress, log)
 *     if count is not None:             # <<<<<<<<<<<<<<
 *         a = np.fromiter(it, dtype=dtype, count=count)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_count != Py_None);
  __pyx_t_8 = (__pyx_t_1 != 0);
  if (__pyx_t_8) {

    /* "vcfnp.pyx":684
 *         it = _iter_withprogress(it, progress, log)
 *     if count is not None:
 *         a = np.fromiter(it, dtype=dtype, count=count)             # <<<<<<<<<<<<<<
 *     else:
 *         a = np.fromiter(it, dtype=dtype)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fromiter_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_v_dtype) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_count, __pyx_v_count) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_a = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "vcfnp.pyx":686
 *         a = np.fromiter(it, dtype=dtype, count=count)
 *     else:
 *         a = np.fromiter(it, dtype=dtype)             # <<<<<<<<<<<<<<
 *     return a
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_fromiter_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_v_dtype) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_a = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "vcfnp.pyx":687
 *     else:
 *         a = np.fromiter(it, dtype=dtype)
 *     return a             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_a);
  __pyx_r = __pyx_v_a;
  goto __pyx_L0;

  /* "vcfnp.pyx":679
 * 
 * 
 * def _fromiter(it, dtype, count, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp._fromiter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_26generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":690
 * 
 * 
 * def _iter_withprogress(iterable, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator, reporting progress
 *     as we go."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_25_iter_withprogress(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_24_iter_withprogress[] = "_iter_withprogress(iterable, long progress, log)\nUtility function to load an array from an iterator, reporting progress\n    as we go.";
static PyMethodDef __pyx_mdef_5vcfnp_25_iter_withprogress = {"_iter_withprogress", (PyCFunction)__pyx_pw_5vcfnp_25_iter_withprogress, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_24_iter_withprogress};
static PyObject *__pyx_pw_5vcfnp_25_iter_withprogress(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iterable = 0;
  long __pyx_v_progress;
  PyObject *__pyx_v_log = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_withprogress (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iterable,&__pyx_n_s_progress,&__pyx_n_s_log,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iterable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_progress)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_iter_withprogress", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_log)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_iter_withprogress", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_iter_withprogress") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_iterable = values[0];
    __pyx_v_progress = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_progress == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_log = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_iter_withprogress", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._iter_withprogress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_24_iter_withprogress(__pyx_self, __pyx_v_iterable, __pyx_v_progress, __pyx_v_log);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_24_iter_withprogress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterable, long __pyx_v_progress, PyObject *__pyx_v_log) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_iter_withprogress", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)__pyx_tp_new_5vcfnp___pyx_scope_struct_9__iter_withprogress(__pyx_ptype_5vcfnp___pyx_scope_struct_9__iter_withprogress, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_iterable = __pyx_v_iterable;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterable);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterable);
  __pyx_cur_scope->__pyx_v_progress = __pyx_v_progress;
  __pyx_cur_scope->__pyx_v_log = __pyx_v_log;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_log);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_log);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_26generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_withprogress, __pyx_n_s_iter_withprogress); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._iter_withprogress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_26generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":694
 *     as we go."""
 *     cdef long i, n
 *     before_all = time.time()             # <<<<<<<<<<<<<<
 *     before = before_all
 *     for i, o in enumerate(iterable):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_before_all = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":695
 *     cdef long i, n
 *     before_all = time.time()
 *     before = before_all             # <<<<<<<<<<<<<<
 *     for i, o in enumerate(iterable):
 *         yield o
 */
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_before_all);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_before_all);
  __pyx_cur_scope->__pyx_v_before = __pyx_cur_scope->__pyx_v_before_all;

  /* "vcfnp.pyx":696
 *     before_all = time.time()
 *     before = before_all
 *     for i, o in enumerate(iterable):             # <<<<<<<<<<<<<<
 *         yield o
 *         n = i+1
 */
  __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_iterable; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_iterable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;
    __pyx_t_4 = (__pyx_t_4 + 1);

    /* "vcfnp.pyx":697
 *     before = before_all
 *     for i, o in enumerate(iterable):
 *         yield o             # <<<<<<<<<<<<<<
 *         n = i+1
 *         if n % progress == 0:
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_o);
    __pyx_r = __pyx_cur_scope->__pyx_v_o;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":698
 *     for i, o in enumerate(iterable):
 *         yield o
 *         n = i+1             # <<<<<<<<<<<<<<
 *         if n % progress == 0:
 *             after = time.time()
 */
    __pyx_cur_scope->__pyx_v_n = (__pyx_cur_scope->__pyx_v_i + 1);

    /* "vcfnp.pyx":699
 *         yield o
 *         n = i+1
 *         if n % progress == 0:             # <<<<<<<<<<<<<<
 *             after = time.time()
 *             log('%s rows in %.2fs; batch in %.2fs (%d rows/s)'
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_progress == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = ((__Pyx_mod_long(__pyx_cur_scope->__pyx_v_n, __pyx_cur_scope->__pyx_v_progress) == 0) != 0);
    if (__pyx_t_7) {

      /* "vcfnp.pyx":700
 *         n = i+1
 *         if n % progress == 0:
 *             after = time.time()             # <<<<<<<<<<<<<<
 *             log('%s rows in %.2fs; batch in %.2fs (%d rows/s)'
 *                 % (n, after-before_all, after-before, progress/(after-before)))
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_after);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_after, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":702
 *             after = time.time()
 *             log('%s rows in %.2fs; batch in %.2fs (%d rows/s)'
 *                 % (n, after-before_all, after-before, progress/(after-before)))             # <<<<<<<<<<<<<<
 *             before = after
 *     after_all = time.time()
 */
      __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_after, __pyx_cur_scope->__pyx_v_before_all); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_after, __pyx_cur_scope->__pyx_v_before); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_progress); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_after, __pyx_cur_scope->__pyx_v_before); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_12);
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      __pyx_t_9 = 0;
      __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_s_rows_in_2fs_batch_in_2fs_d_ro, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_log);
      __pyx_t_11 = __pyx_cur_scope->__pyx_v_log; __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vcfnp.pyx":703
 *             log('%s rows in %.2fs; batch in %.2fs (%d rows/s)'
 *                 % (n, after-before_all, after-before, progress/(after-before)))
 *             before = after             # <<<<<<<<<<<<<<
 *     after_all = time.time()
 *     log('%s rows in %.2fs (%d rows/s)'
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_after);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_before);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_before, __pyx_cur_scope->__pyx_v_after);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_after);
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "vcfnp.pyx":696
 *     before_all = time.time()
 *     before = before_all
 *     for i, o in enumerate(iterable):             # <<<<<<<<<<<<<<
 *         yield o
 *         n = i+1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":704
 *                 % (n, after-before_all, after-before, progress/(after-before)))
 *             before = after
 *     after_all = time.time()             # <<<<<<<<<<<<<<
 *     log('%s rows in %.2fs (%d rows/s)'
 *         % (n, after_all-before_all, n/(after_all-before_all)))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_after_all = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":706
 *     after_all = time.time()
 *     log('%s rows in %.2fs (%d rows/s)'
 *         % (n, after_all-before_all, n/(after_all-before_all)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_after_all, __pyx_cur_scope->__pyx_v_before_all); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_after_all, __pyx_cur_scope->__pyx_v_before_all); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_12); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_11 = 0;
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_s_rows_in_2fs_d_rows_s, __pyx_t_12); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_log);
  __pyx_t_12 = __pyx_cur_scope->__pyx_v_log; __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":690
 * 
 * 
 * def _iter_withprogress(iterable, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator, reporting progress
 *     as we go."""
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_iter_withprogress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_29generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":709
 * 
 * 
 * def _itervariants(vcf_fns, region, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                   bint flatten_filter, bint parse_info):
 *     """Iterate over variants from a VCF file, and generate a tuple for each
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_28_itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_27_itervariants[] = "_itervariants(vcf_fns, region, list fieldspec, tuple filter_ids, bool flatten_filter, bool parse_info)\nIterate over variants from a VCF file, and generate a tuple for each\n    variant suitable for loading into a numpy array.";
static PyMethodDef __pyx_mdef_5vcfnp_28_itervariants = {"_itervariants", (PyCFunction)__pyx_pw_5vcfnp_28_itervariants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_27_itervariants};
static PyObject *__pyx_pw_5vcfnp_28_itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_filter_ids = 0;
  int __pyx_v_flatten_filter;
  int __pyx_v_parse_info;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fieldspec,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_parse_info,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itervariants") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fieldspec = ((PyObject*)values[2]);
    __pyx_v_filter_ids = ((PyObject*)values[3]);
    __pyx_v_flatten_filter = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_flatten_filter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_parse_info = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_parse_info == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fieldspec), (&PyList_Type), 1, "fieldspec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filter_ids), (&PyTuple_Type), 1, "filter_ids", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5vcfnp_27_itervariants(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fieldspec, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_parse_info);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_27_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter, int __pyx_v_parse_info) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_itervariants", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)__pyx_tp_new_5vcfnp___pyx_scope_struct_10__itervariants(__pyx_ptype_5vcfnp___pyx_scope_struct_10__itervariants, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_29generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariants, __pyx_n_s_itervariants); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_29generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":719
 * 
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":720
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         # set whether INFO field needs to be parsed
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp.pyx":721
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         # set whether INFO field needs to be parsed
 *         variant_file.parseInfo = parse_info
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);

    /* "vcfnp.pyx":723
 *         variant_file.open(vcf_fn)
 *         # set whether INFO field needs to be parsed
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_cur_scope->__pyx_v_parse_info;

    /* "vcfnp.pyx":725
 *         variant_file.parseInfo = parse_info
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             # set genome region to extract variants from
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp.pyx":726
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "vcfnp.pyx":728
 *         if region is not None:
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_cur_scope->__pyx_v_region_set = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);

      /* "vcfnp.pyx":729
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_8 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_8) {

        /* "vcfnp.pyx":730
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":731
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         # iterate over variants
 */
    __pyx_cur_scope->__pyx_v_variant = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));

    /* "vcfnp.pyx":734
 * 
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 * 
 */
    while (1) {
      __pyx_t_8 = (__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0);
      if (!__pyx_t_8) break;

      /* "vcfnp.pyx":735
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)             # <<<<<<<<<<<<<<
 * 
 *         # clean up
 */
      __pyx_t_4 = __pyx_f_5vcfnp__mkvrow(__pyx_cur_scope->__pyx_v_variant, __pyx_cur_scope->__pyx_v_fieldspec, __pyx_cur_scope->__pyx_v_filter_ids, __pyx_cur_scope->__pyx_v_flatten_filter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "vcfnp.pyx":738
 * 
 *         # clean up
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp.pyx":739
 *         # clean up
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp.pyx":719
 * 
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":709
 * 
 * 
 * def _itervariants(vcf_fns, region, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                   bint flatten_filter, bint parse_info):
 *     """Iterate over variants from a VCF file, and generate a tuple for each
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_32generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":742
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, list fieldspec,             # <<<<<<<<<<<<<<
 *                                  tuple filter_ids, bint flatten_filter,
 *                                  parse_info, condition):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_31_itervariants_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_30_itervariants_with_condition[] = "_itervariants_with_condition(vcf_fns, region, list fieldspec, tuple filter_ids, bool flatten_filter, parse_info, condition)\nUtility function to iterate over variants and generate a tuple for each\n    variant suitable for loading into a numpy array, yielding only those\n    variants for which the corresponding item in condition is True.";
static PyMethodDef __pyx_mdef_5vcfnp_31_itervariants_with_condition = {"_itervariants_with_condition", (PyCFunction)__pyx_pw_5vcfnp_31_itervariants_with_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_30_itervariants_with_condition};
static PyObject *__pyx_pw_5vcfnp_31_itervariants_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_filter_ids = 0;
  int __pyx_v_flatten_filter;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_condition = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants_with_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fieldspec,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_parse_info,&__pyx_n_s_condition,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itervariants_with_condition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fieldspec = ((PyObject*)values[2]);
    __pyx_v_filter_ids = ((PyObject*)values[3]);
    __pyx_v_flatten_filter = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_flatten_filter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_parse_info = values[5];
    __pyx_v_condition = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fieldspec), (&PyList_Type), 1, "fieldspec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filter_ids), (&PyTuple_Type), 1, "filter_ids", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5vcfnp_30_itervariants_with_condition(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fieldspec, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_parse_info, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_30_itervariants_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_itervariants_with_condition", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)__pyx_tp_new_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(__pyx_ptype_5vcfnp___pyx_scope_struct_11__itervariants_with_condition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_parse_info);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_parse_info);
  __pyx_cur_scope->__pyx_v_condition = __pyx_v_condition;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_condition);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_condition);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_32generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariants_with_condition, __pyx_n_s_itervariants_with_condition); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_32generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L13_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":752
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 *     cdef long i = 0             # <<<<<<<<<<<<<<
 *     cdef long n = len(condition)
 * 
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "vcfnp.pyx":753
 *     cdef Variant *variant
 *     cdef long i = 0
 *     cdef long n = len(condition)             # <<<<<<<<<<<<<<
 * 
 *     for vcf_fn in vcf_fns:
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_condition); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_v_n = __pyx_t_1;

  /* "vcfnp.pyx":755
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":756
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp.pyx":757
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);

    /* "vcfnp.pyx":758
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         if region is not None:
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_parse_info); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_t_7;

    /* "vcfnp.pyx":759
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp.pyx":760
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "vcfnp.pyx":761
 *         variant_file.parseSamples = False
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_cur_scope->__pyx_v_region_set = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);

      /* "vcfnp.pyx":762
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_9 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_9) {

        /* "vcfnp.pyx":763
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":764
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 */
    __pyx_cur_scope->__pyx_v_variant = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));

    /* "vcfnp.pyx":766
 *         variant = new Variant(deref(variant_file))
 * 
 *         while i < n and _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 */
    while (1) {
      __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_i < __pyx_cur_scope->__pyx_v_n) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_9 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0);
      __pyx_t_9 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (!__pyx_t_9) break;

      /* "vcfnp.pyx":767
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 *             i += 1
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_condition, __pyx_cur_scope->__pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_9) {

        /* "vcfnp.pyx":768
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
        __pyx_t_4 = __pyx_f_5vcfnp__mkvrow(__pyx_cur_scope->__pyx_v_variant, __pyx_cur_scope->__pyx_v_fieldspec, __pyx_cur_scope->__pyx_v_filter_ids, __pyx_cur_scope->__pyx_v_flatten_filter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L13_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;

      /* "vcfnp.pyx":769
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);
    }

    /* "vcfnp.pyx":771
 *             i += 1
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp.pyx":772
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp.pyx":755
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":742
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, list fieldspec,             # <<<<<<<<<<<<<<
 *                                  tuple filter_ids, bint flatten_filter,
 *                                  parse_info, condition):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":775
 * 
 * 
 * cdef inline bool _get_next_variant(VariantCallFile *variant_file,             # <<<<<<<<<<<<<<
 *                                    Variant *variant):
 *     # break this out into a separate function so we can profile it
 */

static CYTHON_INLINE bool __pyx_f_5vcfnp__get_next_variant(vcf::VariantCallFile *__pyx_v_variant_file, vcf::Variant *__pyx_v_variant) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_next_variant", 0);

  /* "vcfnp.pyx":778
 *                                    Variant *variant):
 *     # break this out into a separate function so we can profile it
 *     return variant_file.getNextVariant(deref(variant))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_variant_file->getNextVariant((*__pyx_v_variant));
  goto __pyx_L0;

  /* "vcfnp.pyx":775
 * 
 * 
 * cdef inline bool _get_next_variant(VariantCallFile *variant_file,             # <<<<<<<<<<<<<<
 *                                    Variant *variant):
 *     # break this out into a separate function so we can profile it
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":781
 * 
 * 
 * cdef inline object _mkvrow(Variant *variant, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                            bint flatten_filter):
 *     """Make a row of variant data."""
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_fill = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_transformer = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkvrow", 0);

  /* "vcfnp.pyx":784
 *                            bint flatten_filter):
 *     """Make a row of variant data."""
 *     out = list()             # <<<<<<<<<<<<<<
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":785
 *     """Make a row of variant data."""
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:             # <<<<<<<<<<<<<<
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 */
  if (unlikely(__pyx_v_fieldspec == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_fieldspec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fill, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_transformer, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":786
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,             # <<<<<<<<<<<<<<
 *                       filter_ids)
 *         if f == 'FILTER' and flatten_filter:
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__string(__pyx_v_f); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_vcf_type); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":787
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)             # <<<<<<<<<<<<<<
 *         if f == 'FILTER' and flatten_filter:
 *             out.extend(val)
 */
    __pyx_t_3 = __pyx_f_5vcfnp__mkvval(__pyx_v_variant, __pyx_t_11, __pyx_t_12, __pyx_v_fill, __pyx_t_13, __pyx_v_transformer, __pyx_v_filter_ids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vcfnp.pyx":788
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 *         if f == 'FILTER' and flatten_filter:             # <<<<<<<<<<<<<<
 *             out.extend(val)
 *         else:
 */
    __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_15) {
    } else {
      __pyx_t_14 = __pyx_t_15;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_15 = (__pyx_v_flatten_filter != 0);
    __pyx_t_14 = __pyx_t_15;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_14) {

      /* "vcfnp.pyx":789
 *                       filter_ids)
 *         if f == 'FILTER' and flatten_filter:
 *             out.extend(val)             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(val)
 */
      __pyx_t_16 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    /*else*/ {

      /* "vcfnp.pyx":791
 *             out.extend(val)
 *         else:
 *             out.append(val)             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;

    /* "vcfnp.pyx":785
 *     """Make a row of variant data."""
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:             # <<<<<<<<<<<<<<
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":792
 *         else:
 *             out.append(val)
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":781
 * 
 * 
 * cdef inline object _mkvrow(Variant *variant, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                            bint flatten_filter):
 *     """Make a row of variant data."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._mkvrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_fill);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_transformer);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":795
 * 
 * 
 * cdef inline object _mkvval(Variant *variant, string field, int arity,             # <<<<<<<<<<<<<<
 *                            object fill, int vcf_type, transformer,
 *                            tuple filter_ids):
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvval(vcf::Variant *__pyx_v_variant, std::string __pyx_v_field, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_vcf_type, PyObject *__pyx_v_transformer, PyObject *__pyx_v_filter_ids) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkvval", 0);

  /* "vcfnp.pyx":798
 *                            object fill, int vcf_type, transformer,
 *                            tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_CHROM) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":799
 *                            tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:
 *         out = variant.sequenceName             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->sequenceName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":800
 *     if field == FIELD_NAME_CHROM:
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_POS) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":801
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_variant->position); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":802
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_ID) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":803
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":804
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_REF) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":805
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->ref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":806
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_ALT) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":807
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkaltval(__pyx_v_variant, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":808
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_QUAL) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":809
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_variant->quality); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":810
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_FILTER) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":811
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkfilterval(__pyx_v_variant, __pyx_v_filter_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":812
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_NUM_ALLELES) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":813
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)(__pyx_v_variant->alt.size() + 1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":814
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_IS_SNP) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":815
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp__is_snp(__pyx_v_variant); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":816
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:             # <<<<<<<<<<<<<<
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_SVLEN) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":817
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)             # <<<<<<<<<<<<<<
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])
 */
    __pyx_t_2 = __pyx_f_5vcfnp__svlen(__pyx_v_variant, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":818
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:             # <<<<<<<<<<<<<<
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:
 */
  __pyx_t_1 = (__pyx_v_transformer != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "vcfnp.pyx":819
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])             # <<<<<<<<<<<<<<
 *     elif vcf_type == FIELD_BOOL:
 *         # ignore arity, this is a flag
 */
    __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_transformer);
    __pyx_t_5 = __pyx_v_transformer; __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":820
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *         # ignore arity, this is a flag
 *         out = (variant.infoFlags.count(field) > 0)
 */
  __pyx_t_3 = ((__pyx_v_vcf_type == vcf::FIELD_BOOL) != 0);
  if (__pyx_t_3) {

    /* "vcfnp.pyx":822
 *     elif vcf_type == FIELD_BOOL:
 *         # ignore arity, this is a flag
 *         out = (variant.infoFlags.count(field) > 0)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_variant->infoFlags.count(__pyx_v_field) > 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":824
 *         out = (variant.infoFlags.count(field) > 0)
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkval((__pyx_v_variant->info[__pyx_v_field]), __pyx_v_arity, __pyx_v_fill, __pyx_v_vcf_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":825
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":795
 * 
 * 
 * cdef inline object _mkvval(Variant *variant, string field, int arity,             # <<<<<<<<<<<<<<
 *                            object fill, int vcf_type, transformer,
 *                            tuple filter_ids):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp._mkvval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":828
 * 
 * 
 * cdef inline object _mkaltval(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkaltval(vcf::Variant *__pyx_v_variant, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkaltval", 0);

  /* "vcfnp.pyx":829
 * 
 * cdef inline object _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if variant.alt.size() == 0:
 *             out = fill
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":830
 * cdef inline object _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:
 *         if variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *             out = fill
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_variant->alt.size() == 0) != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":831
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 *             out = fill             # <<<<<<<<<<<<<<
 *         else:
 *             out = variant.alt.at(0)
 */
      __Pyx_INCREF(__pyx_v_fill);
      __pyx_v_out = __pyx_v_fill;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "vcfnp.pyx":833
 *             out = fill
 *         else:
 *             out = variant.alt.at(0)             # <<<<<<<<<<<<<<
 *     elif variant.alt.size() == arity:
 *         out = variant.alt
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->alt.at(0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_out = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":834
 *         else:
 *             out = variant.alt.at(0)
 *     elif variant.alt.size() == arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out)
 */
  __pyx_t_1 = ((__pyx_v_variant->alt.size() == __pyx_v_arity) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":835
 *             out = variant.alt.at(0)
 *     elif variant.alt.size() == arity:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":836
 *     elif variant.alt.size() == arity:
 *         out = variant.alt
 *         out = tuple(out)             # <<<<<<<<<<<<<<
 *     elif variant.alt.size() > arity:
 *         out = variant.alt
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_out);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_out);
    __Pyx_GIVEREF(__pyx_v_out);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }

  /* "vcfnp.pyx":837
 *         out = variant.alt
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out[:arity])
 */
  __pyx_t_1 = ((__pyx_v_variant->alt.size() > __pyx_v_arity) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":838
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out = tuple(out[:arity])
 *     else:
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp.pyx":839
 *     elif variant.alt.size() > arity:
 *         out = variant.alt
 *         out = tuple(out[:arity])             # <<<<<<<<<<<<<<
 *     else:
 *         out = variant.alt
 */
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_out, 0, __pyx_v_arity, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":841
 *         out = tuple(out[:arity])
 *     else:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp.pyx":842
 *     else:
 *         out = variant.alt
 *         out += [fill] * (arity-variant.alt.size())             # <<<<<<<<<<<<<<
 *         out = tuple(out)
 *     return out
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_arity - __pyx_v_variant->alt.size()))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < (__pyx_v_arity - __pyx_v_variant->alt.size()); __pyx_temp++) {
        __Pyx_INCREF(__pyx_v_fill);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_v_fill);
        __Pyx_GIVEREF(__pyx_v_fill);
      }
    }
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_out, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":843
 *         out = variant.alt
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_out);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_out);
    __Pyx_GIVEREF(__pyx_v_out);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":844
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":828
 * 
 * 
 * cdef inline object _mkaltval(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp._mkaltval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":847
 * 
 * 
 * cdef inline object _mkfilterval(Variant *variant, tuple filter_ids):             # <<<<<<<<<<<<<<
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkfilterval(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_filter_ids) {
  PyObject *__pyx_v_filters = NULL;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkfilterval", 0);

  /* "vcfnp.pyx":848
 * 
 * cdef inline object _mkfilterval(Variant *variant, tuple filter_ids):
 *     filters = <list>split(variant.filter, SEMICOLON)             # <<<<<<<<<<<<<<
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(split(__pyx_v_variant->filter, __pyx_v_5vcfnp_SEMICOLON)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_filters = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":849
 * cdef inline object _mkfilterval(Variant *variant, tuple filter_ids):
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]             # <<<<<<<<<<<<<<
 *     out = tuple(out)
 *     return out
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_filter_ids == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_filter_ids; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_filters, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":850
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_out);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_out);
  __Pyx_GIVEREF(__pyx_v_out);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":851
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":847
 * 
 * 
 * cdef inline object _mkfilterval(Variant *variant, tuple filter_ids):             # <<<<<<<<<<<<<<
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp._mkfilterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filters);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":854
 * 
 * 
 * cdef inline object _is_snp(Variant *variant):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef bytes alt
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__is_snp(vcf::Variant *__pyx_v_variant) {
  int __pyx_v_i;
  PyObject *__pyx_v_alt = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_snp", 0);

  /* "vcfnp.pyx":857
 *     cdef int i
 *     cdef bytes alt
 *     if variant.ref.size() > 1:             # <<<<<<<<<<<<<<
 *         return False
 *     for i in range(variant.alt.size()):
 */
  __pyx_t_1 = ((__pyx_v_variant->ref.size() > 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":858
 *     cdef bytes alt
 *     if variant.ref.size() > 1:
 *         return False             # <<<<<<<<<<<<<<
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":859
 *     if variant.ref.size() > 1:
 *         return False
 *     for i in range(variant.alt.size()):             # <<<<<<<<<<<<<<
 *         alt = variant.alt.at(i)
 *         if alt not in {'A', 'C', 'G', 'T'}:
 */
  __pyx_t_2 = __pyx_v_variant->alt.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":860
 *         return False
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)             # <<<<<<<<<<<<<<
 *         if alt not in {'A', 'C', 'G', 'T'}:
 *             return False
 */
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->alt.at(__pyx_v_i)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_alt, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":861
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)
 *         if alt not in {'A', 'C', 'G', 'T'}:             # <<<<<<<<<<<<<<
 *             return False
 *     return True
 */
    __Pyx_INCREF(__pyx_v_alt);
    __pyx_t_5 = __pyx_v_alt;
    __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_t_5, __pyx_n_s_A, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_t_5, __pyx_n_s_C, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_t_5, __pyx_n_s_G, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_t_5, __pyx_n_s_T, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_1 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "vcfnp.pyx":862
 *         alt = variant.alt.at(i)
 *         if alt not in {'A', 'C', 'G', 'T'}:
 *             return False             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;
    }
  }

  /* "vcfnp.pyx":863
 *         if alt not in {'A', 'C', 'G', 'T'}:
 *             return False
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "vcfnp.pyx":854
 * 
 * 
 * cdef inline object _is_snp(Variant *variant):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef bytes alt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vcfnp._is_snp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_alt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":866
 * 
 * 
 * cdef inline object _svlen(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen(vcf::Variant *__pyx_v_variant, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_svlen", 0);

  /* "vcfnp.pyx":867
 * 
 * cdef inline object _svlen(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         return _svlen_single(variant.ref, variant.alt, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":868
 * cdef inline object _svlen(Variant *variant, int arity, object fill):
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         return _svlen_multi(variant.ref, variant.alt, arity, fill)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp__svlen_single(__pyx_v_variant->ref, __pyx_v_variant->alt, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":870
 *         return _svlen_single(variant.ref, variant.alt, fill)
 *     else:
 *         return _svlen_multi(variant.ref, variant.alt, arity, fill)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp__svlen_multi(__pyx_v_variant->ref, __pyx_v_variant->alt, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":866
 * 
 * 
 * cdef inline object _svlen(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._svlen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":873
 * 
 * 
 * cdef inline object _svlen_single(string ref, vector[string]& alt, object fill):             # <<<<<<<<<<<<<<
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen_single(std::string __pyx_v_ref, std::vector<std::string>  &__pyx_v_alt, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_svlen_single", 0);

  /* "vcfnp.pyx":874
 * 
 * cdef inline object _svlen_single(string ref, vector[string]& alt, object fill):
 *     if alt.size() > 0:             # <<<<<<<<<<<<<<
 *         return <int>(alt.at(0).size() - ref.size())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_alt.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":875
 * cdef inline object _svlen_single(string ref, vector[string]& alt, object fill):
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)(__pyx_v_alt.at(0).size() - __pyx_v_ref.size()))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":876
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp.pyx":873
 * 
 * 
 * cdef inline object _svlen_single(string ref, vector[string]& alt, object fill):             # <<<<<<<<<<<<<<
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._svlen_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":879
 * 
 * 
 * cdef inline object _svlen_multi(string ref, vector[string]& alt, int arity,             # <<<<<<<<<<<<<<
 *                                 object fill):
 *     cdef int i
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__svlen_multi(std::string __pyx_v_ref, std::vector<std::string>  &__pyx_v_alt, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_svlen_multi", 0);

  /* "vcfnp.pyx":882
 *                                 object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < alt.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":883
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < alt.size():
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":884
 *     out = list()
 *     for i in range(arity):
 *         if i < alt.size():             # <<<<<<<<<<<<<<
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_alt.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp.pyx":885
 *     for i in range(arity):
 *         if i < alt.size():
 *             out.append(<int>(alt.at(i).size() - ref.size()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(((int)(__pyx_v_alt.at(__pyx_v_i).size() - __pyx_v_ref.size()))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "vcfnp.pyx":887
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "vcfnp.pyx":888
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":879
 * 
 * 
 * cdef inline object _svlen_multi(string ref, vector[string]& alt, int arity,             # <<<<<<<<<<<<<<
 *                                 object fill):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._svlen_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":891
 * 
 * 
 * def _warn_duplicates(fields):             # <<<<<<<<<<<<<<
 *     visited = set()
 *     for f in fields:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_34_warn_duplicates(PyObject *__pyx_self, PyObject *__pyx_v_fields); /*proto*/
static char __pyx_doc_5vcfnp_33_warn_duplicates[] = "_warn_duplicates(fields)";
static PyMethodDef __pyx_mdef_5vcfnp_34_warn_duplicates = {"_warn_duplicates", (PyCFunction)__pyx_pw_5vcfnp_34_warn_duplicates, METH_O, __pyx_doc_5vcfnp_33_warn_duplicates};
static PyObject *__pyx_pw_5vcfnp_34_warn_duplicates(PyObject *__pyx_self, PyObject *__pyx_v_fields) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_warn_duplicates (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_33_warn_duplicates(__pyx_self, ((PyObject *)__pyx_v_fields));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_33_warn_duplicates(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields) {
  PyObject *__pyx_v_visited = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_warn_duplicates", 0);

  /* "vcfnp.pyx":892
 * 
 * def _warn_duplicates(fields):
 *     visited = set()             # <<<<<<<<<<<<<<
 *     for f in fields:
 *         if f in visited:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_visited = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":893
 * def _warn_duplicates(fields):
 *     visited = set()
 *     for f in fields:             # <<<<<<<<<<<<<<
 *         if f in visited:
 *             print('WARNING: duplicate definition in header: %s' % f,
 */
  if (likely(PyList_CheckExact(__pyx_v_fields)) || PyTuple_CheckExact(__pyx_v_fields)) {
    __pyx_t_1 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":894
 *     visited = set()
 *     for f in fields:
 *         if f in visited:             # <<<<<<<<<<<<<<
 *             print('WARNING: duplicate definition in header: %s' % f,
 *                   file=sys.stderr)
 */
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_visited, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "vcfnp.pyx":895
 *     for f in fields:
 *         if f in visited:
 *             print('WARNING: duplicate definition in header: %s' % f,             # <<<<<<<<<<<<<<
 *                   file=sys.stderr)
 *         visited.add(f)
 */
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_duplicate_definition_in, __pyx_v_f); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);

      /* "vcfnp.pyx":896
 *         if f in visited:
 *             print('WARNING: duplicate definition in header: %s' % f,
 *                   file=sys.stderr)             # <<<<<<<<<<<<<<
 *         visited.add(f)
 * 
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_stderr); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_file, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "vcfnp.pyx":895
 *     for f in fields:
 *         if f in visited:
 *             print('WARNING: duplicate definition in header: %s' % f,             # <<<<<<<<<<<<<<
 *                   file=sys.stderr)
 *         visited.add(f)
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "vcfnp.pyx":897
 *             print('WARNING: duplicate definition in header: %s' % f,
 *                   file=sys.stderr)
 *         visited.add(f)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_10 = PySet_Add(__pyx_v_visited, __pyx_v_f); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":893
 * def _warn_duplicates(fields):
 *     visited = set()
 *     for f in fields:             # <<<<<<<<<<<<<<
 *         if f in visited:
 *             print('WARNING: duplicate definition in header: %s' % f,
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":891
 * 
 * 
 * def _warn_duplicates(fields):             # <<<<<<<<<<<<<<
 *     visited = set()
 *     for f in fields:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._warn_duplicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_visited);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":900
 * 
 * 
 * cdef inline object _mkval(vector[string]& string_vals, int arity, object fill,             # <<<<<<<<<<<<<<
 *                           int vcf_type):
 *     if vcf_type == FIELD_FLOAT:
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_vcf_type) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval", 0);

  /* "vcfnp.pyx":904
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:             # <<<<<<<<<<<<<<
 *         out = _mkval_long(string_vals, arity, fill)
 *     else:
 */
  switch (__pyx_v_vcf_type) {

    /* "vcfnp.pyx":902
 * cdef inline object _mkval(vector[string]& string_vals, int arity, object fill,
 *                           int vcf_type):
 *     if vcf_type == FIELD_FLOAT:             # <<<<<<<<<<<<<<
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:
 */
    case vcf::FIELD_FLOAT:

    /* "vcfnp.pyx":903
 *                           int vcf_type):
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     elif vcf_type == FIELD_INTEGER:
 *         out = _mkval_long(string_vals, arity, fill)
 */
    __pyx_t_1 = __pyx_f_5vcfnp__mkval_double(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;
    break;

    /* "vcfnp.pyx":904
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:             # <<<<<<<<<<<<<<
 *         out = _mkval_long(string_vals, arity, fill)
 *     else:
 */
    case vcf::FIELD_INTEGER:

    /* "vcfnp.pyx":905
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:
 *         out = _mkval_long(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         # make strings by default
 */
    __pyx_t_1 = __pyx_f_5vcfnp__mkval_long(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;
    break;
    default:

    /* "vcfnp.pyx":908
 *     else:
 *         # make strings by default
 *         out = _mkval_string(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_1 = __pyx_f_5vcfnp__mkval_string(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;
    break;
  }

  /* "vcfnp.pyx":909
 *         # make strings by default
 *         out = _mkval_string(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":900
 * 
 * 
 * cdef inline object _mkval(vector[string]& string_vals, int arity, object fill,             # <<<<<<<<<<<<<<
 *                           int vcf_type):
 *     if vcf_type == FIELD_FLOAT:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._mkval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":912
 * 
 * 
 * cdef inline object _mkval_string(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                  object fill):
 *     if arity == 1:
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_string(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_string", 0);

  /* "vcfnp.pyx":914
 * cdef inline object _mkval_string(vector[string]& string_vals, int arity,
 *                                  object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if string_vals.size() > 0:
 *             return string_vals.at(0)
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":915
 *                                  object fill):
 *     if arity == 1:
 *         if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *             return string_vals.at(0)
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":916
 *     if arity == 1:
 *         if string_vals.size() > 0:
 *             return string_vals.at(0)             # <<<<<<<<<<<<<<
 *         else:
 *             return fill
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_string_vals.at(0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "vcfnp.pyx":918
 *             return string_vals.at(0)
 *         else:
 *             return fill             # <<<<<<<<<<<<<<
 *     else:
 *         return _mkval_string_multi(string_vals, arity, fill)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_fill);
      __pyx_r = __pyx_v_fill;
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "vcfnp.pyx":920
 *             return fill
 *     else:
 *         return _mkval_string_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp__mkval_string_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":912
 * 
 * 
 * cdef inline object _mkval_string(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                  object fill):
 *     if arity == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkval_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":923
 * 
 * 
 * cdef inline object _mkval_string_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                        object fill):
 *     cdef int i
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_string_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_string_multi", 0);

  /* "vcfnp.pyx":926
 *                                        object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":927
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":928
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp.pyx":929
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_string_vals.at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "vcfnp.pyx":931
 *             out.append(string_vals.at(i))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "vcfnp.pyx":932
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":923
 * 
 * 
 * cdef inline object _mkval_string_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                        object fill):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._mkval_string_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":935
 * 
 * 
 * cdef inline object _mkval_double(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                  object fill):
 *     if arity == 1:
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_double", 0);

  /* "vcfnp.pyx":937
 * cdef inline object _mkval_double(vector[string]& string_vals, int arity,
 *                                  object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_double_single(string_vals, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":938
 *                                  object fill):
 *     if arity == 1:
 *         out = _mkval_double_single(string_vals, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkval_double_single(__pyx_v_string_vals, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":940
 *         out = _mkval_double_single(string_vals, fill)
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkval_double_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":941
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":935
 * 
 * 
 * cdef inline object _mkval_double(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                  object fill):
 *     if arity == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkval_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":944
 * 
 * 
 * cdef inline object _mkval_double_single(vector[string]& string_vals,             # <<<<<<<<<<<<<<
 *                                         object fill):
 *     cdef double v
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double_single(std::vector<std::string>  &__pyx_v_string_vals, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_double_single", 0);

  /* "vcfnp.pyx":947
 *                                         object fill):
 *     cdef double v
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atof(string_vals.at(0).c_str())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":948
 *     cdef double v
 *     if string_vals.size() > 0:
 *         return atof(string_vals.at(0).c_str())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(atof(__pyx_v_string_vals.at(0).c_str())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":949
 *     if string_vals.size() > 0:
 *         return atof(string_vals.at(0).c_str())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp.pyx":944
 * 
 * 
 * cdef inline object _mkval_double_single(vector[string]& string_vals,             # <<<<<<<<<<<<<<
 *                                         object fill):
 *     cdef double v
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkval_double_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":952
 * 
 * 
 * cdef inline object _mkval_double_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                        object fill):
 *     cdef int i
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_double_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_double_multi", 0);

  /* "vcfnp.pyx":955
 *                                        object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":956
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(atof(string_vals.at(i).c_str()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":957
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atof(string_vals.at(i).c_str()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp.pyx":958
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(atof(string_vals.at(i).c_str()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      __pyx_t_1 = PyFloat_FromDouble(atof(__pyx_v_string_vals.at(__pyx_v_i).c_str())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "vcfnp.pyx":960
 *             out.append(atof(string_vals.at(i).c_str()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "vcfnp.pyx":961
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":952
 * 
 * 
 * cdef inline object _mkval_double_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                        object fill):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._mkval_double_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":964
 * 
 * 
 * cdef inline object _mkval_long(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                object fill):
 *     if arity == 1:
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_long", 0);

  /* "vcfnp.pyx":966
 * cdef inline object _mkval_long(vector[string]& string_vals, int arity,
 *                                object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_long_single(string_vals, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":967
 *                                object fill):
 *     if arity == 1:
 *         out = _mkval_long_single(string_vals, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkval_long_single(__pyx_v_string_vals, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":969
 *         out = _mkval_long_single(string_vals, fill)
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_2 = __pyx_f_5vcfnp__mkval_long_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":970
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":964
 * 
 * 
 * cdef inline object _mkval_long(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                object fill):
 *     if arity == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkval_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":973
 * 
 * 
 * cdef inline object _mkval_long_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long_single(std::vector<std::string>  &__pyx_v_string_vals, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_long_single", 0);

  /* "vcfnp.pyx":974
 * 
 * cdef inline object _mkval_long_single(vector[string]& string_vals, object fill):
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atol(string_vals.at(0).c_str())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":975
 * cdef inline object _mkval_long_single(vector[string]& string_vals, object fill):
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_long(atol(__pyx_v_string_vals.at(0).c_str())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":976
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp.pyx":973
 * 
 * 
 * cdef inline object _mkval_long_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkval_long_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":979
 * 
 * 
 * cdef inline object _mkval_long_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                      object fill):
 *     cdef int i
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkval_long_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkval_long_multi", 0);

  /* "vcfnp.pyx":982
 *                                      object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":983
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(atol(string_vals.at(i).c_str()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":984
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atol(string_vals.at(i).c_str()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp.pyx":985
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(atol(string_vals.at(i).c_str()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      __pyx_t_1 = __Pyx_PyInt_From_long(atol(__pyx_v_string_vals.at(__pyx_v_i).c_str())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "vcfnp.pyx":987
 *             out.append(atol(string_vals.at(i).c_str()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "vcfnp.pyx":988
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":979
 * 
 * 
 * cdef inline object _mkval_long_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                      object fill):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._mkval_long_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":991
 * 
 * 
 * def _calldata_fields(fields, exclude_fields, format_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which calldata (i.e., FORMAT) fields to
 *     extract."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_36_calldata_fields(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_35_calldata_fields[] = "_calldata_fields(fields, exclude_fields, format_ids)\nUtility function to determine which calldata (i.e., FORMAT) fields to\n    extract.";
static PyMethodDef __pyx_mdef_5vcfnp_36_calldata_fields = {"_calldata_fields", (PyCFunction)__pyx_pw_5vcfnp_36_calldata_fields, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_35_calldata_fields};
static PyObject *__pyx_pw_5vcfnp_36_calldata_fields(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_exclude_fields = 0;
  PyObject *__pyx_v_format_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_calldata_fields (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_exclude_fields,&__pyx_n_s_format_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exclude_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_fields", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_fields", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_calldata_fields") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = values[0];
    __pyx_v_exclude_fields = values[1];
    __pyx_v_format_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_calldata_fields", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._calldata_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_35_calldata_fields(__pyx_self, __pyx_v_fields, __pyx_v_exclude_fields, __pyx_v_format_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_35_calldata_fields(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_format_ids) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_calldata_fields", 0);
  __Pyx_INCREF(__pyx_v_fields);

  /* "vcfnp.pyx":994
 *     """Utility function to determine which calldata (i.e., FORMAT) fields to
 *     extract."""
 *     if fields is None:             # <<<<<<<<<<<<<<
 *         # no fields specified by user
 *         # default to all standard fields plus all FORMAT fields in VCF header
 */
  __pyx_t_1 = (__pyx_v_fields == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":997
 *         # no fields specified by user
 *         # default to all standard fields plus all FORMAT fields in VCF header
 *         fields = STANDARD_CALLDATA_FIELDS + format_ids             # <<<<<<<<<<<<<<
 *     else:
 *         # fields specified by user
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_CALLDATA_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_format_ids); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":1000
 *     else:
 *         # fields specified by user
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             # check if field is standard or defined in VCF header
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:
 */
    if (likely(PyList_CheckExact(__pyx_v_fields)) || PyTuple_CheckExact(__pyx_v_fields)) {
      __pyx_t_4 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_fields); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":1002
 *         for f in fields:
 *             # check if field is standard or defined in VCF header
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:             # <<<<<<<<<<<<<<
 *                 # support extracting FORMAT even if not declared in header,
 *                 # but warn...
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_CALLDATA_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = (__pyx_t_1 != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_format_ids, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = (__pyx_t_7 != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1005
 *                 # support extracting FORMAT even if not declared in header,
 *                 # but warn...
 *                 print('WARNING: no definition found for field %s' % f,             # <<<<<<<<<<<<<<
 *                       file=sys.stderr)
 *     # process exclusions
 */
        __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_no_definition_found_for, __pyx_v_f); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);

        /* "vcfnp.pyx":1006
 *                 # but warn...
 *                 print('WARNING: no definition found for field %s' % f,
 *                       file=sys.stderr)             # <<<<<<<<<<<<<<
 *     # process exclusions
 *     if exclude_fields is not None:
 */
        __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_stderr); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_file, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "vcfnp.pyx":1005
 *                 # support extracting FORMAT even if not declared in header,
 *                 # but warn...
 *                 print('WARNING: no definition found for field %s' % f,             # <<<<<<<<<<<<<<
 *                       file=sys.stderr)
 *     # process exclusions
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L6;
      }
      __pyx_L6:;

      /* "vcfnp.pyx":1000
 *     else:
 *         # fields specified by user
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             # check if field is standard or defined in VCF header
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":1008
 *                       file=sys.stderr)
 *     # process exclusions
 *     if exclude_fields is not None:             # <<<<<<<<<<<<<<
 *         fields = [f for f in fields if f not in exclude_fields]
 *     return tuple(fields)
 */
  __pyx_t_2 = (__pyx_v_exclude_fields != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1009
 *     # process exclusions
 *     if exclude_fields is not None:
 *         fields = [f for f in fields if f not in exclude_fields]             # <<<<<<<<<<<<<<
 *     return tuple(fields)
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_fields)) || PyTuple_CheckExact(__pyx_v_fields)) {
      __pyx_t_10 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_10); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_fields); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_10);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_exclude_fields, Py_NE)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_f))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "vcfnp.pyx":1010
 *     if exclude_fields is not None:
 *         fields = [f for f in fields if f not in exclude_fields]
 *     return tuple(fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":991
 * 
 * 
 * def _calldata_fields(fields, exclude_fields, format_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which calldata (i.e., FORMAT) fields to
 *     extract."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._calldata_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_38_calldata_arities(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_37_calldata_arities[] = "_calldata_arities(fields, arities, format_counts, ploidy)";
static PyMethodDef __pyx_mdef_5vcfnp_38_calldata_arities = {"_calldata_arities", (PyCFunction)__pyx_pw_5vcfnp_38_calldata_arities, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_37_calldata_arities};
static PyObject *__pyx_pw_5vcfnp_38_calldata_arities(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_format_counts = 0;
  PyObject *__pyx_v_ploidy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_calldata_arities (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_format_counts,&__pyx_n_s_ploidy,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_arities", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format_counts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_arities", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_arities", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_calldata_arities") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_fields = values[0];
    __pyx_v_arities = values[1];
    __pyx_v_format_counts = values[2];
    __pyx_v_ploidy = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_calldata_arities", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._calldata_arities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_37_calldata_arities(__pyx_self, __pyx_v_fields, __pyx_v_arities, __pyx_v_format_counts, __pyx_v_ploidy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_17_calldata_arities_2generator11(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1035
 *             else:
 *                 arities[f] = vcf_count
 *     return tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_5vcfnp_17_calldata_arities_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_13_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_17_calldata_arities_2generator11, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_calldata_arities_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._calldata_arities.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_17_calldata_arities_2generator11(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arities)) { __Pyx_RaiseClosureNameError("arities"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arities, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */

static PyObject *__pyx_pf_5vcfnp_37_calldata_arities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_format_counts, PyObject *__pyx_v_ploidy) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *__pyx_cur_scope;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_vcf_count = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_calldata_arities", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)__pyx_tp_new_5vcfnp___pyx_scope_struct_12__calldata_arities(__pyx_ptype_5vcfnp___pyx_scope_struct_12__calldata_arities, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_arities = __pyx_v_arities;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arities);

  /* "vcfnp.pyx":1014
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):
 *     if arities is None:             # <<<<<<<<<<<<<<
 *         arities = dict()
 *     for f, vcf_count in zip(fields, format_counts):
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_arities == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":1015
 * def _calldata_arities(fields, arities, format_counts, ploidy):
 *     if arities is None:
 *         arities = dict()             # <<<<<<<<<<<<<<
 *     for f, vcf_count in zip(fields, format_counts):
 *         if f not in arities:
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_arities);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_arities, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":1016
 *     if arities is None:
 *         arities = dict()
 *     for f, vcf_count in zip(fields, format_counts):             # <<<<<<<<<<<<<<
 *         if f not in arities:
 *             if f == 'genotype':
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_format_counts);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_format_counts);
  __Pyx_GIVEREF(__pyx_v_format_counts);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_count, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":1017
 *         arities = dict()
 *     for f, vcf_count in zip(fields, format_counts):
 *         if f not in arities:             # <<<<<<<<<<<<<<
 *             if f == 'genotype':
 *                 arities[f] = ploidy
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_cur_scope->__pyx_v_arities, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":1018
 *     for f, vcf_count in zip(fields, format_counts):
 *         if f not in arities:
 *             if f == 'genotype':             # <<<<<<<<<<<<<<
 *                 arities[f] = ploidy
 *             elif f in DEFAULT_CALLDATA_ARITY:
 */
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_genotype, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_1) {

        /* "vcfnp.pyx":1019
 *         if f not in arities:
 *             if f == 'genotype':
 *                 arities[f] = ploidy             # <<<<<<<<<<<<<<
 *             elif f in DEFAULT_CALLDATA_ARITY:
 *                 arities[f] = DEFAULT_CALLDATA_ARITY[f]
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_v_ploidy) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1020
 *             if f == 'genotype':
 *                 arities[f] = ploidy
 *             elif f in DEFAULT_CALLDATA_ARITY:             # <<<<<<<<<<<<<<
 *                 arities[f] = DEFAULT_CALLDATA_ARITY[f]
 *             elif vcf_count == ALLELE_NUMBER:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_ARITY); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1021
 *                 arities[f] = ploidy
 *             elif f in DEFAULT_CALLDATA_ARITY:
 *                 arities[f] = DEFAULT_CALLDATA_ARITY[f]             # <<<<<<<<<<<<<<
 *             elif vcf_count == ALLELE_NUMBER:
 *                 # default to 2 (biallelic)
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_ARITY); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_4, __pyx_v_f); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1022
 *             elif f in DEFAULT_CALLDATA_ARITY:
 *                 arities[f] = DEFAULT_CALLDATA_ARITY[f]
 *             elif vcf_count == ALLELE_NUMBER:             # <<<<<<<<<<<<<<
 *                 # default to 2 (biallelic)
 *                 arities[f] = 2
 */
      __pyx_t_8 = PyInt_FromLong(vcf::ALLELE_NUMBER); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_vcf_count, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1024
 *             elif vcf_count == ALLELE_NUMBER:
 *                 # default to 2 (biallelic)
 *                 arities[f] = 2             # <<<<<<<<<<<<<<
 *             elif vcf_count == GENOTYPE_NUMBER:
 *                 # arity = (n + p - 1) choose p (n is number of alleles; p is
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_int_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1025
 *                 # default to 2 (biallelic)
 *                 arities[f] = 2
 *             elif vcf_count == GENOTYPE_NUMBER:             # <<<<<<<<<<<<<<
 *                 # arity = (n + p - 1) choose p (n is number of alleles; p is
 *                 # ploidy)
 */
      __pyx_t_4 = PyInt_FromLong(vcf::GENOTYPE_NUMBER); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyObject_RichCompare(__pyx_v_vcf_count, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1029
 *                 # ploidy)
 *                 # default to biallelic (n = 2)
 *                 arities[f] = ploidy + 1             # <<<<<<<<<<<<<<
 *             elif vcf_count <= 0:
 *                 # catch any other cases of non-specific arity
 */
        __pyx_t_8 = PyNumber_Add(__pyx_v_ploidy, __pyx_int_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1030
 *                 # default to biallelic (n = 2)
 *                 arities[f] = ploidy + 1
 *             elif vcf_count <= 0:             # <<<<<<<<<<<<<<
 *                 # catch any other cases of non-specific arity
 *                 arities[f] = 1
 */
      __pyx_t_8 = PyObject_RichCompare(__pyx_v_vcf_count, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1032
 *             elif vcf_count <= 0:
 *                 # catch any other cases of non-specific arity
 *                 arities[f] = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 arities[f] = vcf_count
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }
      /*else*/ {

        /* "vcfnp.pyx":1034
 *                 arities[f] = 1
 *             else:
 *                 arities[f] = vcf_count             # <<<<<<<<<<<<<<
 *     return tuple(arities[f] for f in fields)
 * 
 */
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_arities, __pyx_v_f, __pyx_v_vcf_count) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L9:;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":1016
 *     if arities is None:
 *         arities = dict()
 *     for f, vcf_count in zip(fields, format_counts):             # <<<<<<<<<<<<<<
 *         if f not in arities:
 *             if f == 'genotype':
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1035
 *             else:
 *                 arities[f] = vcf_count
 *     return tuple(arities[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_pf_5vcfnp_17_calldata_arities_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._calldata_arities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_vcf_count);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_40_calldata_fills(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_39_calldata_fills[] = "_calldata_fills(fields, fills, format_types, ploidy)";
static PyMethodDef __pyx_mdef_5vcfnp_40_calldata_fills = {"_calldata_fills", (PyCFunction)__pyx_pw_5vcfnp_40_calldata_fills, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_39_calldata_fills};
static PyObject *__pyx_pw_5vcfnp_40_calldata_fills(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_format_types = 0;
  PyObject *__pyx_v_ploidy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_calldata_fills (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_fills,&__pyx_n_s_format_types,&__pyx_n_s_ploidy,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_fills", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_fills", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_fills", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_calldata_fills") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_fields = values[0];
    __pyx_v_fills = values[1];
    __pyx_v_format_types = values[2];
    __pyx_v_ploidy = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_calldata_fills", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._calldata_fills", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_39_calldata_fills(__pyx_self, __pyx_v_fields, __pyx_v_fills, __pyx_v_format_types, __pyx_v_ploidy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_15_calldata_fills_2generator12(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1049
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     return tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_calldata_fills_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_15_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_15_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_calldata_fills_2generator12, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_calldata_fills_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._calldata_fills.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_calldata_fills_2generator12(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills)) { __Pyx_RaiseClosureNameError("fills"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_4 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */

static PyObject *__pyx_pf_5vcfnp_39_calldata_fills(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_fills, PyObject *__pyx_v_format_types, PyObject *__pyx_v_ploidy) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *__pyx_cur_scope;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_calldata_fills", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)__pyx_tp_new_5vcfnp___pyx_scope_struct_14__calldata_fills(__pyx_ptype_5vcfnp___pyx_scope_struct_14__calldata_fills, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_fills = __pyx_v_fills;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fills);

  /* "vcfnp.pyx":1039
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):
 *     if fills is None:             # <<<<<<<<<<<<<<
 *         fills = dict()
 *     for f, vcf_type in zip(fields, format_types):
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_fills == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":1040
 * def _calldata_fills(fields, fills, format_types, ploidy):
 *     if fills is None:
 *         fills = dict()             # <<<<<<<<<<<<<<
 *     for f, vcf_type in zip(fields, format_types):
 *         if f not in fills:
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fills);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fills, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":1041
 *     if fills is None:
 *         fills = dict()
 *     for f, vcf_type in zip(fields, format_types):             # <<<<<<<<<<<<<<
 *         if f not in fills:
 *             if f == 'GT':
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_v_format_types);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":1042
 *         fills = dict()
 *     for f, vcf_type in zip(fields, format_types):
 *         if f not in fills:             # <<<<<<<<<<<<<<
 *             if f == 'GT':
 *                 fills[f] = '/'.join(['.'] * ploidy)
 */
    __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_cur_scope->__pyx_v_fills, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":1043
 *     for f, vcf_type in zip(fields, format_types):
 *         if f not in fills:
 *             if f == 'GT':             # <<<<<<<<<<<<<<
 *                 fills[f] = '/'.join(['.'] * ploidy)
 *             elif f in DEFAULT_CALLDATA_FILL:
 */
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_GT, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_1) {

        /* "vcfnp.pyx":1044
 *         if f not in fills:
 *             if f == 'GT':
 *                 fills[f] = '/'.join(['.'] * ploidy)             # <<<<<<<<<<<<<<
 *             elif f in DEFAULT_CALLDATA_FILL:
 *                 fills[f] = DEFAULT_CALLDATA_FILL[f]
 */
        __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_kp_s__19);
        PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__19);
        __Pyx_GIVEREF(__pyx_kp_s__19);
        { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_v_ploidy); if (unlikely(!__pyx_temp)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_temp);
          __Pyx_DECREF(__pyx_t_4);
          __pyx_t_4 = __pyx_temp;
        }
        __pyx_t_8 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1045
 *             if f == 'GT':
 *                 fills[f] = '/'.join(['.'] * ploidy)
 *             elif f in DEFAULT_CALLDATA_FILL:             # <<<<<<<<<<<<<<
 *                 fills[f] = DEFAULT_CALLDATA_FILL[f]
 *             else:
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_FILL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "vcfnp.pyx":1046
 *                 fills[f] = '/'.join(['.'] * ploidy)
 *             elif f in DEFAULT_CALLDATA_FILL:
 *                 fills[f] = DEFAULT_CALLDATA_FILL[f]             # <<<<<<<<<<<<<<
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 */
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_FILL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = PyObject_GetItem(__pyx_t_8, __pyx_v_f); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, __pyx_t_4) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L9;
      }
      /*else*/ {

        /* "vcfnp.pyx":1048
 *                 fills[f] = DEFAULT_CALLDATA_FILL[f]
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]             # <<<<<<<<<<<<<<
 *     return tuple(fills[f] for f in fields)
 * 
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_FILL_MAP); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_4, __pyx_v_vcf_type); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_fills, __pyx_v_f, __pyx_t_8) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_L9:;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":1041
 *     if fills is None:
 *         fills = dict()
 *     for f, vcf_type in zip(fields, format_types):             # <<<<<<<<<<<<<<
 *         if f not in fills:
 *             if f == 'GT':
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1049
 *             else:
 *                 fills[f] = DEFAULT_FILL_MAP[vcf_type]
 *     return tuple(fills[f] for f in fields)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_pf_5vcfnp_15_calldata_fills_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._calldata_fills", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1052
 * 
 * 
 * def _calldata_dtype(fields, dtypes, format_types, arities, samples, ploidy):             # <<<<<<<<<<<<<<
 * 
 *     # construct a numpy dtype for structured array cells
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_42_calldata_dtype(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_41_calldata_dtype[] = "_calldata_dtype(fields, dtypes, format_types, arities, samples, ploidy)";
static PyMethodDef __pyx_mdef_5vcfnp_42_calldata_dtype = {"_calldata_dtype", (PyCFunction)__pyx_pw_5vcfnp_42_calldata_dtype, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_41_calldata_dtype};
static PyObject *__pyx_pw_5vcfnp_42_calldata_dtype(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_dtypes = 0;
  PyObject *__pyx_v_format_types = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_ploidy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_calldata_dtype (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_dtypes,&__pyx_n_s_format_types,&__pyx_n_s_arities,&__pyx_n_s_samples,&__pyx_n_s_ploidy,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtypes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_calldata_dtype") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_fields = values[0];
    __pyx_v_dtypes = values[1];
    __pyx_v_format_types = values[2];
    __pyx_v_arities = values[3];
    __pyx_v_samples = values[4];
    __pyx_v_ploidy = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_calldata_dtype", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._calldata_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_41_calldata_dtype(__pyx_self, __pyx_v_fields, __pyx_v_dtypes, __pyx_v_format_types, __pyx_v_arities, __pyx_v_samples, __pyx_v_ploidy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_41_calldata_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_format_types, PyObject *__pyx_v_arities, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy) {
  PyObject *__pyx_v_cell_dtype = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_calldata_dtype", 0);

  /* "vcfnp.pyx":1055
 * 
 *     # construct a numpy dtype for structured array cells
 *     cell_dtype = list()             # <<<<<<<<<<<<<<
 *     for f, vcf_type, n in zip(fields, format_types, arities):
 *         if dtypes is not None and f in dtypes:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cell_dtype = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1056
 *     # construct a numpy dtype for structured array cells
 *     cell_dtype = list()
 *     for f, vcf_type, n in zip(fields, format_types, arities):             # <<<<<<<<<<<<<<
 *         if dtypes is not None and f in dtypes:
 *             t = dtypes[f]
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_v_format_types);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp.pyx":1057
 *     cell_dtype = list()
 *     for f, vcf_type, n in zip(fields, format_types, arities):
 *         if dtypes is not None and f in dtypes:             # <<<<<<<<<<<<<<
 *             t = dtypes[f]
 *         elif f == 'GT':
 */
    __pyx_t_11 = (__pyx_v_dtypes != Py_None);
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_dtypes, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = (__pyx_t_12 != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_10) {

      /* "vcfnp.pyx":1058
 *     for f, vcf_type, n in zip(fields, format_types, arities):
 *         if dtypes is not None and f in dtypes:
 *             t = dtypes[f]             # <<<<<<<<<<<<<<
 *         elif f == 'GT':
 *             t = 'a%d' % ((ploidy*2)-1)
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_dtypes, __pyx_v_f); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1059
 *         if dtypes is not None and f in dtypes:
 *             t = dtypes[f]
 *         elif f == 'GT':             # <<<<<<<<<<<<<<
 *             t = 'a%d' % ((ploidy*2)-1)
 *         elif f in DEFAULT_CALLDATA_DTYPE:
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_GT, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_10) {

      /* "vcfnp.pyx":1060
 *             t = dtypes[f]
 *         elif f == 'GT':
 *             t = 'a%d' % ((ploidy*2)-1)             # <<<<<<<<<<<<<<
 *         elif f in DEFAULT_CALLDATA_DTYPE:
 *             # known field
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_ploidy, __pyx_int_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyNumber_Subtract(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_a_d, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1061
 *         elif f == 'GT':
 *             t = 'a%d' % ((ploidy*2)-1)
 *         elif f in DEFAULT_CALLDATA_DTYPE:             # <<<<<<<<<<<<<<
 *             # known field
 *             t = DEFAULT_CALLDATA_DTYPE[f]
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_DTYPE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1063
 *         elif f in DEFAULT_CALLDATA_DTYPE:
 *             # known field
 *             t = DEFAULT_CALLDATA_DTYPE[f]             # <<<<<<<<<<<<<<
 *         else:
 *             t = DEFAULT_TYPE_MAP[vcf_type]
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_CALLDATA_DTYPE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_7);
      __pyx_t_7 = 0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "vcfnp.pyx":1065
 *             t = DEFAULT_CALLDATA_DTYPE[f]
 *         else:
 *             t = DEFAULT_TYPE_MAP[vcf_type]             # <<<<<<<<<<<<<<
 *         if n == 1:
 *             cell_dtype.append((f, t))
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_TYPE_MAP); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyObject_GetItem(__pyx_t_7, __pyx_v_vcf_type); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L7:;

    /* "vcfnp.pyx":1066
 *         else:
 *             t = DEFAULT_TYPE_MAP[vcf_type]
 *         if n == 1:             # <<<<<<<<<<<<<<
 *             cell_dtype.append((f, t))
 *         else:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_n, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1067
 *             t = DEFAULT_TYPE_MAP[vcf_type]
 *         if n == 1:
 *             cell_dtype.append((f, t))             # <<<<<<<<<<<<<<
 *         else:
 *             cell_dtype.append((f, t, (n,)))
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_f);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_f);
      __Pyx_GIVEREF(__pyx_v_f);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_cell_dtype, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L10;
    }
    /*else*/ {

      /* "vcfnp.pyx":1069
 *             cell_dtype.append((f, t))
 *         else:
 *             cell_dtype.append((f, t, (n,)))             # <<<<<<<<<<<<<<
 * 
 *     # construct a numpy dtype for structured array
 */
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_f);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_f);
      __Pyx_GIVEREF(__pyx_v_f);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_cell_dtype, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L10:;

    /* "vcfnp.pyx":1056
 *     # construct a numpy dtype for structured array cells
 *     cell_dtype = list()
 *     for f, vcf_type, n in zip(fields, format_types, arities):             # <<<<<<<<<<<<<<
 *         if dtypes is not None and f in dtypes:
 *             t = dtypes[f]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1072
 * 
 *     # construct a numpy dtype for structured array
 *     dtype = [(s, cell_dtype) for s in samples]             # <<<<<<<<<<<<<<
 *     return dtype
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_samples)) || PyTuple_CheckExact(__pyx_v_samples)) {
    __pyx_t_7 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_samples); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_7);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    __Pyx_INCREF(__pyx_v_cell_dtype);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_cell_dtype);
    __Pyx_GIVEREF(__pyx_v_cell_dtype);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_dtype = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1073
 *     # construct a numpy dtype for structured array
 *     dtype = [(s, cell_dtype) for s in samples]
 *     return dtype             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dtype);
  __pyx_r = __pyx_v_dtype;
  goto __pyx_L0;

  /* "vcfnp.pyx":1052
 * 
 * 
 * def _calldata_dtype(fields, dtypes, format_types, arities, samples, ploidy):             # <<<<<<<<<<<<<<
 * 
 *     # construct a numpy dtype for structured array cells
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vcfnp._calldata_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cell_dtype);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_15_CalldataLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_15_CalldataLoader_build[] = "_CalldataLoader.build(self)";
static PyMethodDef __pyx_mdef_5vcfnp_15_CalldataLoader_1build = {"build", (PyCFunction)__pyx_pw_5vcfnp_15_CalldataLoader_1build, METH_O, __pyx_doc_5vcfnp_15_CalldataLoader_build};
static PyObject *__pyx_pw_5vcfnp_15_CalldataLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_15_CalldataLoader_build(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_15_CalldataLoader_5build_2generator13(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1121
 * 
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1             # <<<<<<<<<<<<<<
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 */

static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_5build_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_17_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_17_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_CalldataLoader_5build_2generator13, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_CalldataLoader_build_locals_gen); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._CalldataLoader.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_CalldataLoader_5build_2generator13(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1122
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)             # <<<<<<<<<<<<<<
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 *                               for f in fields)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1121
 * 
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1             # <<<<<<<<<<<<<<
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_types)) { __Pyx_RaiseClosureNameError("format_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_cur_scope->__pyx_v_f, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_types, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if ((__pyx_t_5 != 0)) {
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_types)) { __Pyx_RaiseClosureNameError("format_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_types, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_t_4 = __pyx_int_neg_1;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":1122
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)             # <<<<<<<<<<<<<<
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 *                               for f in fields)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1121
 * 
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1             # <<<<<<<<<<<<<<
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_15_CalldataLoader_5build_5generator14(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1123
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1             # <<<<<<<<<<<<<<
 *                               for f in fields)
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_5build_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_18_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_18_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_15_CalldataLoader_5build_5generator14, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_CalldataLoader_build_locals_gen); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._CalldataLoader.build.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_15_CalldataLoader_5build_5generator14(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1124
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 *                               for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine expected number of values for each field
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1123
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1             # <<<<<<<<<<<<<<
 *                               for f in fields)
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_counts)) { __Pyx_RaiseClosureNameError("format_counts"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_cur_scope->__pyx_v_f, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_counts, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if ((__pyx_t_5 != 0)) {
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_counts)) { __Pyx_RaiseClosureNameError("format_counts"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_counts, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_t_4 = __pyx_int_neg_1;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":1124
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 *                               for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine expected number of values for each field
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1123
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1             # <<<<<<<<<<<<<<
 *                               for f in fields)
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

static PyObject *__pyx_pf_5vcfnp_15_CalldataLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *__pyx_cur_scope;
  PyObject *__pyx_v_log = NULL;
  PyObject *__pyx_v_vcf_fns = NULL;
  struct __pyx_obj_6vcflib_PyVariantCallFile *__pyx_v_vcf = NULL;
  PyObject *__pyx_v_format_ids = NULL;
  PyObject *__pyx_v_all_samples = NULL;
  PyObject *__pyx_v_samples = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_vcf_types = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_ploidy = NULL;
  PyObject *__pyx_v_arities = NULL;
  PyObject *__pyx_v_fills = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_fieldspec = NULL;
  PyObject *__pyx_v_condition = NULL;
  PyObject *__pyx_v_region = NULL;
  PyObject *__pyx_v_it = NULL;
  PyObject *__pyx_v_slice_args = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)__pyx_tp_new_5vcfnp___pyx_scope_struct_16_build(__pyx_ptype_5vcfnp___pyx_scope_struct_16_build, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);

  /* "vcfnp.pyx":1081
 * 
 *     def build(self):
 *         log = self.log             # <<<<<<<<<<<<<<
 * 
 *         # open VCF file to inspect header
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_log = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1084
 * 
 *         # open VCF file to inspect header
 *         vcf_fns = self.vcf_fns             # <<<<<<<<<<<<<<
 *         vcf = PyVariantCallFile(vcf_fns[0])
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_vcf_fns); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vcf_fns = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1085
 *         # open VCF file to inspect header
 *         vcf_fns = self.vcf_fns
 *         vcf = PyVariantCallFile(vcf_fns[0])             # <<<<<<<<<<<<<<
 * 
 *         # extract FORMAT definitions
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vcf_fns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6vcflib_PyVariantCallFile)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vcf = ((struct __pyx_obj_6vcflib_PyVariantCallFile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1088
 * 
 *         # extract FORMAT definitions
 *         _warn_duplicates(vcf.format_ids)             # <<<<<<<<<<<<<<
 *         format_ids = tuple(sorted(set(vcf.format_ids)))
 *         format_types = vcf.format_types
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn_duplicates); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_format_ids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1089
 *         # extract FORMAT definitions
 *         _warn_duplicates(vcf.format_ids)
 *         format_ids = tuple(sorted(set(vcf.format_ids)))             # <<<<<<<<<<<<<<
 *         format_types = vcf.format_types
 *         format_counts = vcf.format_counts
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_format_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_format_ids = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1090
 *         _warn_duplicates(vcf.format_ids)
 *         format_ids = tuple(sorted(set(vcf.format_ids)))
 *         format_types = vcf.format_types             # <<<<<<<<<<<<<<
 *         format_counts = vcf.format_counts
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_format_types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_format_types = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1091
 *         format_ids = tuple(sorted(set(vcf.format_ids)))
 *         format_types = vcf.format_types
 *         format_counts = vcf.format_counts             # <<<<<<<<<<<<<<
 * 
 *         # extract sample IDs
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_format_counts); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_format_counts = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1094
 * 
 *         # extract sample IDs
 *         all_samples = vcf.sampleNames             # <<<<<<<<<<<<<<
 * 
 *         # determine which samples to extract
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_sampleNames); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_all_samples = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1097
 * 
 *         # determine which samples to extract
 *         samples = self.samples             # <<<<<<<<<<<<<<
 *         if samples is None:
 *             samples = all_samples
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_samples = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1098
 *         # determine which samples to extract
 *         samples = self.samples
 *         if samples is None:             # <<<<<<<<<<<<<<
 *             samples = all_samples
 *         else:
 */
  __pyx_t_6 = (__pyx_v_samples == Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "vcfnp.pyx":1099
 *         samples = self.samples
 *         if samples is None:
 *             samples = all_samples             # <<<<<<<<<<<<<<
 *         else:
 *             for s in samples:
 */
    __Pyx_INCREF(__pyx_v_all_samples);
    __Pyx_DECREF_SET(__pyx_v_samples, __pyx_v_all_samples);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "vcfnp.pyx":1101
 *             samples = all_samples
 *         else:
 *             for s in samples:             # <<<<<<<<<<<<<<
 *                 assert s in all_samples, 'unknown sample: %s' % s
 *         samples = tuple(samples)
 */
    if (likely(PyList_CheckExact(__pyx_v_samples)) || PyTuple_CheckExact(__pyx_v_samples)) {
      __pyx_t_2 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "vcfnp.pyx":1102
 *         else:
 *             for s in samples:
 *                 assert s in all_samples, 'unknown sample: %s' % s             # <<<<<<<<<<<<<<
 *         samples = tuple(samples)
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_s, __pyx_v_all_samples, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        if (unlikely(!(__pyx_t_7 != 0))) {
          __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_unknown_sample_s, __pyx_v_s); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      #endif

      /* "vcfnp.pyx":1101
 *             samples = all_samples
 *         else:
 *             for s in samples:             # <<<<<<<<<<<<<<
 *                 assert s in all_samples, 'unknown sample: %s' % s
 *         samples = tuple(samples)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":1103
 *             for s in samples:
 *                 assert s in all_samples, 'unknown sample: %s' % s
 *         samples = tuple(samples)             # <<<<<<<<<<<<<<
 * 
 *         # determine which fields to extract
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_samples);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_samples);
  __Pyx_GIVEREF(__pyx_v_samples);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_samples, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1106
 * 
 *         # determine which fields to extract
 *         fields = _calldata_fields(self.fields, self.exclude_fields, format_ids)             # <<<<<<<<<<<<<<
 * 
 *         # support for working around VCFs with bad FORMAT headers
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_calldata_fields); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_exclude_fields); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_4) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_format_ids);
  PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_8, __pyx_v_format_ids);
  __Pyx_GIVEREF(__pyx_v_format_ids);
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_fields = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1109
 * 
 *         # support for working around VCFs with bad FORMAT headers
 *         vcf_types = self.vcf_types             # <<<<<<<<<<<<<<
 *         for f in fields:
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_vcf_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vcf_types = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1110
 *         # support for working around VCFs with bad FORMAT headers
 *         vcf_types = self.vcf_types
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:
 *                 # fall back to unary string; can be overridden with
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":1111
 *         vcf_types = self.vcf_types
 *         for f in fields:
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:             # <<<<<<<<<<<<<<
 *                 # fall back to unary string; can be overridden with
 *                 # vcf_types, dtypes and arities args
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_CALLDATA_FIELDS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = (__pyx_t_6 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_7 = __pyx_t_11;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_format_ids, Py_NE)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_11 != 0);
    __pyx_t_7 = __pyx_t_6;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_7) {

      /* "vcfnp.pyx":1114
 *                 # fall back to unary string; can be overridden with
 *                 # vcf_types, dtypes and arities args
 *                 format_types[f] = FIELD_STRING             # <<<<<<<<<<<<<<
 *                 format_counts[f] = 1
 *             if vcf_types is not None and f in vcf_types:
 */
      __pyx_t_2 = PyInt_FromLong(vcf::FIELD_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_format_types, __pyx_v_f, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp.pyx":1115
 *                 # vcf_types, dtypes and arities args
 *                 format_types[f] = FIELD_STRING
 *                 format_counts[f] = 1             # <<<<<<<<<<<<<<
 *             if vcf_types is not None and f in vcf_types:
 *                 # override type declared in VCF header
 */
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_format_counts, __pyx_v_f, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "vcfnp.pyx":1116
 *                 format_types[f] = FIELD_STRING
 *                 format_counts[f] = 1
 *             if vcf_types is not None and f in vcf_types:             # <<<<<<<<<<<<<<
 *                 # override type declared in VCF header
 *                 format_types[f] = TYPESTRING2KEY[vcf_types[f]]
 */
    __pyx_t_6 = (__pyx_v_vcf_types != Py_None);
    __pyx_t_11 = (__pyx_t_6 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_7 = __pyx_t_11;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_v_vcf_types, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_11 != 0);
    __pyx_t_7 = __pyx_t_6;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_7) {

      /* "vcfnp.pyx":1118
 *             if vcf_types is not None and f in vcf_types:
 *                 # override type declared in VCF header
 *                 format_types[f] = TYPESTRING2KEY[vcf_types[f]]             # <<<<<<<<<<<<<<
 * 
 *         # conveniences
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPESTRING2KEY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyObject_GetItem(__pyx_v_vcf_types, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_t_10); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_format_types, __pyx_v_f, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "vcfnp.pyx":1110
 *         # support for working around VCFs with bad FORMAT headers
 *         vcf_types = self.vcf_types
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if f not in STANDARD_CALLDATA_FIELDS and f not in format_ids:
 *                 # fall back to unary string; can be overridden with
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1121
 * 
 *         # conveniences
 *         format_types = tuple(format_types[f] if f in format_types else -1             # <<<<<<<<<<<<<<
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1
 */
  __pyx_t_1 = __pyx_pf_5vcfnp_15_CalldataLoader_5build_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_format_types);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_format_types, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1123
 *         format_types = tuple(format_types[f] if f in format_types else -1
 *                              for f in fields)
 *         format_counts = tuple(format_counts[f] if f in format_counts else -1             # <<<<<<<<<<<<<<
 *                               for f in fields)
 * 
 */
  __pyx_t_1 = __pyx_pf_5vcfnp_15_CalldataLoader_5build_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_format_counts);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_format_counts, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1127
 * 
 *         # determine expected number of values for each field
 *         ploidy = self.plody             # <<<<<<<<<<<<<<
 *         arities = _calldata_arities(fields, self.arities, format_counts, ploidy)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_plody); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ploidy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1128
 *         # determine expected number of values for each field
 *         ploidy = self.plody
 *         arities = _calldata_arities(fields, self.arities, format_counts, ploidy)             # <<<<<<<<<<<<<<
 * 
 *         # determine fill values to use where number of values is less than
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_calldata_arities); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_format_counts);
  PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_8, __pyx_cur_scope->__pyx_v_format_counts);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_format_counts);
  __Pyx_INCREF(__pyx_v_ploidy);
  PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_8, __pyx_v_ploidy);
  __Pyx_GIVEREF(__pyx_v_ploidy);
  __pyx_t_10 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_arities = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1132
 *         # determine fill values to use where number of values is less than
 *         # expectation
 *         fills = _calldata_fills(fields, self.fills, format_types, ploidy)             # <<<<<<<<<<<<<<
 * 
 *         # construct a numpy dtype for structured array
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_calldata_fills); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_fills); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_2 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_10) {
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __Pyx_GIVEREF(__pyx_t_10); __pyx_t_10 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_8, __pyx_cur_scope->__pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_format_types);
  __Pyx_INCREF(__pyx_v_ploidy);
  PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_8, __pyx_v_ploidy);
  __Pyx_GIVEREF(__pyx_v_ploidy);
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_fills = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1135
 * 
 *         # construct a numpy dtype for structured array
 *         dtype = _calldata_dtype(fields, self.dtypes, format_types, arities,             # <<<<<<<<<<<<<<
 *                                 samples, ploidy)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_calldata_dtype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_dtypes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "vcfnp.pyx":1136
 *         # construct a numpy dtype for structured array
 *         dtype = _calldata_dtype(fields, self.dtypes, format_types, arities,
 *                                 samples, ploidy)             # <<<<<<<<<<<<<<
 * 
 *         # zip up field parameters
 */
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_5) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_8, __pyx_cur_scope->__pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_format_types);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_8, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_samples);
  PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_8, __pyx_v_samples);
  __Pyx_GIVEREF(__pyx_v_samples);
  __Pyx_INCREF(__pyx_v_ploidy);
  PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_8, __pyx_v_ploidy);
  __Pyx_GIVEREF(__pyx_v_ploidy);
  __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dtype = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1139
 * 
 *         # zip up field parameters
 *         fieldspec = zip(fields, arities, fills, format_types)             # <<<<<<<<<<<<<<
 * 
 *         # set up iterator
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_fills);
  __Pyx_GIVEREF(__pyx_v_fills);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_format_types);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fieldspec = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1142
 * 
 *         # set up iterator
 *         condition = self.condition             # <<<<<<<<<<<<<<
 *         region = self.region
 *         if condition is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_condition); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_condition = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1143
 *         # set up iterator
 *         condition = self.condition
 *         region = self.region             # <<<<<<<<<<<<<<
 *         if condition is not None:
 *             it = _itercalldata_with_condition(vcf_fns, region, samples, ploidy,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_region); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_region = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1144
 *         condition = self.condition
 *         region = self.region
 *         if condition is not None:             # <<<<<<<<<<<<<<
 *             it = _itercalldata_with_condition(vcf_fns, region, samples, ploidy,
 *                                              fieldspec, condition)
 */
  __pyx_t_7 = (__pyx_v_condition != Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "vcfnp.pyx":1145
 *         region = self.region
 *         if condition is not None:
 *             it = _itercalldata_with_condition(vcf_fns, region, samples, ploidy,             # <<<<<<<<<<<<<<
 *                                              fieldspec, condition)
 *         else:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itercalldata_with_condition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "vcfnp.pyx":1146
 *         if condition is not None:
 *             it = _itercalldata_with_condition(vcf_fns, region, samples, ploidy,
 *                                              fieldspec, condition)             # <<<<<<<<<<<<<<
 *         else:
 *             it = _itercalldata(vcf_fns, region, samples, ploidy, fieldspec)
 */
    __pyx_t_10 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    __pyx_t_2 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_10) {
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __Pyx_GIVEREF(__pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    __Pyx_INCREF(__pyx_v_samples);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_8, __pyx_v_samples);
    __Pyx_GIVEREF(__pyx_v_samples);
    __Pyx_INCREF(__pyx_v_ploidy);
    PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_8, __pyx_v_ploidy);
    __Pyx_GIVEREF(__pyx_v_ploidy);
    __Pyx_INCREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_2, 4+__pyx_t_8, __pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    __Pyx_INCREF(__pyx_v_condition);
    PyTuple_SET_ITEM(__pyx_t_2, 5+__pyx_t_8, __pyx_v_condition);
    __Pyx_GIVEREF(__pyx_v_condition);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_it = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "vcfnp.pyx":1148
 *                                              fieldspec, condition)
 *         else:
 *             it = _itercalldata(vcf_fns, region, samples, ploidy, fieldspec)             # <<<<<<<<<<<<<<
 * 
 *         # slice iterator
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itercalldata); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    __pyx_t_10 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_2) {
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    __Pyx_INCREF(__pyx_v_samples);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_8, __pyx_v_samples);
    __Pyx_GIVEREF(__pyx_v_samples);
    __Pyx_INCREF(__pyx_v_ploidy);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_8, __pyx_v_ploidy);
    __Pyx_GIVEREF(__pyx_v_ploidy);
    __Pyx_INCREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_8, __pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_it = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L14:;

  /* "vcfnp.pyx":1151
 * 
 *         # slice iterator
 *         slice_args = self.slice_args             # <<<<<<<<<<<<<<
 *         if slice_args:
 *             it = islice(it, *slice_args)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_slice_args); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_slice_args = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1152
 *         # slice iterator
 *         slice_args = self.slice_args
 *         if slice_args:             # <<<<<<<<<<<<<<
 *             it = islice(it, *slice_args)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_slice_args); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "vcfnp.pyx":1153
 *         slice_args = self.slice_args
 *         if slice_args:
 *             it = islice(it, *slice_args)             # <<<<<<<<<<<<<<
 * 
 *         # build an array from the iterator
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_islice); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    __pyx_t_10 = PySequence_Tuple(__pyx_v_slice_args); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_it, __pyx_t_10);
    __pyx_t_10 = 0;
    goto __pyx_L15;
  }
  __pyx_L15:;

  /* "vcfnp.pyx":1156
 * 
 *         # build an array from the iterator
 *         arr = _fromiter(it, dtype, self.count, self.progress, log)             # <<<<<<<<<<<<<<
 * 
 *         return arr
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_fromiter); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_count); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_progress); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_4 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__pyx_t_5) {
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(__pyx_v_it);
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_it);
  __Pyx_GIVEREF(__pyx_v_it);
  __Pyx_INCREF(__pyx_v_dtype);
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_dtype);
  __Pyx_GIVEREF(__pyx_v_dtype);
  PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_8, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_8, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_log);
  PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_8, __pyx_v_log);
  __Pyx_GIVEREF(__pyx_v_log);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_arr = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vcfnp.pyx":1158
 *         arr = _fromiter(it, dtype, self.count, self.progress, log)
 * 
 *         return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp._CalldataLoader.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_log);
  __Pyx_XDECREF(__pyx_v_vcf_fns);
  __Pyx_XDECREF((PyObject *)__pyx_v_vcf);
  __Pyx_XDECREF(__pyx_v_format_ids);
  __Pyx_XDECREF(__pyx_v_all_samples);
  __Pyx_XDECREF(__pyx_v_samples);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_vcf_types);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_ploidy);
  __Pyx_XDECREF(__pyx_v_arities);
  __Pyx_XDECREF(__pyx_v_fills);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_fieldspec);
  __Pyx_XDECREF(__pyx_v_condition);
  __Pyx_XDECREF(__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_slice_args);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1161
 * 
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,             # <<<<<<<<<<<<<<
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_44calldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_43calldata[] = "calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None, exclude_fields=None, dtypes=None, arities=None, fills=None, vcf_types=None, count=None, progress=0, logstream=None, condition=None, slice_args=None, verbose=False, cache=False, cachedir=None, skip_cached=False)\n\n    Load a numpy 1-dimensional structured array with data from the sample\n    columns of a VCF file.\n\n    Parameters\n    ----------\n\n    vcf_fn: string or list\n        Name of the VCF file or list of file names.\n    region: string\n        Region to extract, e.g., 'chr1' or 'chr1:0-100000'.\n    fields: list or array-like\n        List of fields to extract from the VCF.\n    exclude_fields: list or array-like\n        Fields to exclude from extraction.\n    dtypes: dict or dict-like\n        Dictionary cotaining dtypes to use instead of the default inferred ones\n    arities: dict or dict-like\n        Override the amount of values to expect.\n    fills: dict or dict-like\n        Dictionary containing field:fillvalue mappings used to override the\n        default fill in values in VCF fields.\n    vcf_types: dict or dict-like\n        Dictionary containing field:string mappings used to override any\n        bogus type declarations in the VCF header.\n    count: int\n        Attempt to extract a specific number of records.\n    progress: int\n        If greater than 0, log parsing progress.\n    logstream: file or file-like object\n        Stream to use for logging progress.\n    condition: array\n        Boolean array defining which rows to load.\n    slice_args: tuple or list\n        Slice of the underlying iterator, e.g., (0, 1000, 10) takes every\n        10th row from the first 1000.\n    verbose: bool\n        Log more messages.\n    cache: bool\n        If True, save the resulting numpy array to disk, and load from the\n        cache if present rather than rebuilding from the VCF.\n    cachedir: string\n        Manually specify the directory to use to store cache files.\n   "" skip_cached: bool\n        If True and cache file is fresh, do not load and return None.\n\n    Examples\n    --------\n\n        >>> from vcfnp import calldata, view2d\n        >>> C = calldata('fixture/sample.vcf')\n        >>> C\n        array([ ((True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, False, [0, 1], 0, 0, '0/1', [3, 3])),\n               ((True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, True, [0, 0], 0, 0, '0|0', [10, 10]), (True, False, [0, 1], 0, 0, '0/1', [3, 3])),\n               ((True, True, [0, 0], 1, 48, '0|0', [51, 51]), (True, True, [1, 0], 8, 48, '1|0', [51, 51]), (True, False, [1, 1], 5, 43, '1/1', [0, 0])),\n               ((True, True, [0, 0], 3, 49, '0|0', [58, 50]), (True, True, [0, 1], 5, 3, '0|1', [65, 3]), (True, False, [0, 0], 3, 41, '0/0', [0, 0])),\n               ((True, True, [1, 2], 6, 21, '1|2', [23, 27]), (True, True, [2, 1], 0, 2, '2|1', [18, 2]), (True, False, [2, 2], 4, 35, '2/2', [0, 0])),\n               ((True, True, [0, 0], 0, 54, '0|0', [56, 60]), (True, True, [0, 0], 4, 48, '0|0', [51, 51]), (True, False, [0, 0], 2, 61, '0/0', [0, 0])),\n               ((True, False, [0, 1], 4, 0, '0/1', [0, 0]), (True, False, [0, 2], 2, 17, '0/2', [0, 0]), (False, False, [-1, -1], 3, 40, './.', [0, 0])),\n               ((True, False, [0, 0], 0, 0, '0/0', [0, 0]), (True, True, [0, 0], 0, 0, '0|0', [0, 0]), (False, False, [-1, -1], 0, 0, './.', [0, 0])),\n               ((True, False, [0, -1], 0, 0, '0', [0, 0]), (True, False, [0, 1], 0, 0, '0/1', [0, 0]), (True, True, [0, 2], 0, 0, '0|2', [0, 0]))],\n              dtype=[('NA00001', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))]), ('NA00002', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))]), ('NA00003', [('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)),"" ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])])\n        >>> C['NA00001']\n        array([(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n               (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n               (True, True, [0, 0], 1, 48, '0|0', [51, 51]),\n               (True, True, [0, 0], 3, 49, '0|0', [58, 50]),\n               (True, True, [1, 2], 6, 21, '1|2', [23, 27]),\n               (True, True, [0, 0], 0, 54, '0|0', [56, 60]),\n               (True, False, [0, 1], 4, 0, '0/1', [0, 0]),\n               (True, False, [0, 0], 0, 0, '0/0', [0, 0]),\n               (True, False, [0, -1], 0, 0, '0', [0, 0])],\n              dtype=[('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])\n        >>> C2d = view2d(C)\n        >>> C2d\n        array([[(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, False, [0, 1], 0, 0, '0/1', [3, 3])],\n               [(True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, True, [0, 0], 0, 0, '0|0', [10, 10]),\n                (True, False, [0, 1], 0, 0, '0/1', [3, 3])],\n               [(True, True, [0, 0], 1, 48, '0|0', [51, 51]),\n                (True, True, [1, 0], 8, 48, '1|0', [51, 51]),\n                (True, False, [1, 1], 5, 43, '1/1', [0, 0])],\n               [(True, True, [0, 0], 3, 49, '0|0', [58, 50]),\n                (True, True, [0, 1], 5, 3, '0|1', [65, 3]),\n                (True, False, [0, 0], 3, 41, '0/0', [0, 0])],\n               [(True, True, [1, 2], 6, 21, '1|2', [23, 27]),\n                (True, True, [2, 1], 0, 2, '2|1', [18, 2]),\n                (True, False, [2, 2], 4, 35, '2/2', [0, 0])],\n               [(True, True, [0, 0], 0, 54, '0|0', [56, 60]),\n                (True, True, [0, 0], 4, 48, '0|0', [51, 51]),\n                (True, False, [0, 0], 2, 61, '0/0', [0, 0])],\n               [(True, False, [0"", 1], 4, 0, '0/1', [0, 0]),\n                (True, False, [0, 2], 2, 17, '0/2', [0, 0]),\n                (False, False, [-1, -1], 3, 40, './.', [0, 0])],\n               [(True, False, [0, 0], 0, 0, '0/0', [0, 0]),\n                (True, True, [0, 0], 0, 0, '0|0', [0, 0]),\n                (False, False, [-1, -1], 0, 0, './.', [0, 0])],\n               [(True, False, [0, -1], 0, 0, '0', [0, 0]),\n                (True, False, [0, 1], 0, 0, '0/1', [0, 0]),\n                (True, True, [0, 2], 0, 0, '0|2', [0, 0])]],\n              dtype=[('is_called', '?'), ('is_phased', '?'), ('genotype', 'i1', (2,)), ('DP', '<u2'), ('GQ', 'u1'), ('GT', 'S3'), ('HQ', '<i4', (2,))])\n        >>> C2d['genotype']\n        array([[[ 0,  0],\n                [ 0,  0],\n                [ 0,  1]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [ 0,  1]],\n\n               [[ 0,  0],\n                [ 1,  0],\n                [ 1,  1]],\n\n               [[ 0,  0],\n                [ 0,  1],\n                [ 0,  0]],\n\n               [[ 1,  2],\n                [ 2,  1],\n                [ 2,  2]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [ 0,  0]],\n\n               [[ 0,  1],\n                [ 0,  2],\n                [-1, -1]],\n\n               [[ 0,  0],\n                [ 0,  0],\n                [-1, -1]],\n\n               [[ 0, -1],\n                [ 0,  1],\n                [ 0,  2]]], dtype=int8)\n        >>> C2d['genotype'][3, :]\n        array([[0, 0],\n               [0, 1],\n               [0, 0]], dtype=int8)\n\n    ";
static PyMethodDef __pyx_mdef_5vcfnp_44calldata = {"calldata", (PyCFunction)__pyx_pw_5vcfnp_44calldata, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_43calldata};
static PyObject *__pyx_pw_5vcfnp_44calldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_ploidy = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_exclude_fields = 0;
  PyObject *__pyx_v_dtypes = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_vcf_types = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_v_progress = 0;
  PyObject *__pyx_v_logstream = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_slice_args = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_cache = 0;
  PyObject *__pyx_v_cachedir = 0;
  PyObject *__pyx_v_skip_cached = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calldata (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fn,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fields,&__pyx_n_s_exclude_fields,&__pyx_n_s_dtypes,&__pyx_n_s_arities,&__pyx_n_s_fills,&__pyx_n_s_vcf_types,&__pyx_n_s_count,&__pyx_n_s_progress,&__pyx_n_s_logstream,&__pyx_n_s_condition,&__pyx_n_s_slice_args,&__pyx_n_s_verbose,&__pyx_n_s_cache,&__pyx_n_s_cachedir,&__pyx_n_s_skip_cached,0};
    PyObject* values[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_int_2);
    values[4] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":1162
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,             # <<<<<<<<<<<<<<
 *              vcf_types=None, count=None, progress=0, logstream=None,
 *              condition=None, slice_args=None, verbose=False, cache=False,
 */
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":1163
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,             # <<<<<<<<<<<<<<
 *              condition=None, slice_args=None, verbose=False, cache=False,
 *              cachedir=None, skip_cached=False):
 */
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)__pyx_int_0);
    values[12] = ((PyObject *)Py_None);

    /* "vcfnp.pyx":1164
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 *              condition=None, slice_args=None, verbose=False, cache=False,             # <<<<<<<<<<<<<<
 *              cachedir=None, skip_cached=False):
 *     """
 */
    values[13] = ((PyObject *)Py_None);
    values[14] = ((PyObject *)Py_None);
    values[15] = ((PyObject *)Py_False);
    values[16] = ((PyObject *)Py_False);

    /* "vcfnp.pyx":1165
 *              vcf_types=None, count=None, progress=0, logstream=None,
 *              condition=None, slice_args=None, verbose=False, cache=False,
 *              cachedir=None, skip_cached=False):             # <<<<<<<<<<<<<<
 *     """
 *     Load a numpy 1-dimensional structured array with data from the sample
 */
    values[17] = ((PyObject *)Py_None);
    values[18] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exclude_fields);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtypes);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_types);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_progress);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logstream);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slice_args);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cache);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cachedir);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_cached);
          if (value) { values[18] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calldata") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vcf_fn = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = values[2];
    __pyx_v_ploidy = values[3];
    __pyx_v_fields = values[4];
    __pyx_v_exclude_fields = values[5];
    __pyx_v_dtypes = values[6];
    __pyx_v_arities = values[7];
    __pyx_v_fills = values[8];
    __pyx_v_vcf_types = values[9];
    __pyx_v_count = values[10];
    __pyx_v_progress = values[11];
    __pyx_v_logstream = values[12];
    __pyx_v_condition = values[13];
    __pyx_v_slice_args = values[14];
    __pyx_v_verbose = values[15];
    __pyx_v_cache = values[16];
    __pyx_v_cachedir = values[17];
    __pyx_v_skip_cached = values[18];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calldata", 0, 1, 19, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.calldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_43calldata(__pyx_self, __pyx_v_vcf_fn, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fields, __pyx_v_exclude_fields, __pyx_v_dtypes, __pyx_v_arities, __pyx_v_fills, __pyx_v_vcf_types, __pyx_v_count, __pyx_v_progress, __pyx_v_logstream, __pyx_v_condition, __pyx_v_slice_args, __pyx_v_verbose, __pyx_v_cache, __pyx_v_cachedir, __pyx_v_skip_cached);

  /* "vcfnp.pyx":1161
 * 
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,             # <<<<<<<<<<<<<<
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_43calldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_dtypes, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_vcf_types, PyObject *__pyx_v_count, PyObject *__pyx_v_progress, PyObject *__pyx_v_logstream, PyObject *__pyx_v_condition, PyObject *__pyx_v_slice_args, PyObject *__pyx_v_verbose, PyObject *__pyx_v_cache, PyObject *__pyx_v_cachedir, PyObject *__pyx_v_skip_cached) {
  PyObject *__pyx_v_loader = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calldata", 0);

  /* "vcfnp.pyx":1312
 *     """
 * 
 *     loader = _CalldataLoader(vcf_fn, region=region, samples=samples,             # <<<<<<<<<<<<<<
 *                              ploidy=ploidy, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_CalldataLoader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_vcf_fn);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_vcf_fn);
  __Pyx_GIVEREF(__pyx_v_vcf_fn);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_region, __pyx_v_region) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_samples, __pyx_v_samples) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1313
 * 
 *     loader = _CalldataLoader(vcf_fn, region=region, samples=samples,
 *                              ploidy=ploidy, fields=fields,             # <<<<<<<<<<<<<<
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills, vcf_types=vcf_types,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ploidy, __pyx_v_ploidy) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fields, __pyx_v_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1314
 *     loader = _CalldataLoader(vcf_fn, region=region, samples=samples,
 *                              ploidy=ploidy, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,             # <<<<<<<<<<<<<<
 *                              arities=arities, fills=fills, vcf_types=vcf_types,
 *                              count=count, progress=progress,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_exclude_fields, __pyx_v_exclude_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtypes, __pyx_v_dtypes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1315
 *                              ploidy=ploidy, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills, vcf_types=vcf_types,             # <<<<<<<<<<<<<<
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_arities, __pyx_v_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fills, __pyx_v_fills) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_vcf_types, __pyx_v_vcf_types) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1316
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 *                              arities=arities, fills=fills, vcf_types=vcf_types,
 *                              count=count, progress=progress,             # <<<<<<<<<<<<<<
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args, verbose=verbose,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_count, __pyx_v_count) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_progress, __pyx_v_progress) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1317
 *                              arities=arities, fills=fills, vcf_types=vcf_types,
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,             # <<<<<<<<<<<<<<
 *                              slice_args=slice_args, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_logstream, __pyx_v_logstream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_condition, __pyx_v_condition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1318
 *                              count=count, progress=progress,
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args, verbose=verbose,             # <<<<<<<<<<<<<<
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_slice_args, __pyx_v_slice_args) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_verbose, __pyx_v_verbose) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1319
 *                              logstream=logstream, condition=condition,
 *                              slice_args=slice_args, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,             # <<<<<<<<<<<<<<
 *                              skip_cached=skip_cached)
 *     arr = loader.load()
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_cache, __pyx_v_cache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_cachedir, __pyx_v_cachedir) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1320
 *                              slice_args=slice_args, verbose=verbose,
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)             # <<<<<<<<<<<<<<
 *     arr = loader.load()
 *     return arr
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_skip_cached, __pyx_v_skip_cached) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1312
 *     """
 * 
 *     loader = _CalldataLoader(vcf_fn, region=region, samples=samples,             # <<<<<<<<<<<<<<
 *                              ploidy=ploidy, fields=fields,
 *                              exclude_fields=exclude_fields, dtypes=dtypes,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_loader = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":1321
 *                              cache=cache, cachedir=cachedir,
 *                              skip_cached=skip_cached)
 *     arr = loader.load()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_loader, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_arr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":1322
 *                              skip_cached=skip_cached)
 *     arr = loader.load()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "vcfnp.pyx":1161
 * 
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,             # <<<<<<<<<<<<<<
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.calldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_loader);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1329
 *     array_type = 'calldata_2d'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         arr = super().build()
 *         return view2d(arr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_17_Calldata2DLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_17_Calldata2DLoader_build[] = "_Calldata2DLoader.build(self)";
static PyMethodDef __pyx_mdef_5vcfnp_17_Calldata2DLoader_1build = {"build", (PyCFunction)__pyx_pw_5vcfnp_17_Calldata2DLoader_1build, METH_O, __pyx_doc_5vcfnp_17_Calldata2DLoader_build};
static PyObject *__pyx_pw_5vcfnp_17_Calldata2DLoader_1build(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_17_Calldata2DLoader_build(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_17_Calldata2DLoader_build(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);

  /* "vcfnp.pyx":1330
 * 
 *     def build(self):
 *         arr = super().build()             # <<<<<<<<<<<<<<
 *         return view2d(arr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_build); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_arr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1331
 *     def build(self):
 *         arr = super().build()
 *         return view2d(arr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_view2d); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_arr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_arr);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_arr);
    __Pyx_GIVEREF(__pyx_v_arr);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1329
 *     array_type = 'calldata_2d'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         arr = super().build()
 *         return view2d(arr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp._Calldata2DLoader.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1334
 * 
 * 
 * def calldata_2d(vcf_fn, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     Load a numpy 2-dimensional structured array with data from the sample
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_46calldata_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_45calldata_2d[] = "calldata_2d(vcf_fn, **kwargs)\n\n    Load a numpy 2-dimensional structured array with data from the sample\n    columns of a VCF file. Convenience function, equivalent to calldata()\n    followed by view2d().\n\n    Parameters\n    ----------\n\n    vcf_fn: string or list\n        Name of the VCF file or list of file names.\n    region: string\n        Region to extract, e.g., 'chr1' or 'chr1:0-100000'.\n    fields: list or array-like\n        List of fields to extract from the VCF.\n    exclude_fields: list or array-like\n        Fields to exclude from extraction.\n    dtypes: dict or dict-like\n        Dictionary cotaining dtypes to use instead of the default inferred ones.\n    arities: dict or dict-like\n        Override the amount of values to expect\n    fills: dict or dict-like\n        Dictionary containing field:fillvalue mappings used to override the\n        default fill in values in VCF fields.\n    vcf_types: dict or dict-like\n        Dictionary containing field:string mappings used to override any\n        bogus type declarations in the VCF header.\n    count: int\n        Attempt to extract a specific number of records.\n    progress: int\n        If greater than 0, log parsing progress.\n    logstream: file or file-like object\n        Stream to use for logging progress.\n    condition: array\n        Boolean array defining which rows to load.\n    slice_args: tuple or list\n        Slice of the underlying iterator, e.g., (0, 1000, 10) takes every\n        10th row from the first 1000.\n    verbose: bool\n        Log more messages.\n    cache: bool\n        If True, save the resulting numpy array to disk, and load from the\n        cache if present rather than rebuilding from the VCF.\n    cachedir: string\n        Manually specify the directory to use to store cache files.\n    skip_cached: bool\n        If True and cache file is fresh, do not load and return None.\n\n    ";
static PyMethodDef __pyx_mdef_5vcfnp_46calldata_2d = {"calldata_2d", (PyCFunction)__pyx_pw_5vcfnp_46calldata_2d, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_45calldata_2d};
static PyObject *__pyx_pw_5vcfnp_46calldata_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fn = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calldata_2d (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fn,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "calldata_2d") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_vcf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calldata_2d", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("vcfnp.calldata_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_45calldata_2d(__pyx_self, __pyx_v_vcf_fn, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_45calldata_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fn, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_loader = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calldata_2d", 0);

  /* "vcfnp.pyx":1384
 *     """
 * 
 *     loader = _Calldata2DLoader(vcf_fn, **kwargs)             # <<<<<<<<<<<<<<
 *     arr = loader.load()
 *     return arr
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Calldata2DLoader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_vcf_fn);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_vcf_fn);
  __Pyx_GIVEREF(__pyx_v_vcf_fn);
  __pyx_t_3 = __pyx_v_kwargs;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_loader = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":1385
 * 
 *     loader = _Calldata2DLoader(vcf_fn, **kwargs)
 *     arr = loader.load()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_loader, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_arr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "vcfnp.pyx":1386
 *     loader = _Calldata2DLoader(vcf_fn, **kwargs)
 *     arr = loader.load()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "vcfnp.pyx":1334
 * 
 * 
 * def calldata_2d(vcf_fn, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     Load a numpy 2-dimensional structured array with data from the sample
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.calldata_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_loader);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_49generator3(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1389
 * 
 * 
 * def _itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_48_itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_47_itercalldata[] = "_itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec)";
static PyMethodDef __pyx_mdef_5vcfnp_48_itercalldata = {"_itercalldata", (PyCFunction)__pyx_pw_5vcfnp_48_itercalldata, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_47_itercalldata};
static PyObject *__pyx_pw_5vcfnp_48_itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  int __pyx_v_ploidy;
  PyObject *__pyx_v_fieldspec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fieldspec,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itercalldata") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = ((PyObject*)values[2]);
    __pyx_v_ploidy = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_ploidy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_fieldspec = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_samples), (&PyTuple_Type), 1, "samples", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fieldspec), (&PyList_Type), 1, "fieldspec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5vcfnp_47_itercalldata(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fieldspec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_47_itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_itercalldata", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)__pyx_tp_new_5vcfnp___pyx_scope_struct_19__itercalldata(__pyx_ptype_5vcfnp___pyx_scope_struct_19__itercalldata, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_samples = __pyx_v_samples;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_samples);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_samples);
  __pyx_cur_scope->__pyx_v_ploidy = __pyx_v_ploidy;
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_49generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_itercalldata, __pyx_n_s_itercalldata); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_49generator3(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1393
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1394
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp.pyx":1395
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);

    /* "vcfnp.pyx":1396
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = True
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = 0;

    /* "vcfnp.pyx":1397
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 1;

    /* "vcfnp.pyx":1398
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "vcfnp.pyx":1399
 *         variant_file.parseSamples = True
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_cur_scope->__pyx_v_region_set = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);

      /* "vcfnp.pyx":1400
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_8 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_8) {

        /* "vcfnp.pyx":1401
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":1402
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while _get_next_variant(variant_file, variant):
 */
    __pyx_cur_scope->__pyx_v_variant = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));

    /* "vcfnp.pyx":1404
 *         variant = new Variant(deref(variant_file))
 * 
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)
 * 
 */
    while (1) {
      __pyx_t_8 = (__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0);
      if (!__pyx_t_8) break;

      /* "vcfnp.pyx":1405
 * 
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_t_4 = __pyx_f_5vcfnp__mkcrow(__pyx_cur_scope->__pyx_v_variant, __pyx_cur_scope->__pyx_v_samples, __pyx_cur_scope->__pyx_v_ploidy, __pyx_cur_scope->__pyx_v_fieldspec); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "vcfnp.pyx":1407
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp.pyx":1408
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp.pyx":1393
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1389
 * 
 * 
 * def _itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_52generator4(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1411
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy,             # <<<<<<<<<<<<<<
 *                                  list fieldspec, condition):
 *     cdef VariantCallFile *variant_file
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_51_itercalldata_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_50_itercalldata_with_condition[] = "_itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy, list fieldspec, condition)";
static PyMethodDef __pyx_mdef_5vcfnp_51_itercalldata_with_condition = {"_itercalldata_with_condition", (PyCFunction)__pyx_pw_5vcfnp_51_itercalldata_with_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_50_itercalldata_with_condition};
static PyObject *__pyx_pw_5vcfnp_51_itercalldata_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  int __pyx_v_ploidy;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_condition = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata_with_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fieldspec,&__pyx_n_s_condition,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itercalldata_with_condition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = ((PyObject*)values[2]);
    __pyx_v_ploidy = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_ploidy == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_fieldspec = ((PyObject*)values[4]);
    __pyx_v_condition = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_samples), (&PyTuple_Type), 1, "samples", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fieldspec), (&PyList_Type), 1, "fieldspec", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5vcfnp_50_itercalldata_with_condition(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fieldspec, __pyx_v_condition);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_50_itercalldata_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_condition) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_itercalldata_with_condition", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)__pyx_tp_new_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(__pyx_ptype_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_samples = __pyx_v_samples;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_samples);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_samples);
  __pyx_cur_scope->__pyx_v_ploidy = __pyx_v_ploidy;
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_condition = __pyx_v_condition;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_condition);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_condition);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_52generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_itercalldata_with_condition, __pyx_n_s_itercalldata_with_condition); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_52generator4(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1415
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 *     cdef long i = 0             # <<<<<<<<<<<<<<
 *     cdef long n = len(condition)
 * 
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "vcfnp.pyx":1416
 *     cdef Variant *variant
 *     cdef long i = 0
 *     cdef long n = len(condition)             # <<<<<<<<<<<<<<
 * 
 *     for vcf_fn in vcf_fns:
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_condition); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_v_n = __pyx_t_1;

  /* "vcfnp.pyx":1418
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1419
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp.pyx":1420
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);

    /* "vcfnp.pyx":1421
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = 0;

    /* "vcfnp.pyx":1422
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp.pyx":1423
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "vcfnp.pyx":1424
 *         variant_file.parseSamples = False
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_cur_scope->__pyx_v_region_set = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);

      /* "vcfnp.pyx":1425
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_8 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_8) {

        /* "vcfnp.pyx":1426
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":1427
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while i < n:
 */
    __pyx_cur_scope->__pyx_v_variant = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));

    /* "vcfnp.pyx":1429
 *         variant = new Variant(deref(variant_file))
 * 
 *         while i < n:             # <<<<<<<<<<<<<<
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:
 */
    while (1) {
      __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_i < __pyx_cur_scope->__pyx_v_n) != 0);
      if (!__pyx_t_8) break;

      /* "vcfnp.pyx":1431
 *         while i < n:
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_condition, __pyx_cur_scope->__pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {

        /* "vcfnp.pyx":1432
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:
 *                 variant_file.parseSamples = True             # <<<<<<<<<<<<<<
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 */
        __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 1;

        /* "vcfnp.pyx":1433
 *             if condition[i]:
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 */
        __pyx_t_8 = ((!(__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0)) != 0);
        if (__pyx_t_8) {

          /* "vcfnp.pyx":1434
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):
 *                     break             # <<<<<<<<<<<<<<
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 *             else:
 */
          goto __pyx_L9_break;
        }

        /* "vcfnp.pyx":1435
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)             # <<<<<<<<<<<<<<
 *             else:
 *                 variant_file.parseSamples = False
 */
        __pyx_t_4 = __pyx_f_5vcfnp__mkcrow(__pyx_cur_scope->__pyx_v_variant, __pyx_cur_scope->__pyx_v_samples, __pyx_cur_scope->__pyx_v_ploidy, __pyx_cur_scope->__pyx_v_fieldspec); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L12_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      /*else*/ {

        /* "vcfnp.pyx":1437
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 *             else:
 *                 variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 */
        __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

        /* "vcfnp.pyx":1438
 *             else:
 *                 variant_file.parseSamples = False
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *             i += 1
 */
        __pyx_t_8 = ((!(__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0)) != 0);
        if (__pyx_t_8) {

          /* "vcfnp.pyx":1439
 *                 variant_file.parseSamples = False
 *                 if not _get_next_variant(variant_file, variant):
 *                     break             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
          goto __pyx_L9_break;
        }
      }
      __pyx_L10:;

      /* "vcfnp.pyx":1440
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);
    }
    __pyx_L9_break:;

    /* "vcfnp.pyx":1442
 *             i += 1
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp.pyx":1443
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp.pyx":1418
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1411
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy,             # <<<<<<<<<<<<<<
 *                                  list fieldspec, condition):
 *     cdef VariantCallFile *variant_file
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1446
 * 
 * 
 * cdef inline object _mkcrow(Variant *variant,             # <<<<<<<<<<<<<<
 *                              tuple samples,
 *                              int ploidy,
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkcrow", 0);

  /* "vcfnp.pyx":1450
 *                              int ploidy,
 *                              list fieldspec):
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_samples == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_convert_string_from_py_std__string(__pyx_v_s); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __pyx_f_5vcfnp__mkcvals(__pyx_v_variant, __pyx_t_5, __pyx_v_ploidy, __pyx_v_fieldspec); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1451
 *                              list fieldspec):
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1446
 * 
 * 
 * cdef inline object _mkcrow(Variant *variant,             # <<<<<<<<<<<<<<
 *                              tuple samples,
 *                              int ploidy,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp._mkcrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1454
 * 
 * 
 * cdef inline object _mkcvals(Variant *variant,             # <<<<<<<<<<<<<<
 *                             string sample,
 *                             int ploidy,
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcvals(vcf::Variant *__pyx_v_variant, std::string __pyx_v_sample, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_fill = NULL;
  PyObject *__pyx_v_format_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkcvals", 0);

  /* "vcfnp.pyx":1458
 *                             int ploidy,
 *                             list fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)             # <<<<<<<<<<<<<<
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "vcfnp.pyx":1459
 *                             list fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  if (unlikely(__pyx_v_fieldspec == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_fieldspec; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fill, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_format_type, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp.pyx":1458
 *                             int ploidy,
 *                             list fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)             # <<<<<<<<<<<<<<
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__string(__pyx_v_f); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_format_type); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __pyx_f_5vcfnp__mkcval((__pyx_v_variant->samples[__pyx_v_sample]), __pyx_v_ploidy, __pyx_t_11, __pyx_t_12, __pyx_v_fill, __pyx_t_13); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vcfnp.pyx":1459
 *                             list fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1460
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1454
 * 
 * 
 * cdef inline object _mkcvals(Variant *variant,             # <<<<<<<<<<<<<<
 *                             string sample,
 *                             int ploidy,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp._mkcvals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_fill);
  __Pyx_XDECREF(__pyx_v_format_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1463
 * 
 * 
 * cdef inline object _mkcval(map[string, vector[string]]& sample_data,             # <<<<<<<<<<<<<<
 *                            int ploidy,
 *                            string field,
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkcval(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data, int __pyx_v_ploidy, std::string __pyx_v_field, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_format_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkcval", 0);

  /* "vcfnp.pyx":1469
 *                            object fill,
 *                            int format_type):
 *     if field == FIELD_NAME_IS_CALLED:             # <<<<<<<<<<<<<<
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_IS_CALLED) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1470
 *                            int format_type):
 *     if field == FIELD_NAME_IS_CALLED:
 *         return _is_called(sample_data)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_f_5vcfnp__is_called(__pyx_v_sample_data)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1471
 *     if field == FIELD_NAME_IS_CALLED:
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:             # <<<<<<<<<<<<<<
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_IS_PHASED) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1472
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_GENOTYPE:
 *         return _genotype(sample_data, ploidy)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_f_5vcfnp__is_phased(__pyx_v_sample_data)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1473
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:             # <<<<<<<<<<<<<<
 *         return _genotype(sample_data, ploidy)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_GENOTYPE) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1474
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:
 *         return _genotype(sample_data, ploidy)             # <<<<<<<<<<<<<<
 *     else:
 *         return _mkval(sample_data[field], arity, fill, format_type)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp__genotype(__pyx_v_sample_data, __pyx_v_ploidy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":1476
 *         return _genotype(sample_data, ploidy)
 *     else:
 *         return _mkval(sample_data[field], arity, fill, format_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp__mkval((__pyx_v_sample_data[__pyx_v_field]), __pyx_v_arity, __pyx_v_fill, __pyx_v_format_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1463
 * 
 * 
 * cdef inline object _mkcval(map[string, vector[string]]& sample_data,             # <<<<<<<<<<<<<<
 *                            int ploidy,
 *                            string field,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp._mkcval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1479
 * 
 * 
 * cdef inline bool _is_called(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

static CYTHON_INLINE bool __pyx_f_5vcfnp__is_called(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data) {
  std::vector<std::string>  *__pyx_v_gts;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_called", 0);

  /* "vcfnp.pyx":1481
 * cdef inline bool _is_called(map[string, vector[string]]& sample_data):
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         return False
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_FIELD_NAME_GT]));

  /* "vcfnp.pyx":1482
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1483
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return gts.at(0).find('.') == npos
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":1485
 *         return False
 *     else:
 *         return gts.at(0).find('.') == npos             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_kp_b__19); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = (__pyx_v_gts->at(0).find(__pyx_t_2) == __pyx_v_5vcfnp_npos);
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1479
 * 
 * 
 * cdef inline bool _is_called(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("vcfnp._is_called", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1488
 * 
 * 
 * cdef inline bool _is_phased(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

static CYTHON_INLINE bool __pyx_f_5vcfnp__is_phased(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data) {
  std::vector<std::string>  *__pyx_v_gts;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_phased", 0);

  /* "vcfnp.pyx":1490
 * cdef inline bool _is_phased(map[string, vector[string]]& sample_data):
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         return False
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_FIELD_NAME_GT]));

  /* "vcfnp.pyx":1491
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1492
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return gts.at(0).find('|') != npos
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":1494
 *         return False
 *     else:
 *         return gts.at(0).find('|') != npos             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_kp_b__20); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = (__pyx_v_gts->at(0).find(__pyx_t_2) != __pyx_v_5vcfnp_npos);
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1488
 * 
 * 
 * cdef inline bool _is_phased(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("vcfnp._is_phased", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1497
 * 
 * 
 * cdef inline object _genotype(map[string, vector[string]]& sample_data,             # <<<<<<<<<<<<<<
 *                              int ploidy):
 *     cdef vector[string] *gts
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__genotype(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data, int __pyx_v_ploidy) {
  std::vector<std::string>  *__pyx_v_gts;
  std::vector<int>  __pyx_v_alleles;
  std::vector<std::string>  __pyx_v_allele_strings;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_genotype", 0);

  /* "vcfnp.pyx":1504
 *     cdef int i
 *     cdef int allele
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         if ploidy == 1:
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_FIELD_NAME_GT]));

  /* "vcfnp.pyx":1505
 *     cdef int allele
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         if ploidy == 1:
 *             return -1
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp.pyx":1506
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_ploidy == 1) != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":1507
 *     if gts.size() == 0:
 *         if ploidy == 1:
 *             return -1             # <<<<<<<<<<<<<<
 *         else:
 *             return (-1,) * ploidy
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_r = __pyx_int_neg_1;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "vcfnp.pyx":1509
 *             return -1
 *         else:
 *             return (-1,) * ploidy             # <<<<<<<<<<<<<<
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ploidy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__21, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "vcfnp.pyx":1511
 *             return (-1,) * ploidy
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)             # <<<<<<<<<<<<<<
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:
 */
    split(__pyx_v_gts->at(0), __pyx_v_5vcfnp_GT_DELIMS, __pyx_v_allele_strings);

    /* "vcfnp.pyx":1512
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             if allele_strings.size() > 0:
 *                 if allele_strings.at(0) == DOT:
 */
    __pyx_t_1 = ((__pyx_v_ploidy == 1) != 0);
    if (__pyx_t_1) {

      /* "vcfnp.pyx":1513
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:             # <<<<<<<<<<<<<<
 *                 if allele_strings.at(0) == DOT:
 *                     return -1
 */
      __pyx_t_1 = ((__pyx_v_allele_strings.size() > 0) != 0);
      if (__pyx_t_1) {

        /* "vcfnp.pyx":1514
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:
 *                 if allele_strings.at(0) == DOT:             # <<<<<<<<<<<<<<
 *                     return -1
 *                 else:
 */
        __pyx_t_1 = ((__pyx_v_allele_strings.at(0) == __pyx_v_5vcfnp_DOT) != 0);
        if (__pyx_t_1) {

          /* "vcfnp.pyx":1515
 *             if allele_strings.size() > 0:
 *                 if allele_strings.at(0) == DOT:
 *                     return -1             # <<<<<<<<<<<<<<
 *                 else:
 *                     return atoi(allele_strings.at(0).c_str())
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_int_neg_1);
          __pyx_r = __pyx_int_neg_1;
          goto __pyx_L0;
        }
        /*else*/ {

          /* "vcfnp.pyx":1517
 *                     return -1
 *                 else:
 *                     return atoi(allele_strings.at(0).c_str())             # <<<<<<<<<<<<<<
 *             else:
 *                 return -1
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_3 = __Pyx_PyInt_From_int(atoi(__pyx_v_allele_strings.at(0).c_str())); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_r = __pyx_t_3;
          __pyx_t_3 = 0;
          goto __pyx_L0;
        }
      }
      /*else*/ {

        /* "vcfnp.pyx":1519
 *                     return atoi(allele_strings.at(0).c_str())
 *             else:
 *                 return -1             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(ploidy):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_int_neg_1);
        __pyx_r = __pyx_int_neg_1;
        goto __pyx_L0;
      }
    }
    /*else*/ {

      /* "vcfnp.pyx":1521
 *                 return -1
 *         else:
 *             for i in range(ploidy):             # <<<<<<<<<<<<<<
 *                 if i < allele_strings.size():
 *                     if allele_strings.at(i) == DOT:
 */
      __pyx_t_4 = __pyx_v_ploidy;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "vcfnp.pyx":1522
 *         else:
 *             for i in range(ploidy):
 *                 if i < allele_strings.size():             # <<<<<<<<<<<<<<
 *                     if allele_strings.at(i) == DOT:
 *                         alleles.push_back(-1)
 */
        __pyx_t_1 = ((__pyx_v_i < __pyx_v_allele_strings.size()) != 0);
        if (__pyx_t_1) {

          /* "vcfnp.pyx":1523
 *             for i in range(ploidy):
 *                 if i < allele_strings.size():
 *                     if allele_strings.at(i) == DOT:             # <<<<<<<<<<<<<<
 *                         alleles.push_back(-1)
 *                     else:
 */
          __pyx_t_1 = ((__pyx_v_allele_strings.at(__pyx_v_i) == __pyx_v_5vcfnp_DOT) != 0);
          if (__pyx_t_1) {

            /* "vcfnp.pyx":1524
 *                 if i < allele_strings.size():
 *                     if allele_strings.at(i) == DOT:
 *                         alleles.push_back(-1)             # <<<<<<<<<<<<<<
 *                     else:
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))
 */
            __pyx_v_alleles.push_back(-1);
            goto __pyx_L11;
          }
          /*else*/ {

            /* "vcfnp.pyx":1526
 *                         alleles.push_back(-1)
 *                     else:
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))             # <<<<<<<<<<<<<<
 *                 else:
 *                     alleles.push_back(-1)
 */
            __pyx_v_alleles.push_back(atoi(__pyx_v_allele_strings.at(__pyx_v_i).c_str()));
          }
          __pyx_L11:;
          goto __pyx_L10;
        }
        /*else*/ {

          /* "vcfnp.pyx":1528
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))
 *                 else:
 *                     alleles.push_back(-1)             # <<<<<<<<<<<<<<
 *             return tuple(alleles)
 * 
 */
          __pyx_v_alleles.push_back(-1);
        }
        __pyx_L10:;
      }

      /* "vcfnp.pyx":1529
 *                 else:
 *                     alleles.push_back(-1)
 *             return tuple(alleles)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_alleles); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }
  }

  /* "vcfnp.pyx":1497
 * 
 * 
 * cdef inline object _genotype(map[string, vector[string]]& sample_data,             # <<<<<<<<<<<<<<
 *                              int ploidy):
 *     cdef vector[string] *gts
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp._genotype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1532
 * 
 * 
 * def view2d(a):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to view a structured 1D array where all fields have a
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_54view2d(PyObject *__pyx_self, PyObject *__pyx_v_a); /*proto*/
static char __pyx_doc_5vcfnp_53view2d[] = "view2d(a)\n\n    Utility function to view a structured 1D array where all fields have a\n    uniform dtype (e.g., an array constructed by :func:calldata) as a 2D array.\n\n    Parameters\n    ----------\n\n    a: numpy array or array-like\n        The array to be viewed as 2D, must have a uniform dtype\n\n    Returns\n    -------\n\n    A 2D view of the array.\n\n    Examples\n    --------\n\n        >>> from vcfnp import calldata\n        >>> a = calldata('sample.vcf')\n        >>> a\n        array([ ((True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, False, [0, 1], '0/1', 0, 0, [3, 3])),\n               ((True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, True, [0, 0], '0|0', 0, 0, [10, 10]), (True, False, [0, 1], '0/1', 0, 0, [3, 3])),\n               ((True, True, [0, 0], '0|0', 48, 1, [51, 51]), (True, True, [1, 0], '1|0', 48, 8, [51, 51]), (True, False, [1, 1], '1/1', 43, 5, [0, 0])),\n               ((True, True, [0, 0], '0|0', 49, 3, [58, 50]), (True, True, [0, 1], '0|1', 3, 5, [65, 3]), (True, False, [0, 0], '0/0', 41, 3, [0, 0])),\n               ((True, True, [1, 2], '1|2', 21, 6, [23, 27]), (True, True, [2, 1], '2|1', 2, 0, [18, 2]), (True, False, [2, 2], '2/2', 35, 4, [0, 0])),\n               ((True, True, [0, 0], '0|0', 54, 0, [56, 60]), (True, True, [0, 0], '0|0', 48, 4, [51, 51]), (True, False, [0, 0], '0/0', 61, 2, [0, 0])),\n               ((True, False, [0, 1], '0/1', 0, 4, [0, 0]), (True, False, [0, 2], '0/2', 17, 2, [0, 0]), (True, False, [1, 1], '1/1', 40, 3, [0, 0])),\n               ((True, False, [0, 0], '0/0', 0, 0, [0, 0]), (True, True, [0, 0], '0|0', 0, 0, [0, 0]), (False, False, [-1, -1], './.', 0, 0, [0, 0])),\n               ((True, False, [0, -1], '0', 0, 0, [0, 0]), (True, False, [0, 1], '0/1', 0, 0, [0, 0]), (True, True, [0, 2], '0|2', 0, 0, [0, 0]))],\n              dtype=[('NA00001', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ""('DP', '<u2'), ('HQ', '<i4', (2,))]), ('NA00002', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))]), ('NA00003', [('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))])])\n        >>> from vcfnp import view2d\n        >>> b = view2d(a)\n        >>> b\n        array([[(True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, False, [0, 1], '0/1', 0, 0, [3, 3])],\n               [(True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, True, [0, 0], '0|0', 0, 0, [10, 10]),\n                (True, False, [0, 1], '0/1', 0, 0, [3, 3])],\n               [(True, True, [0, 0], '0|0', 48, 1, [51, 51]),\n                (True, True, [1, 0], '1|0', 48, 8, [51, 51]),\n                (True, False, [1, 1], '1/1', 43, 5, [0, 0])],\n               [(True, True, [0, 0], '0|0', 49, 3, [58, 50]),\n                (True, True, [0, 1], '0|1', 3, 5, [65, 3]),\n                (True, False, [0, 0], '0/0', 41, 3, [0, 0])],\n               [(True, True, [1, 2], '1|2', 21, 6, [23, 27]),\n                (True, True, [2, 1], '2|1', 2, 0, [18, 2]),\n                (True, False, [2, 2], '2/2', 35, 4, [0, 0])],\n               [(True, True, [0, 0], '0|0', 54, 0, [56, 60]),\n                (True, True, [0, 0], '0|0', 48, 4, [51, 51]),\n                (True, False, [0, 0], '0/0', 61, 2, [0, 0])],\n               [(True, False, [0, 1], '0/1', 0, 4, [0, 0]),\n                (True, False, [0, 2], '0/2', 17, 2, [0, 0]),\n                (True, False, [1, 1], '1/1', 40, 3, [0, 0])],\n               [(True, False, [0, 0], '0/0', 0, 0, [0, 0]),\n                (True, True, [0, 0], '0|0', 0, 0, [0, 0]),\n                (False, False, [-1, -1], './.', 0, 0, [0, 0])],\n               [(True, False, [0, -1], '0', 0, 0, [0, 0]),\n                (Tru""e, False, [0, 1], '0/1', 0, 0, [0, 0]),\n                (True, True, [0, 2], '0|2', 0, 0, [0, 0])]],\n              dtype=[('is_called', '|b1'), ('is_phased', '|b1'), ('genotype', '|i1', (2,)), ('GT', '|S3'), ('GQ', '|u1'), ('DP', '<u2'), ('HQ', '<i4', (2,))])\n        >>> b['GT']\n        array([['0|0', '0|0', '0/1'],\n               ['0|0', '0|0', '0/1'],\n               ['0|0', '1|0', '1/1'],\n               ['0|0', '0|1', '0/0'],\n               ['1|2', '2|1', '2/2'],\n               ['0|0', '0|0', '0/0'],\n               ['0/1', '0/2', '1/1'],\n               ['0/0', '0|0', './.'],\n               ['0', '0/1', '0|2']],\n              dtype='|S3')\n\n    ";
static PyMethodDef __pyx_mdef_5vcfnp_54view2d = {"view2d", (PyCFunction)__pyx_pw_5vcfnp_54view2d, METH_O, __pyx_doc_5vcfnp_53view2d};
static PyObject *__pyx_pw_5vcfnp_54view2d(PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("view2d (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_53view2d(__pyx_self, ((PyObject *)__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_53view2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_rows = NULL;
  Py_ssize_t __pyx_v_cols;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("view2d", 0);

  /* "vcfnp.pyx":1609
 *     """
 * 
 *     rows = a.size             # <<<<<<<<<<<<<<
 *     cols = len(a.dtype)
 *     dtype = a.dtype[0]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rows = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1610
 * 
 *     rows = a.size
 *     cols = len(a.dtype)             # <<<<<<<<<<<<<<
 *     dtype = a.dtype[0]
 *     b = a.view(dtype).reshape(rows, cols)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cols = __pyx_t_2;

  /* "vcfnp.pyx":1611
 *     rows = a.size
 *     cols = len(a.dtype)
 *     dtype = a.dtype[0]             # <<<<<<<<<<<<<<
 *     b = a.view(dtype).reshape(rows, cols)
 *     return b
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1611; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dtype = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1612
 *     cols = len(a.dtype)
 *     dtype = a.dtype[0]
 *     b = a.view(dtype).reshape(rows, cols)             # <<<<<<<<<<<<<<
 *     return b
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_view); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_dtype);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_dtype);
    __Pyx_GIVEREF(__pyx_v_dtype);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_cols); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  __pyx_t_2 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_2 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_6) {
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_INCREF(__pyx_v_rows);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_2, __pyx_v_rows);
  __Pyx_GIVEREF(__pyx_v_rows);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_b = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1613
 *     dtype = a.dtype[0]
 *     b = a.view(dtype).reshape(rows, cols)
 *     return b             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_b);
  __pyx_r = __pyx_v_b;
  goto __pyx_L0;

  /* "vcfnp.pyx":1532
 * 
 * 
 * def view2d(a):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to view a structured 1D array where all fields have a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("vcfnp.view2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rows);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_56eff_default_transformer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_55eff_default_transformer[] = "eff_default_transformer(fills=EFF_DEFAULT_FILLS)\n\n    Return a simple transformer function for parsing EFF annotations. N.B.,\n    ignores all but the first effect.\n\n    ";
static PyMethodDef __pyx_mdef_5vcfnp_56eff_default_transformer = {"eff_default_transformer", (PyCFunction)__pyx_pw_5vcfnp_56eff_default_transformer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_55eff_default_transformer};
static PyObject *__pyx_pw_5vcfnp_56eff_default_transformer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fills = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eff_default_transformer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fills,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__22;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eff_default_transformer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fills = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eff_default_transformer", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.eff_default_transformer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_55eff_default_transformer(__pyx_self, __pyx_v_fills);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_23eff_default_transformer_1_transformer(PyObject *__pyx_self, PyObject *__pyx_v_vals); /*proto*/
static PyMethodDef __pyx_mdef_5vcfnp_23eff_default_transformer_1_transformer = {"_transformer", (PyCFunction)__pyx_pw_5vcfnp_23eff_default_transformer_1_transformer, METH_O, 0};
static PyObject *__pyx_pw_5vcfnp_23eff_default_transformer_1_transformer(PyObject *__pyx_self, PyObject *__pyx_v_vals) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_transformer (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_23eff_default_transformer__transformer(__pyx_self, ((PyObject *)__pyx_v_vals));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_23eff_default_transformer_12_transformer_2generator15(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1652
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 *                 fill if v == ''             # <<<<<<<<<<<<<<
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8
 */

static PyObject *__pyx_pf_5vcfnp_23eff_default_transformer_12_transformer_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_23_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_23_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_23eff_default_transformer_12_transformer_2generator15, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_eff_default_transformer_locals); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.eff_default_transformer._transformer.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_23eff_default_transformer_12_transformer_2generator15(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;

  /* "vcfnp.pyx":1656
 *                 else (1 if v == 'CODING' else 0) if i == 8
 *                 else v
 *                 for i, (v, fill) in enumerate(zip(eff, fills)[:11])             # <<<<<<<<<<<<<<
 *             )
 *             return result
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_eff)) { __Pyx_RaiseClosureNameError("eff"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_fills)) { __Pyx_RaiseClosureNameError("fills"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_eff);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_eff);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_eff);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_fills);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_fills);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 11, NULL, NULL, &__pyx_slice__23, 0, 1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fill);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fill, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":1652
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 *                 fill if v == ''             # <<<<<<<<<<<<<<
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_v, __pyx_kp_s__24, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_fill;
    } else {

      /* "vcfnp.pyx":1653
 *             result = tuple(
 *                 fill if v == ''
 *                 else int(v) if i == 5 or i == 10             # <<<<<<<<<<<<<<
 *                 else (1 if v == 'CODING' else 0) if i == 8
 *                 else v
 */
      __pyx_t_6 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_i, __pyx_int_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!__pyx_t_12) {
      } else {
        __pyx_t_11 = __pyx_t_12;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_6 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_i, __pyx_int_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_11 = __pyx_t_12;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_11) {
        __pyx_t_6 = PyNumber_Int(__pyx_cur_scope->__pyx_v_v); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_t_6;
        __pyx_t_6 = 0;
      } else {

        /* "vcfnp.pyx":1654
 *                 fill if v == ''
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8             # <<<<<<<<<<<<<<
 *                 else v
 *                 for i, (v, fill) in enumerate(zip(eff, fills)[:11])
 */
        __pyx_t_8 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_i, __pyx_int_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_12) {
          __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_v, __pyx_n_s_CODING, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          if (__pyx_t_13) {
            __Pyx_INCREF(__pyx_int_1);
            __pyx_t_8 = __pyx_int_1;
          } else {
            __Pyx_INCREF(__pyx_int_0);
            __pyx_t_8 = __pyx_int_0;
          }
          __pyx_t_6 = __pyx_t_8;
          __pyx_t_8 = 0;
        } else {

          /* "vcfnp.pyx":1656
 *                 else (1 if v == 'CODING' else 0) if i == 8
 *                 else v
 *                 for i, (v, fill) in enumerate(zip(eff, fills)[:11])             # <<<<<<<<<<<<<<
 *             )
 *             return result
 */
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_v);
          __pyx_t_6 = __pyx_cur_scope->__pyx_v_v;
        }
        __pyx_t_7 = __pyx_t_6;
        __pyx_t_6 = 0;
      }
      __pyx_t_2 = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __Pyx_XGIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L10_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1652
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 *                 fill if v == ''             # <<<<<<<<<<<<<<
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */

static PyObject *__pyx_pf_5vcfnp_23eff_default_transformer__transformer(PyObject *__pyx_self, PyObject *__pyx_v_vals) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *__pyx_cur_scope;
  PyObject *__pyx_v_match_eff_main = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_transformer", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)__pyx_tp_new_5vcfnp___pyx_scope_struct_22__transformer(__pyx_ptype_5vcfnp___pyx_scope_struct_22__transformer, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);

  /* "vcfnp.pyx":1645
 *     """
 *     def _transformer(vals):
 *         if len(vals) == 0:             # <<<<<<<<<<<<<<
 *             return fills
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vals); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":1646
 *     def _transformer(vals):
 *         if len(vals) == 0:
 *             return fills             # <<<<<<<<<<<<<<
 *         else:
 *             # ignore all but first effect
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills)) { __Pyx_RaiseClosureNameError("fills"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills);
    __pyx_r = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fills;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":1649
 *         else:
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])             # <<<<<<<<<<<<<<
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_prog_eff_main); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_match); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vals, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_match_eff_main = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp.pyx":1650
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')             # <<<<<<<<<<<<<<
 *             result = tuple(
 *                 fill if v == ''
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_eff_main, __pyx_n_s_group); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_eff_main, __pyx_n_s_group); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_eff = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "vcfnp.pyx":1652
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(
 *                 fill if v == ''             # <<<<<<<<<<<<<<
 *                 else int(v) if i == 5 or i == 10
 *                 else (1 if v == 'CODING' else 0) if i == 8
 */
    __pyx_t_5 = __pyx_pf_5vcfnp_23eff_default_transformer_12_transformer_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "vcfnp.pyx":1651
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             result = tuple(             # <<<<<<<<<<<<<<
 *                 fill if v == ''
 *                 else int(v) if i == 5 or i == 10
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_result = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "vcfnp.pyx":1658
 *                 for i, (v, fill) in enumerate(zip(eff, fills)[:11])
 *             )
 *             return result             # <<<<<<<<<<<<<<
 *     return _transformer
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp.eff_default_transformer._transformer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_match_eff_main);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */

static PyObject *__pyx_pf_5vcfnp_55eff_default_transformer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fills) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *__pyx_cur_scope;
  PyObject *__pyx_v__transformer = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eff_default_transformer", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)__pyx_tp_new_5vcfnp___pyx_scope_struct_21_eff_default_transformer(__pyx_ptype_5vcfnp___pyx_scope_struct_21_eff_default_transformer, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fills = __pyx_v_fills;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fills);

  /* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_23eff_default_transformer_1_transformer, 0, __pyx_n_s_eff_default_transformer_locals_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__transformer = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1659
 *             )
 *             return result
 *     return _transformer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__transformer);
  __pyx_r = __pyx_v__transformer;
  goto __pyx_L0;

  /* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.eff_default_transformer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__transformer);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1667
 * class VariantsTable(object):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  filename,
 *                  region=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_13VariantsTable_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_13VariantsTable___init__[] = "VariantsTable.__init__(self, filename, region=None, fields=None, exclude_fields=None, arities=None, flatten_filter=False, fill='.', flatten=None)";
static PyMethodDef __pyx_mdef_5vcfnp_13VariantsTable_1__init__ = {"__init__", (PyCFunction)__pyx_pw_5vcfnp_13VariantsTable_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_13VariantsTable___init__};
static PyObject *__pyx_pw_5vcfnp_13VariantsTable_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_exclude_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_fill = 0;
  PyObject *__pyx_v_flatten = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_filename,&__pyx_n_s_region,&__pyx_n_s_fields,&__pyx_n_s_exclude_fields,&__pyx_n_s_arities,&__pyx_n_s_flatten_filter,&__pyx_n_s_fill,&__pyx_n_s_flatten,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "vcfnp.pyx":1669
 *     def __init__(self,
 *                  filename,
 *                  region=None,             # <<<<<<<<<<<<<<
 *                  fields=None,
 *                  exclude_fields=None,
 */
    values[2] = ((PyObject *)((PyObject *)Py_None));

    /* "vcfnp.pyx":1670
 *                  filename,
 *                  region=None,
 *                  fields=None,             # <<<<<<<<<<<<<<
 *                  exclude_fields=None,
 *                  arities=None,
 */
    values[3] = ((PyObject *)((PyObject *)Py_None));

    /* "vcfnp.pyx":1671
 *                  region=None,
 *                  fields=None,
 *                  exclude_fields=None,             # <<<<<<<<<<<<<<
 *                  arities=None,
 *                  flatten_filter=False,
 */
    values[4] = ((PyObject *)((PyObject *)Py_None));

    /* "vcfnp.pyx":1672
 *                  fields=None,
 *                  exclude_fields=None,
 *                  arities=None,             # <<<<<<<<<<<<<<
 *                  flatten_filter=False,
 *                  fill='.',
 */
    values[5] = ((PyObject *)((PyObject *)Py_None));

    /* "vcfnp.pyx":1673
 *                  exclude_fields=None,
 *                  arities=None,
 *                  flatten_filter=False,             # <<<<<<<<<<<<<<
 *                  fill='.',
 *                  flatten=None,
 */
    values[6] = ((PyObject *)((PyObject *)Py_False));
    values[7] = ((PyObject *)((PyObject*)__pyx_kp_s__19));

    /* "vcfnp.pyx":1675
 *                  flatten_filter=False,
 *                  fill='.',
 *                  flatten=None,             # <<<<<<<<<<<<<<
 *                  ):
 *         self.filename = filename
 */
    values[8] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 9, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exclude_fields);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fill);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
    __pyx_v_region = values[2];
    __pyx_v_fields = values[3];
    __pyx_v_exclude_fields = values[4];
    __pyx_v_arities = values[5];
    __pyx_v_flatten_filter = values[6];
    __pyx_v_fill = values[7];
    __pyx_v_flatten = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.VariantsTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_13VariantsTable___init__(__pyx_self, __pyx_v_self, __pyx_v_filename, __pyx_v_region, __pyx_v_fields, __pyx_v_exclude_fields, __pyx_v_arities, __pyx_v_flatten_filter, __pyx_v_fill, __pyx_v_flatten);

  /* "vcfnp.pyx":1667
 * class VariantsTable(object):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  filename,
 *                  region=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_13VariantsTable___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_exclude_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatten) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vcfnp.pyx":1677
 *                  flatten=None,
 *                  ):
 *         self.filename = filename             # <<<<<<<<<<<<<<
 *         self.region = region
 *         self.fields = fields
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_filename, __pyx_v_filename) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1678
 *                  ):
 *         self.filename = filename
 *         self.region = region             # <<<<<<<<<<<<<<
 *         self.fields = fields
 *         self.exclude_fields = exclude_fields
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_region, __pyx_v_region) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1679
 *         self.filename = filename
 *         self.region = region
 *         self.fields = fields             # <<<<<<<<<<<<<<
 *         self.exclude_fields = exclude_fields
 *         self.arities = arities
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fields, __pyx_v_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1680
 *         self.region = region
 *         self.fields = fields
 *         self.exclude_fields = exclude_fields             # <<<<<<<<<<<<<<
 *         self.arities = arities
 *         self.flatten_filter = flatten_filter
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_exclude_fields, __pyx_v_exclude_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1681
 *         self.fields = fields
 *         self.exclude_fields = exclude_fields
 *         self.arities = arities             # <<<<<<<<<<<<<<
 *         self.flatten_filter = flatten_filter
 *         self.fill = fill
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_arities, __pyx_v_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1682
 *         self.exclude_fields = exclude_fields
 *         self.arities = arities
 *         self.flatten_filter = flatten_filter             # <<<<<<<<<<<<<<
 *         self.fill = fill
 *         self.flatten = flatten
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_flatten_filter, __pyx_v_flatten_filter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1683
 *         self.arities = arities
 *         self.flatten_filter = flatten_filter
 *         self.fill = fill             # <<<<<<<<<<<<<<
 *         self.flatten = flatten
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_fill, __pyx_v_fill) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1684
 *         self.flatten_filter = flatten_filter
 *         self.fill = fill
 *         self.flatten = flatten             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_flatten, __pyx_v_flatten) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1667
 * class VariantsTable(object):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  filename,
 *                  region=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.VariantsTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_13VariantsTable_3__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_5vcfnp_13VariantsTable_2__iter__[] = "VariantsTable.__iter__(self)";
static PyMethodDef __pyx_mdef_5vcfnp_13VariantsTable_3__iter__ = {"__iter__", (PyCFunction)__pyx_pw_5vcfnp_13VariantsTable_3__iter__, METH_O, __pyx_doc_5vcfnp_13VariantsTable_2__iter__};
static PyObject *__pyx_pw_5vcfnp_13VariantsTable_3__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_13VariantsTable_2__iter__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_13VariantsTable_8__iter___2generator16(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1713
 *             arities = (None,) * len(fields)
 *         else:
 *             arities = tuple(self.arities.get(f) for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine if we need to parse the INFO field
 */

static PyObject *__pyx_pf_5vcfnp_13VariantsTable_8__iter___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_25_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_25_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_13VariantsTable_8__iter___2generator16, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_VariantsTable___iter___locals_ge); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.VariantsTable.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_13VariantsTable_8__iter___2generator16(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_f); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_f);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_f);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_f);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_5vcfnp_13VariantsTable_8__iter___5generator17(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1719
 * 
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 * 
 */

static PyObject *__pyx_pf_5vcfnp_13VariantsTable_8__iter___3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)__pyx_tp_new_5vcfnp___pyx_scope_struct_26_genexpr(__pyx_ptype_5vcfnp___pyx_scope_struct_26_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_13VariantsTable_8__iter___5generator17, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_VariantsTable___iter___locals_ge); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.VariantsTable.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_13VariantsTable_8__iter___5generator17(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1720
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # default flattening
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) { __Pyx_RaiseClosureNameError("fields"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_f);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_f, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1719
 * 
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 * 
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types)) { __Pyx_RaiseClosureNameError("info_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_cur_scope->__pyx_v_f, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if ((__pyx_t_5 != 0)) {
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types)) { __Pyx_RaiseClosureNameError("info_types"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_6 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_info_types, __pyx_cur_scope->__pyx_v_f); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_t_4 = __pyx_int_neg_1;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":1720
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1
 *                            for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # default flattening
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1719
 * 
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */

static PyObject *__pyx_pf_5vcfnp_13VariantsTable_2__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *__pyx_cur_scope;
  PyObject *__pyx_v_vcf_fns = NULL;
  struct __pyx_obj_6vcflib_PyVariantCallFile *__pyx_v_vcf = NULL;
  PyObject *__pyx_v_filter_ids = NULL;
  PyObject *__pyx_v_info_ids = NULL;
  PyObject *__pyx_v_arities = NULL;
  PyObject *__pyx_v_parse_info = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_ff = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_header = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_fflds = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)__pyx_tp_new_5vcfnp___pyx_scope_struct_24___iter__(__pyx_ptype_5vcfnp___pyx_scope_struct_24___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "vcfnp.pyx":1688
 *     def __iter__(self):
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)             # <<<<<<<<<<<<<<
 * 
 *         # extract definitions from VCF header
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_filenames_from_arg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_filename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vcf_fns = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1691
 * 
 *         # extract definitions from VCF header
 *         vcf = PyVariantCallFile(vcf_fns[0])             # <<<<<<<<<<<<<<
 * 
 *         # FILTER definitions
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vcf_fns, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6vcflib_PyVariantCallFile)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vcf = ((struct __pyx_obj_6vcflib_PyVariantCallFile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1694
 * 
 *         # FILTER definitions
 *         filter_ids = vcf.filter_ids             # <<<<<<<<<<<<<<
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_filter_ids = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1695
 *         # FILTER definitions
 *         filter_ids = vcf.filter_ids
 *         _warn_duplicates(filter_ids)             # <<<<<<<<<<<<<<
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn_duplicates); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_filter_ids);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_filter_ids);
    __Pyx_GIVEREF(__pyx_v_filter_ids);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1696
 *         filter_ids = vcf.filter_ids
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))             # <<<<<<<<<<<<<<
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')
 */
  __pyx_t_1 = PySet_New(__pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_filter_ids, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1697
 *         _warn_duplicates(filter_ids)
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:             # <<<<<<<<<<<<<<
 *             filter_ids.append('PASS')
 *         filter_ids = tuple(filter_ids)
 */
  __pyx_t_6 = (__Pyx_PySequence_Contains(__pyx_n_s_PASS, __pyx_v_filter_ids, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "vcfnp.pyx":1698
 *         filter_ids = sorted(set(filter_ids))
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')             # <<<<<<<<<<<<<<
 *         filter_ids = tuple(filter_ids)
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_filter_ids, __pyx_n_s_PASS); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "vcfnp.pyx":1699
 *         if 'PASS' not in filter_ids:
 *             filter_ids.append('PASS')
 *         filter_ids = tuple(filter_ids)             # <<<<<<<<<<<<<<
 * 
 *         # INFO definitions
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filter_ids);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_v_filter_ids);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_filter_ids, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1702
 * 
 *         # INFO definitions
 *         _warn_duplicates(vcf.info_ids)             # <<<<<<<<<<<<<<
 *         info_ids = tuple(sorted(set(vcf.info_ids)))
 *         info_types = vcf.info_types
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn_duplicates); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_ids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1703
 *         # INFO definitions
 *         _warn_duplicates(vcf.info_ids)
 *         info_ids = tuple(sorted(set(vcf.info_ids)))             # <<<<<<<<<<<<<<
 *         info_types = vcf.info_types
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_info_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1704
 *         _warn_duplicates(vcf.info_ids)
 *         info_ids = tuple(sorted(set(vcf.info_ids)))
 *         info_types = vcf.info_types             # <<<<<<<<<<<<<<
 * 
 *         # determine fields to extract
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vcf), __pyx_n_s_info_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_info_types = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1707
 * 
 *         # determine fields to extract
 *         fields = _variants_fields(self.fields, self.exclude_fields, info_ids)             # <<<<<<<<<<<<<<
 * 
 *         # turn arities into tuple for convenience
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_variants_fields); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fields); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_exclude_fields); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_5) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_info_ids);
  PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_info_ids);
  __Pyx_GIVEREF(__pyx_v_info_ids);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_fields = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1710
 * 
 *         # turn arities into tuple for convenience
 *         if self.arities is None:             # <<<<<<<<<<<<<<
 *             arities = (None,) * len(fields)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "vcfnp.pyx":1711
 *         # turn arities into tuple for convenience
 *         if self.arities is None:
 *             arities = (None,) * len(fields)             # <<<<<<<<<<<<<<
 *         else:
 *             arities = tuple(self.arities.get(f) for f in fields)
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_fields;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_tuple__30, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_arities = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "vcfnp.pyx":1713
 *             arities = (None,) * len(fields)
 *         else:
 *             arities = tuple(self.arities.get(f) for f in fields)             # <<<<<<<<<<<<<<
 * 
 *         # determine if we need to parse the INFO field
 */
    __pyx_t_2 = __pyx_pf_5vcfnp_13VariantsTable_8__iter___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_arities = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "vcfnp.pyx":1716
 * 
 *         # determine if we need to parse the INFO field
 *         parse_info = any([f not in STANDARD_VARIANT_FIELDS for f in fields])             # <<<<<<<<<<<<<<
 * 
 *         # convert to tuple
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_10); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_10); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_11(__pyx_t_1);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_STANDARD_VARIANT_FIELDS); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_10, Py_NE)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_10))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_any, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_parse_info = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1719
 * 
 *         # convert to tuple
 *         info_types = tuple(info_types[f] if f in info_types else -1             # <<<<<<<<<<<<<<
 *                            for f in fields)
 * 
 */
  __pyx_t_2 = __pyx_pf_5vcfnp_13VariantsTable_8__iter___3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_info_types, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp.pyx":1723
 * 
 *         # default flattening
 *         if self.flatten is None:             # <<<<<<<<<<<<<<
 *             self.flatten = dict()
 *         for f in DEFAULT_FLATTEN:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__pyx_t_2 == Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "vcfnp.pyx":1724
 *         # default flattening
 *         if self.flatten is None:
 *             self.flatten = dict()             # <<<<<<<<<<<<<<
 *         for f in DEFAULT_FLATTEN:
 *             if f not in self.flatten:
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "vcfnp.pyx":1725
 *         if self.flatten is None:
 *             self.flatten = dict()
 *         for f in DEFAULT_FLATTEN:             # <<<<<<<<<<<<<<
 *             if f not in self.flatten:
 *                 ff, t = DEFAULT_FLATTEN[f]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_FLATTEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_11(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":1726
 *             self.flatten = dict()
 *         for f in DEFAULT_FLATTEN:
 *             if f not in self.flatten:             # <<<<<<<<<<<<<<
 *                 ff, t = DEFAULT_FLATTEN[f]
 *                 self.flatten[f] = ff, t(self.fill)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "vcfnp.pyx":1727
 *         for f in DEFAULT_FLATTEN:
 *             if f not in self.flatten:
 *                 ff, t = DEFAULT_FLATTEN[f]             # <<<<<<<<<<<<<<
 *                 self.flatten[f] = ff, t(self.fill)
 * 
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_FLATTEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
        PyObject* sequence = __pyx_t_10;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_ff, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":1728
 *             if f not in self.flatten:
 *                 ff, t = DEFAULT_FLATTEN[f]
 *                 self.flatten[f] = ff, t(self.fill)             # <<<<<<<<<<<<<<
 * 
 *         # make header row
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fill); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_t);
      __pyx_t_2 = __pyx_v_t; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_10);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_ff);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ff);
      __Pyx_GIVEREF(__pyx_v_ff);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_v_f, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "vcfnp.pyx":1725
 *         if self.flatten is None:
 *             self.flatten = dict()
 *         for f in DEFAULT_FLATTEN:             # <<<<<<<<<<<<<<
 *             if f not in self.flatten:
 *                 ff, t = DEFAULT_FLATTEN[f]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1731
 * 
 *         # make header row
 *         header = list()             # <<<<<<<<<<<<<<
 *         for f in fields:
 *             if self.flatten_filter and f == 'FILTER':
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_header = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1732
 *         # make header row
 *         header = list()
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if self.flatten_filter and f == 'FILTER':
 *                 for t in filter_ids:
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_fields)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_11(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vcfnp.pyx":1733
 *         header = list()
 *         for f in fields:
 *             if self.flatten_filter and f == 'FILTER':             # <<<<<<<<<<<<<<
 *                 for t in filter_ids:
 *                     header.append('FILTER_' + t)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten_filter); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_f, __pyx_n_s_FILTER, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_t_7;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vcfnp.pyx":1734
 *         for f in fields:
 *             if self.flatten_filter and f == 'FILTER':
 *                 for t in filter_ids:             # <<<<<<<<<<<<<<
 *                     header.append('FILTER_' + t)
 *             elif (self.arities is not None
 */
      __pyx_t_2 = __pyx_v_filter_ids; __Pyx_INCREF(__pyx_t_2); __pyx_t_13 = 0;
      for (;;) {
        if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_10); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "vcfnp.pyx":1735
 *             if self.flatten_filter and f == 'FILTER':
 *                 for t in filter_ids:
 *                     header.append('FILTER_' + t)             # <<<<<<<<<<<<<<
 *             elif (self.arities is not None
 *                   and f in self.arities
 */
        __pyx_t_10 = PyNumber_Add(__pyx_n_s_FILTER_2, __pyx_v_t); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_header, __pyx_t_10); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "vcfnp.pyx":1734
 *         for f in fields:
 *             if self.flatten_filter and f == 'FILTER':
 *                 for t in filter_ids:             # <<<<<<<<<<<<<<
 *                     header.append('FILTER_' + t)
 *             elif (self.arities is not None
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L15;
    }

    /* "vcfnp.pyx":1736
 *                 for t in filter_ids:
 *                     header.append('FILTER_' + t)
 *             elif (self.arities is not None             # <<<<<<<<<<<<<<
 *                   and f in self.arities
 *                   and self.arities[f] > 1):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = (__pyx_t_2 != Py_None);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = (__pyx_t_7 != 0);
    if (__pyx_t_14) {
    } else {
      __pyx_t_6 = __pyx_t_14;
      goto __pyx_L20_bool_binop_done;
    }

    /* "vcfnp.pyx":1737
 *                     header.append('FILTER_' + t)
 *             elif (self.arities is not None
 *                   and f in self.arities             # <<<<<<<<<<<<<<
 *                   and self.arities[f] > 1):
 *                 for i in range(1, self.arities[f] + 1):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_14 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = (__pyx_t_14 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L20_bool_binop_done;
    }

    /* "vcfnp.pyx":1738
 *             elif (self.arities is not None
 *                   and f in self.arities
 *                   and self.arities[f] > 1):             # <<<<<<<<<<<<<<
 *                 for i in range(1, self.arities[f] + 1):
 *                     header.append(f + '_' + str(i))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_10, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vcfnp.pyx":1739
 *                   and f in self.arities
 *                   and self.arities[f] > 1):
 *                 for i in range(1, self.arities[f] + 1):             # <<<<<<<<<<<<<<
 *                     header.append(f + '_' + str(i))
 *             elif f in self.flatten and self.flatten[f] is not None:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_arities); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyObject_GetItem(__pyx_t_2, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_10, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_10 = __pyx_t_2; __Pyx_INCREF(__pyx_t_10); __pyx_t_13 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_15 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_10, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_10, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_15(__pyx_t_10);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "vcfnp.pyx":1740
 *                   and self.arities[f] > 1):
 *                 for i in range(1, self.arities[f] + 1):
 *                     header.append(f + '_' + str(i))             # <<<<<<<<<<<<<<
 *             elif f in self.flatten and self.flatten[f] is not None:
 *                 fflds, _ = self.flatten[f]
 */
        __pyx_t_2 = PyNumber_Add(__pyx_v_f, __pyx_n_s__5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_header, __pyx_t_5); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "vcfnp.pyx":1739
 *                   and f in self.arities
 *                   and self.arities[f] > 1):
 *                 for i in range(1, self.arities[f] + 1):             # <<<<<<<<<<<<<<
 *                     header.append(f + '_' + str(i))
 *             elif f in self.flatten and self.flatten[f] is not None:
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L15;
    }

    /* "vcfnp.pyx":1741
 *                 for i in range(1, self.arities[f] + 1):
 *                     header.append(f + '_' + str(i))
 *             elif f in self.flatten and self.flatten[f] is not None:             # <<<<<<<<<<<<<<
 *                 fflds, _ = self.flatten[f]
 *                 header.extend(fflds)
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_f, __pyx_t_10, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_14 = (__pyx_t_7 != 0);
    if (__pyx_t_14) {
    } else {
      __pyx_t_6 = __pyx_t_14;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_10, __pyx_v_f); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_14 = (__pyx_t_5 != Py_None);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_14 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L25_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vcfnp.pyx":1742
 *                     header.append(f + '_' + str(i))
 *             elif f in self.flatten and self.flatten[f] is not None:
 *                 fflds, _ = self.flatten[f]             # <<<<<<<<<<<<<<
 *                 header.extend(fflds)
 *             else:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = PyObject_GetItem(__pyx_t_5, __pyx_v_f); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
        PyObject* sequence = __pyx_t_10;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_2 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L27_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L27_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L28_unpacking_done;
        __pyx_L27_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L28_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_fflds, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vcfnp.pyx":1743
 *             elif f in self.flatten and self.flatten[f] is not None:
 *                 fflds, _ = self.flatten[f]
 *                 header.extend(fflds)             # <<<<<<<<<<<<<<
 *             else:
 *                 header.append(f)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_header, __pyx_n_s_extend); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_fflds); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_fflds);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_fflds);
        __Pyx_GIVEREF(__pyx_v_fflds);
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L15;
    }
    /*else*/ {

      /* "vcfnp.pyx":1745
 *                 header.extend(fflds)
 *             else:
 *                 header.append(f)             # <<<<<<<<<<<<<<
 *         header = tuple(header)
 *         # make data rows
 */
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_header, __pyx_v_f); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L15:;

    /* "vcfnp.pyx":1732
 *         # make header row
 *         header = list()
 *         for f in fields:             # <<<<<<<<<<<<<<
 *             if self.flatten_filter and f == 'FILTER':
 *                 for t in filter_ids:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1746
 *             else:
 *                 header.append(f)
 *         header = tuple(header)             # <<<<<<<<<<<<<<
 *         # make data rows
 *         data = _itervariantstable(vcf_fns=vcf_fns, region=self.region,
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_header);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_header);
  __Pyx_GIVEREF(__pyx_v_header);
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_header, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "vcfnp.pyx":1748
 *         header = tuple(header)
 *         # make data rows
 *         data = _itervariantstable(vcf_fns=vcf_fns, region=self.region,             # <<<<<<<<<<<<<<
 *                                  fields=fields, arities=arities,
 *                                  info_types=info_types, parse_info=parse_info,
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_itervariantstable); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_vcf_fns, __pyx_v_vcf_fns) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_region); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_region, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1749
 *         # make data rows
 *         data = _itervariantstable(vcf_fns=vcf_fns, region=self.region,
 *                                  fields=fields, arities=arities,             # <<<<<<<<<<<<<<
 *                                  info_types=info_types, parse_info=parse_info,
 *                                  filter_ids=filter_ids,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fields, __pyx_cur_scope->__pyx_v_fields) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_arities, __pyx_v_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1750
 *         data = _itervariantstable(vcf_fns=vcf_fns, region=self.region,
 *                                  fields=fields, arities=arities,
 *                                  info_types=info_types, parse_info=parse_info,             # <<<<<<<<<<<<<<
 *                                  filter_ids=filter_ids,
 *                                  flatten_filter=self.flatten_filter,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_info_types, __pyx_cur_scope->__pyx_v_info_types) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_parse_info, __pyx_v_parse_info) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1751
 *                                  fields=fields, arities=arities,
 *                                  info_types=info_types, parse_info=parse_info,
 *                                  filter_ids=filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter=self.flatten_filter,
 *                                  fill=self.fill, flatten=self.flatten)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_filter_ids, __pyx_v_filter_ids) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1752
 *                                  info_types=info_types, parse_info=parse_info,
 *                                  filter_ids=filter_ids,
 *                                  flatten_filter=self.flatten_filter,             # <<<<<<<<<<<<<<
 *                                  fill=self.fill, flatten=self.flatten)
 *         return chain((header,), data)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten_filter); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flatten_filter, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1753
 *                                  filter_ids=filter_ids,
 *                                  flatten_filter=self.flatten_filter,
 *                                  fill=self.fill, flatten=self.flatten)             # <<<<<<<<<<<<<<
 *         return chain((header,), data)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_fill); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_flatten); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flatten, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1748
 *         header = tuple(header)
 *         # make data rows
 *         data = _itervariantstable(vcf_fns=vcf_fns, region=self.region,             # <<<<<<<<<<<<<<
 *                                  fields=fields, arities=arities,
 *                                  info_types=info_types, parse_info=parse_info,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_data = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vcfnp.pyx":1754
 *                                  flatten_filter=self.flatten_filter,
 *                                  fill=self.fill, flatten=self.flatten)
 *         return chain((header,), data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_chain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_header);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_header);
  __Pyx_GIVEREF(__pyx_v_header);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_2) {
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __pyx_t_10 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vcfnp.VariantsTable.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vcf_fns);
  __Pyx_XDECREF((PyObject *)__pyx_v_vcf);
  __Pyx_XDECREF(__pyx_v_filter_ids);
  __Pyx_XDECREF(__pyx_v_info_ids);
  __Pyx_XDECREF(__pyx_v_arities);
  __Pyx_XDECREF(__pyx_v_parse_info);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_ff);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_header);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_fflds);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_59generator5(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp.pyx":1757
 * 
 * 
 * def _itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                        filter_ids, flatten_filter, fill, flatten):
 *     cdef VariantCallFile *variant_file
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_58_itervariantstable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_57_itervariantstable[] = "_itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info, filter_ids, flatten_filter, fill, flatten)";
static PyMethodDef __pyx_mdef_5vcfnp_58_itervariantstable = {"_itervariantstable", (PyCFunction)__pyx_pw_5vcfnp_58_itervariantstable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_57_itervariantstable};
static PyObject *__pyx_pw_5vcfnp_58_itervariantstable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_info_types = 0;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_fill = 0;
  PyObject *__pyx_v_flatten = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariantstable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_info_types,&__pyx_n_s_parse_info,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_fill,&__pyx_n_s_flatten,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fill)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itervariantstable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fields = values[2];
    __pyx_v_arities = values[3];
    __pyx_v_info_types = values[4];
    __pyx_v_parse_info = values[5];
    __pyx_v_filter_ids = values[6];
    __pyx_v_flatten_filter = values[7];
    __pyx_v_fill = values[8];
    __pyx_v_flatten = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itervariantstable", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp._itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_57_itervariantstable(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fields, __pyx_v_arities, __pyx_v_info_types, __pyx_v_parse_info, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_fill, __pyx_v_flatten);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_57_itervariantstable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatten) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_itervariantstable", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)__pyx_tp_new_5vcfnp___pyx_scope_struct_27__itervariantstable(__pyx_ptype_5vcfnp___pyx_scope_struct_27__itervariantstable, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_arities = __pyx_v_arities;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arities);
  __pyx_cur_scope->__pyx_v_info_types = __pyx_v_info_types;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_types);
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_parse_info);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_parse_info);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __pyx_cur_scope->__pyx_v_fill = __pyx_v_fill;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fill);
  __pyx_cur_scope->__pyx_v_flatten = __pyx_v_flatten;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatten);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatten);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_5vcfnp_59generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariantstable, __pyx_n_s_itervariantstable); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp._itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_59generator5(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1762
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp.pyx":1763
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp.pyx":1764
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);

    /* "vcfnp.pyx":1765
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         if region is not None:
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_parse_info); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_t_7;

    /* "vcfnp.pyx":1766
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp.pyx":1767
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "vcfnp.pyx":1768
 *         variant_file.parseSamples = False
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_6 = __pyx_convert_string_from_py_std__string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_cur_scope->__pyx_v_region_set = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);

      /* "vcfnp.pyx":1769
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_9 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_9) {

        /* "vcfnp.pyx":1770
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "vcfnp.pyx":1771
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while _get_next_variant(variant_file, variant):
 */
    __pyx_cur_scope->__pyx_v_variant = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));

    /* "vcfnp.pyx":1773
 *         variant = new Variant(deref(variant_file))
 * 
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,
 *                              flatten_filter, fill, flatten)
 */
    while (1) {
      __pyx_t_9 = (__pyx_f_5vcfnp__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant) != 0);
      if (!__pyx_t_9) break;

      /* "vcfnp.pyx":1774
 * 
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,             # <<<<<<<<<<<<<<
 *                              flatten_filter, fill, flatten)
 * 
 */
      __pyx_t_4 = __pyx_f_5vcfnp__mkvtblrow(__pyx_cur_scope->__pyx_v_variant, __pyx_cur_scope->__pyx_v_fields, __pyx_cur_scope->__pyx_v_arities, __pyx_cur_scope->__pyx_v_info_types, __pyx_cur_scope->__pyx_v_filter_ids, __pyx_cur_scope->__pyx_v_flatten_filter, __pyx_cur_scope->__pyx_v_fill, __pyx_cur_scope->__pyx_v_flatten); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "vcfnp.pyx":1777
 *                              flatten_filter, fill, flatten)
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp.pyx":1778
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp.pyx":1762
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1757
 * 
 * 
 * def _itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                        filter_ids, flatten_filter, fill, flatten):
 *     cdef VariantCallFile *variant_file
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "vcfnp.pyx":1781
 * 
 * 
 * cdef inline object _mkvtblrow(Variant *variant, fields, arities, info_types,             # <<<<<<<<<<<<<<
 *                               filter_ids, flatten_filter, fill, flatten):
 *     out = list()
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mkvtblrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatten) {
  PyObject *__pyx_v_out = NULL;
  std::string __pyx_v_field;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_val = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  std::string __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mkvtblrow", 0);

  /* "vcfnp.pyx":1783
 * cdef inline object _mkvtblrow(Variant *variant, fields, arities, info_types,
 *                               filter_ids, flatten_filter, fill, flatten):
 *     out = list()             # <<<<<<<<<<<<<<
 *     cdef string field
 *     for field, arity, vcf_type in zip(fields, arities, info_types):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1785
 *     out = list()
 *     cdef string field
 *     for field, arity, vcf_type in zip(fields, arities, info_types):             # <<<<<<<<<<<<<<
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_v_info_types);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_10 = __pyx_convert_string_from_py_std__string(__pyx_t_5); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_field = __pyx_t_10;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp.pyx":1786
 *     cdef string field
 *     for field, arity, vcf_type in zip(fields, arities, info_types):
 *         if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:
 */
    __pyx_t_11 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_CHROM) != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1787
 *     for field, arity, vcf_type in zip(fields, arities, info_types):
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->sequenceName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1788
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:
 */
    __pyx_t_11 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_POS) != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1789
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)
 */
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_variant->position); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1790
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:
 */
    __pyx_t_11 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_ID) != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1791
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1792
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 */
    __pyx_t_11 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_REF) != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1793
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->ref); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1794
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 */
    __pyx_t_11 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_ALT) != 0);
    if (__pyx_t_11) {

      /* "vcfnp.pyx":1795
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:             # <<<<<<<<<<<<<<
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 */
      __pyx_t_11 = (__pyx_v_arity != Py_None);
      __pyx_t_13 = (__pyx_t_11 != 0);
      if (__pyx_t_13) {

        /* "vcfnp.pyx":1796
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)             # <<<<<<<<<<<<<<
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:
 */
        __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_2 = __pyx_f_5vcfnp__mktblval_multi(__pyx_v_variant->alt, __pyx_t_14, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "vcfnp.pyx":1797
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)             # <<<<<<<<<<<<<<
 *             elif variant.alt.size() == 0:
 *                 out.append(fill)
 */
        __pyx_t_12 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L8;
      }

      /* "vcfnp.pyx":1798
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
      __pyx_t_13 = ((__pyx_v_variant->alt.size() == 0) != 0);
      if (__pyx_t_13) {

        /* "vcfnp.pyx":1799
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:
 *                 out.append(fill)             # <<<<<<<<<<<<<<
 *             else:
 *                 val = ','.join(variant.alt)
 */
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L8;
      }
      /*else*/ {

        /* "vcfnp.pyx":1801
 *                 out.append(fill)
 *             else:
 *                 val = ','.join(variant.alt)             # <<<<<<<<<<<<<<
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:
 */
        __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__31, __pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "vcfnp.pyx":1802
 *             else:
 *                 val = ','.join(variant.alt)
 *                 out.append(val)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)
 */
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L8:;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1803
 *                 val = ','.join(variant.alt)
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:
 */
    __pyx_t_13 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_QUAL) != 0);
    if (__pyx_t_13) {

      /* "vcfnp.pyx":1804
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_FILTER:
 *             if flatten_filter:
 */
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_variant->quality); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1805
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))
 */
    __pyx_t_13 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_FILTER) != 0);
    if (__pyx_t_13) {

      /* "vcfnp.pyx":1806
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:
 *             if flatten_filter:             # <<<<<<<<<<<<<<
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif variant.filter == DOT:
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_flatten_filter); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_13) {

        /* "vcfnp.pyx":1807
 *         elif field == FIELD_NAME_FILTER:
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))             # <<<<<<<<<<<<<<
 *             elif variant.filter == DOT:
 *                 out.append(fill)
 */
        if (!(likely(PyTuple_CheckExact(__pyx_v_filter_ids))||((__pyx_v_filter_ids) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_filter_ids)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = __pyx_f_5vcfnp__mkfilterval(__pyx_v_variant, ((PyObject*)__pyx_v_filter_ids)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9;
      }

      /* "vcfnp.pyx":1808
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif variant.filter == DOT:             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
      __pyx_t_13 = ((__pyx_v_variant->filter == __pyx_v_5vcfnp_DOT) != 0);
      if (__pyx_t_13) {

        /* "vcfnp.pyx":1809
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif variant.filter == DOT:
 *                 out.append(fill)             # <<<<<<<<<<<<<<
 *             else:
 *                 out.append(variant.filter)
 */
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }
      /*else*/ {

        /* "vcfnp.pyx":1811
 *                 out.append(fill)
 *             else:
 *                 out.append(variant.filter)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)
 */
        __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_variant->filter); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L9:;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1812
 *             else:
 *                 out.append(variant.filter)
 *         elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:
 */
    __pyx_t_13 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_NUM_ALLELES) != 0);
    if (__pyx_t_13) {

      /* "vcfnp.pyx":1813
 *                 out.append(variant.filter)
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_IS_SNP:
 *             out.append(_is_snp(variant))
 */
      __pyx_t_7 = __Pyx_PyInt_FromSize_t((__pyx_v_variant->alt.size() + 1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7;
    }

    /* "vcfnp.pyx":1814
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *             out.append(_is_snp(variant))
 *         else:
 */
    __pyx_t_13 = ((__pyx_v_field == __pyx_v_5vcfnp_FIELD_NAME_IS_SNP) != 0);
    if (__pyx_t_13) {

      /* "vcfnp.pyx":1815
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:
 *             out.append(_is_snp(variant))             # <<<<<<<<<<<<<<
 *         else:
 *             if vcf_type == FIELD_BOOL:
 */
      __pyx_t_7 = __pyx_f_5vcfnp__is_snp(__pyx_v_variant); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "vcfnp.pyx":1817
 *             out.append(_is_snp(variant))
 *         else:
 *             if vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)
 */
      __pyx_t_7 = PyInt_FromLong(vcf::FIELD_BOOL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_vcf_type, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_13) {

        /* "vcfnp.pyx":1819
 *             if vcf_type == FIELD_BOOL:
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)             # <<<<<<<<<<<<<<
 *                 out.append(val)
 *             else:
 */
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_variant->infoFlags.count(__pyx_v_field) > 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "vcfnp.pyx":1820
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)
 *                 out.append(val)             # <<<<<<<<<<<<<<
 *             else:
 *                 if arity is not None:
 */
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      /*else*/ {

        /* "vcfnp.pyx":1822
 *                 out.append(val)
 *             else:
 *                 if arity is not None:             # <<<<<<<<<<<<<<
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 */
        __pyx_t_13 = (__pyx_v_arity != Py_None);
        __pyx_t_11 = (__pyx_t_13 != 0);
        if (__pyx_t_11) {

          /* "vcfnp.pyx":1823
 *             else:
 *                 if arity is not None:
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)             # <<<<<<<<<<<<<<
 *                     out.extend(vals)
 *                 elif str(field) in flatten and flatten[str(field)] is not None:
 */
          __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_2 = __pyx_f_5vcfnp__mktblval_multi((__pyx_v_variant->info[__pyx_v_field]), __pyx_t_14, __pyx_v_fill); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "vcfnp.pyx":1824
 *                 if arity is not None:
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)             # <<<<<<<<<<<<<<
 *                 elif str(field) in flatten and flatten[str(field)] is not None:
 *                     _, t = flatten[str(field)]
 */
          __pyx_t_12 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L11;
        }

        /* "vcfnp.pyx":1825
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 *                 elif str(field) in flatten and flatten[str(field)] is not None:             # <<<<<<<<<<<<<<
 *                     _, t = flatten[str(field)]
 *                     vals = t(variant.info[field])
 */
        __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_field); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = (__Pyx_PySequence_Contains(__pyx_t_2, __pyx_v_flatten, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = (__pyx_t_13 != 0);
        if (__pyx_t_15) {
        } else {
          __pyx_t_11 = __pyx_t_15;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_field); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_GetItem(__pyx_v_flatten, __pyx_t_2); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = (__pyx_t_7 != Py_None);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = (__pyx_t_15 != 0);
        __pyx_t_11 = __pyx_t_13;
        __pyx_L12_bool_binop_done:;
        if (__pyx_t_11) {

          /* "vcfnp.pyx":1826
 *                     out.extend(vals)
 *                 elif str(field) in flatten and flatten[str(field)] is not None:
 *                     _, t = flatten[str(field)]             # <<<<<<<<<<<<<<
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)
 */
          __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_field); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyObject_GetItem(__pyx_v_flatten, __pyx_t_7); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
            PyObject* sequence = __pyx_t_2;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_6);
            #else
            __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_6);
            #endif
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
            index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_7);
            index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L14_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_t_9 = NULL;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L15_unpacking_done;
            __pyx_L14_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_9 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_L15_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_6);
          __pyx_t_6 = 0;

          /* "vcfnp.pyx":1827
 *                 elif str(field) in flatten and flatten[str(field)] is not None:
 *                     _, t = flatten[str(field)]
 *                     vals = t(variant.info[field])             # <<<<<<<<<<<<<<
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:
 */
          __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_v_t);
          __pyx_t_7 = __pyx_v_t; __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_2);
          } else {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_6);
            __pyx_t_6 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "vcfnp.pyx":1828
 *                     _, t = flatten[str(field)]
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)             # <<<<<<<<<<<<<<
 *                 elif variant.info[field].size() == 0:
 *                     out.append(fill)
 */
          __pyx_t_12 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L11;
        }

        /* "vcfnp.pyx":1829
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:             # <<<<<<<<<<<<<<
 *                     out.append(fill)
 *                 else:
 */
        __pyx_t_11 = (((__pyx_v_variant->info[__pyx_v_field]).size() == 0) != 0);
        if (__pyx_t_11) {

          /* "vcfnp.pyx":1830
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:
 *                     out.append(fill)             # <<<<<<<<<<<<<<
 *                 else:
 *                     out.append(','.join(variant.info[field]))
 */
          __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L11;
        }
        /*else*/ {

          /* "vcfnp.pyx":1832
 *                     out.append(fill)
 *                 else:
 *                     out.append(','.join(variant.info[field]))             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
          __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__31, __pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L11:;
      }
      __pyx_L10:;
    }
    __pyx_L7:;

    /* "vcfnp.pyx":1785
 *     out = list()
 *     cdef string field
 *     for field, arity, vcf_type in zip(fields, arities, info_types):             # <<<<<<<<<<<<<<
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1833
 *                 else:
 *                     out.append(','.join(variant.info[field]))
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp.pyx":1781
 * 
 * 
 * cdef inline object _mkvtblrow(Variant *variant, fields, arities, info_types,             # <<<<<<<<<<<<<<
 *                               filter_ids, flatten_filter, fill, flatten):
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("vcfnp._mkvtblrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1836
 * 
 * 
 * cdef inline object _mktblval_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                    object fill):
 *     cdef int i
 */

static CYTHON_INLINE PyObject *__pyx_f_5vcfnp__mktblval_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mktblval_multi", 0);

  /* "vcfnp.pyx":1839
 *                                    object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1840
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp.pyx":1841
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp.pyx":1842
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__string(__pyx_v_string_vals.at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "vcfnp.pyx":1844
 *             out.append(string_vals.at(i))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }

  /* "vcfnp.pyx":1845
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp.pyx":1836
 * 
 * 
 * cdef inline object _mktblval_multi(vector[string]& string_vals, int arity,             # <<<<<<<<<<<<<<
 *                                    object fill):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp._mktblval_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_61flatten_eff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_60flatten_eff[] = "flatten_eff(fill='.')";
static PyMethodDef __pyx_mdef_5vcfnp_61flatten_eff = {"flatten_eff", (PyCFunction)__pyx_pw_5vcfnp_61flatten_eff, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_60flatten_eff};
static PyObject *__pyx_pw_5vcfnp_61flatten_eff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fill = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flatten_eff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fill,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fill);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flatten_eff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fill = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flatten_eff", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.flatten_eff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_60flatten_eff(__pyx_self, __pyx_v_fill);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1867
 * 
 * def flatten_eff(fill='.'):
 *     def _flatten(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return [fill] * 11
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_11flatten_eff_1_flatten(PyObject *__pyx_self, PyObject *__pyx_v_vals); /*proto*/
static PyMethodDef __pyx_mdef_5vcfnp_11flatten_eff_1_flatten = {"_flatten", (PyCFunction)__pyx_pw_5vcfnp_11flatten_eff_1_flatten, METH_O, 0};
static PyObject *__pyx_pw_5vcfnp_11flatten_eff_1_flatten(PyObject *__pyx_self, PyObject *__pyx_v_vals) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_flatten (wrapper)", 0);
  __pyx_r = __pyx_pf_5vcfnp_11flatten_eff__flatten(__pyx_self, ((PyObject *)__pyx_v_vals));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_11flatten_eff__flatten(PyObject *__pyx_self, PyObject *__pyx_v_vals) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *__pyx_cur_scope;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *__pyx_outer_scope;
  PyObject *__pyx_v_match_eff_main = NULL;
  PyObject *__pyx_v_eff = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_flatten", 0);
  __pyx_outer_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "vcfnp.pyx":1868
 * def flatten_eff(fill='.'):
 *     def _flatten(vals):
 *         if len(vals) == 0:             # <<<<<<<<<<<<<<
 *             return [fill] * 11
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vals); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 == 0) != 0);
  if (__pyx_t_2) {

    /* "vcfnp.pyx":1869
 *     def _flatten(vals):
 *         if len(vals) == 0:
 *             return [fill] * 11             # <<<<<<<<<<<<<<
 *         else:
 *             # ignore all but first effect
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_cur_scope->__pyx_v_fill)) { __Pyx_RaiseClosureNameError("fill"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1869; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_3 = PyList_New(1 * 11); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 11; __pyx_temp++) {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_cur_scope->__pyx_v_fill);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fill);
      }
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "vcfnp.pyx":1872
 *         else:
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])             # <<<<<<<<<<<<<<
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             eff = [fill if v == '' else v for v in eff[:11]]
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_prog_eff_main); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_match); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vals, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_match_eff_main = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp.pyx":1873
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')             # <<<<<<<<<<<<<<
 *             eff = [fill if v == '' else v for v in eff[:11]]
 *             return eff
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_eff_main, __pyx_n_s_group); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_match_eff_main, __pyx_n_s_group); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_eff = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "vcfnp.pyx":1874
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             eff = [fill if v == '' else v for v in eff[:11]]             # <<<<<<<<<<<<<<
 *             return eff
 *     return _flatten
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_eff, 0, 11, NULL, NULL, &__pyx_slice__35, 0, 1, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_3 = __pyx_t_7; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_v, __pyx_kp_s__24, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {
        if (unlikely(!__pyx_cur_scope->__pyx_v_fill)) { __Pyx_RaiseClosureNameError("fill"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
        __pyx_t_7 = __pyx_cur_scope->__pyx_v_fill;
      } else {
        __Pyx_INCREF(__pyx_v_v);
        __pyx_t_7 = __pyx_v_v;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_eff, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vcfnp.pyx":1875
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             eff = [fill if v == '' else v for v in eff[:11]]
 *             return eff             # <<<<<<<<<<<<<<
 *     return _flatten
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_eff);
    __pyx_r = __pyx_v_eff;
    goto __pyx_L0;
  }

  /* "vcfnp.pyx":1867
 * 
 * def flatten_eff(fill='.'):
 *     def _flatten(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return [fill] * 11
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp.flatten_eff._flatten", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_match_eff_main);
  __Pyx_XDECREF(__pyx_v_eff);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */

static PyObject *__pyx_pf_5vcfnp_60flatten_eff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fill) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *__pyx_cur_scope;
  PyObject *__pyx_v__flatten = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flatten_eff", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *)__pyx_tp_new_5vcfnp___pyx_scope_struct_28_flatten_eff(__pyx_ptype_5vcfnp___pyx_scope_struct_28_flatten_eff, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fill = __pyx_v_fill;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fill);

  /* "vcfnp.pyx":1867
 * 
 * def flatten_eff(fill='.'):
 *     def _flatten(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return [fill] * 11
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_11flatten_eff_1_flatten, 0, __pyx_n_s_flatten_eff_locals__flatten, ((PyObject*)__pyx_cur_scope), __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__flatten = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vcfnp.pyx":1876
 *             eff = [fill if v == '' else v for v in eff[:11]]
 *             return eff
 *     return _flatten             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__flatten);
  __pyx_r = __pyx_v__flatten;
  goto __pyx_L0;

  /* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.flatten_eff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__flatten);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *__pyx_freelist_5vcfnp___pyx_scope_struct___variants_arities[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct___variants_arities = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct___variants_arities(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct___variants_arities > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct___variants_arities[--__pyx_freecount_5vcfnp___pyx_scope_struct___variants_arities];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct___variants_arities(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arities);
  Py_CLEAR(p->__pyx_v_fields);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct___variants_arities < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct___variants_arities[__pyx_freecount_5vcfnp___pyx_scope_struct___variants_arities++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct___variants_arities(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)o;
  if (p->__pyx_v_arities) {
    e = (*v)(p->__pyx_v_arities, a); if (e) return e;
  }
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct___variants_arities(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)o;
  tmp = ((PyObject*)p->__pyx_v_arities);
  p->__pyx_v_arities = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct___variants_arities = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct___variants_arities", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct___variants_arities, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct___variants_arities, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct___variants_arities, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct___variants_arities, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_1_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_1_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct___variants_arities *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *__pyx_freelist_5vcfnp___pyx_scope_struct_2__variants_fills[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_2__variants_fills = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_2__variants_fills(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_2__variants_fills > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_2__variants_fills[--__pyx_freecount_5vcfnp___pyx_scope_struct_2__variants_fills];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_2__variants_fills(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_fills);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_2__variants_fills < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_2__variants_fills[__pyx_freecount_5vcfnp___pyx_scope_struct_2__variants_fills++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_2__variants_fills(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_fills) {
    e = (*v)(p->__pyx_v_fills, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_2__variants_fills(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fills);
  p->__pyx_v_fills = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_2__variants_fills = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_2__variants_fills", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_2__variants_fills, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_2__variants_fills, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_2__variants_fills, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_2__variants_fills, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_3_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_3_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_2__variants_fills *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *__pyx_freelist_5vcfnp___pyx_scope_struct_4__info_transformers[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_4__info_transformers = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_4__info_transformers(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_4__info_transformers > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_4__info_transformers[--__pyx_freecount_5vcfnp___pyx_scope_struct_4__info_transformers];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_4__info_transformers(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_transformers);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_4__info_transformers < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_4__info_transformers[__pyx_freecount_5vcfnp___pyx_scope_struct_4__info_transformers++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_4__info_transformers(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_transformers) {
    e = (*v)(p->__pyx_v_transformers, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_4__info_transformers(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_transformers);
  p->__pyx_v_transformers = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_4__info_transformers = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_4__info_transformers", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_4__info_transformers, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_4__info_transformers, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_4__info_transformers, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_4__info_transformers, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_5_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_5_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_5_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_4__info_transformers *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_5_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *__pyx_freelist_5vcfnp___pyx_scope_struct_6_build[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_6_build = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_6_build(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_6_build > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_6_build[--__pyx_freecount_5vcfnp___pyx_scope_struct_6_build];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_6_build(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_info_counts);
  Py_CLEAR(p->__pyx_v_info_types);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_6_build < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_6_build[__pyx_freecount_5vcfnp___pyx_scope_struct_6_build++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_6_build(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_info_counts) {
    e = (*v)(p->__pyx_v_info_counts, a); if (e) return e;
  }
  if (p->__pyx_v_info_types) {
    e = (*v)(p->__pyx_v_info_types, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_6_build(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_info_counts);
  p->__pyx_v_info_counts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_info_types);
  p->__pyx_v_info_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_6_build = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_6_build", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_6_build, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_6_build, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_6_build, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_6_build, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_7_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_7_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_7_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_7_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_8_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_8_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_8_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_8_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_8_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_6_build *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_8_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *__pyx_freelist_5vcfnp___pyx_scope_struct_9__iter_withprogress[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_9__iter_withprogress = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_9__iter_withprogress(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_9__iter_withprogress > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_9__iter_withprogress[--__pyx_freecount_5vcfnp___pyx_scope_struct_9__iter_withprogress];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_9__iter_withprogress(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_after);
  Py_CLEAR(p->__pyx_v_after_all);
  Py_CLEAR(p->__pyx_v_before);
  Py_CLEAR(p->__pyx_v_before_all);
  Py_CLEAR(p->__pyx_v_iterable);
  Py_CLEAR(p->__pyx_v_log);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_9__iter_withprogress < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_9__iter_withprogress[__pyx_freecount_5vcfnp___pyx_scope_struct_9__iter_withprogress++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_9__iter_withprogress(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)o;
  if (p->__pyx_v_after) {
    e = (*v)(p->__pyx_v_after, a); if (e) return e;
  }
  if (p->__pyx_v_after_all) {
    e = (*v)(p->__pyx_v_after_all, a); if (e) return e;
  }
  if (p->__pyx_v_before) {
    e = (*v)(p->__pyx_v_before, a); if (e) return e;
  }
  if (p->__pyx_v_before_all) {
    e = (*v)(p->__pyx_v_before_all, a); if (e) return e;
  }
  if (p->__pyx_v_iterable) {
    e = (*v)(p->__pyx_v_iterable, a); if (e) return e;
  }
  if (p->__pyx_v_log) {
    e = (*v)(p->__pyx_v_log, a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_9__iter_withprogress(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress *)o;
  tmp = ((PyObject*)p->__pyx_v_after);
  p->__pyx_v_after = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_after_all);
  p->__pyx_v_after_all = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_before);
  p->__pyx_v_before = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_before_all);
  p->__pyx_v_before_all = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_iterable);
  p->__pyx_v_iterable = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_log);
  p->__pyx_v_log = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_o);
  p->__pyx_v_o = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_9__iter_withprogress = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_9__iter_withprogress", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_9__iter_withprogress), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_9__iter_withprogress, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_9__iter_withprogress, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_9__iter_withprogress, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_9__iter_withprogress, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *__pyx_freelist_5vcfnp___pyx_scope_struct_10__itervariants[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_10__itervariants = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_10__itervariants(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_10__itervariants > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_10__itervariants[--__pyx_freecount_5vcfnp___pyx_scope_struct_10__itervariants];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_10__itervariants(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_10__itervariants < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_10__itervariants[__pyx_freecount_5vcfnp___pyx_scope_struct_10__itervariants++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_10__itervariants(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)o;
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_10__itervariants(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants *)o;
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_10__itervariants = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_10__itervariants", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_10__itervariants), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_10__itervariants, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_10__itervariants, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_10__itervariants, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_10__itervariants, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *__pyx_freelist_5vcfnp___pyx_scope_struct_11__itervariants_with_condition[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_11__itervariants_with_condition = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_11__itervariants_with_condition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_11__itervariants_with_condition[--__pyx_freecount_5vcfnp___pyx_scope_struct_11__itervariants_with_condition];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_condition);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_parse_info);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_11__itervariants_with_condition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_11__itervariants_with_condition[__pyx_freecount_5vcfnp___pyx_scope_struct_11__itervariants_with_condition++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)o;
  if (p->__pyx_v_condition) {
    e = (*v)(p->__pyx_v_condition, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_parse_info) {
    e = (*v)(p->__pyx_v_parse_info, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_11__itervariants_with_condition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition *)o;
  tmp = ((PyObject*)p->__pyx_v_condition);
  p->__pyx_v_condition = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_parse_info);
  p->__pyx_v_parse_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_11__itervariants_with_condition = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_11__itervariants_with_condition", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_11__itervariants_with_condition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_11__itervariants_with_condition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_11__itervariants_with_condition, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_11__itervariants_with_condition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_11__itervariants_with_condition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *__pyx_freelist_5vcfnp___pyx_scope_struct_12__calldata_arities[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_12__calldata_arities = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_12__calldata_arities(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_12__calldata_arities > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_12__calldata_arities[--__pyx_freecount_5vcfnp___pyx_scope_struct_12__calldata_arities];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_12__calldata_arities(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arities);
  Py_CLEAR(p->__pyx_v_fields);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_12__calldata_arities < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_12__calldata_arities[__pyx_freecount_5vcfnp___pyx_scope_struct_12__calldata_arities++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_12__calldata_arities(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)o;
  if (p->__pyx_v_arities) {
    e = (*v)(p->__pyx_v_arities, a); if (e) return e;
  }
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_12__calldata_arities(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)o;
  tmp = ((PyObject*)p->__pyx_v_arities);
  p->__pyx_v_arities = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_12__calldata_arities = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_12__calldata_arities", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_12__calldata_arities, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_12__calldata_arities, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_12__calldata_arities, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_12__calldata_arities, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_13_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_13_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_13_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_12__calldata_arities *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_13_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *__pyx_freelist_5vcfnp___pyx_scope_struct_14__calldata_fills[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_14__calldata_fills = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_14__calldata_fills(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_14__calldata_fills > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_14__calldata_fills[--__pyx_freecount_5vcfnp___pyx_scope_struct_14__calldata_fills];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_14__calldata_fills(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_fills);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_14__calldata_fills < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_14__calldata_fills[__pyx_freecount_5vcfnp___pyx_scope_struct_14__calldata_fills++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_14__calldata_fills(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_fills) {
    e = (*v)(p->__pyx_v_fills, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_14__calldata_fills(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fills);
  p->__pyx_v_fills = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_14__calldata_fills = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_14__calldata_fills", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_14__calldata_fills, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_14__calldata_fills, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_14__calldata_fills, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_14__calldata_fills, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_15_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_15_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_15_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_15_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_15_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_15_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_15_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_15_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_15_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_15_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_15_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_15_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_14__calldata_fills *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_15_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_15_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_15_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_15_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_15_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_15_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_15_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *__pyx_freelist_5vcfnp___pyx_scope_struct_16_build[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_16_build = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_16_build(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_16_build > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_16_build[--__pyx_freecount_5vcfnp___pyx_scope_struct_16_build];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_16_build(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_format_counts);
  Py_CLEAR(p->__pyx_v_format_types);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_16_build < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_16_build[__pyx_freecount_5vcfnp___pyx_scope_struct_16_build++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_16_build(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_format_counts) {
    e = (*v)(p->__pyx_v_format_counts, a); if (e) return e;
  }
  if (p->__pyx_v_format_types) {
    e = (*v)(p->__pyx_v_format_types, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_16_build(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_format_counts);
  p->__pyx_v_format_counts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_format_types);
  p->__pyx_v_format_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_16_build = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_16_build", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_16_build, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_16_build, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_16_build, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_16_build, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_17_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_17_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_17_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_17_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_17_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_17_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_17_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_17_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_17_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_17_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_17_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_17_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_17_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_17_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_17_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_17_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_17_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_17_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_17_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_18_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_18_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_18_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_18_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_18_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_18_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_18_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_18_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_18_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_18_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_18_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_18_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_16_build *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_18_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_18_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_18_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_18_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_18_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_18_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_18_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *__pyx_freelist_5vcfnp___pyx_scope_struct_19__itercalldata[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_19__itercalldata = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_19__itercalldata(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_19__itercalldata > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_19__itercalldata[--__pyx_freecount_5vcfnp___pyx_scope_struct_19__itercalldata];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_19__itercalldata(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_samples);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_19__itercalldata < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_19__itercalldata[__pyx_freecount_5vcfnp___pyx_scope_struct_19__itercalldata++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_19__itercalldata(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)o;
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_samples) {
    e = (*v)(p->__pyx_v_samples, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_19__itercalldata(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata *)o;
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_samples);
  p->__pyx_v_samples = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_19__itercalldata = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_19__itercalldata", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_19__itercalldata), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_19__itercalldata, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_19__itercalldata, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_19__itercalldata, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_19__itercalldata, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *__pyx_freelist_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition[--__pyx_freecount_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_condition);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_samples);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition[__pyx_freecount_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)o;
  if (p->__pyx_v_condition) {
    e = (*v)(p->__pyx_v_condition, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_samples) {
    e = (*v)(p->__pyx_v_samples, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition *)o;
  tmp = ((PyObject*)p->__pyx_v_condition);
  p->__pyx_v_condition = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_samples);
  p->__pyx_v_samples = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_20__itercalldata_with_condition", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *__pyx_freelist_5vcfnp___pyx_scope_struct_21_eff_default_transformer[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_21_eff_default_transformer = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_21_eff_default_transformer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_21_eff_default_transformer > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_21_eff_default_transformer[--__pyx_freecount_5vcfnp___pyx_scope_struct_21_eff_default_transformer];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_21_eff_default_transformer(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fills);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_21_eff_default_transformer < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_21_eff_default_transformer[__pyx_freecount_5vcfnp___pyx_scope_struct_21_eff_default_transformer++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_21_eff_default_transformer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)o;
  if (p->__pyx_v_fills) {
    e = (*v)(p->__pyx_v_fills, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_21_eff_default_transformer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)o;
  tmp = ((PyObject*)p->__pyx_v_fills);
  p->__pyx_v_fills = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_21_eff_default_transformer = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_21_eff_default_transformer", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_21_eff_default_transformer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_21_eff_default_transformer, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_21_eff_default_transformer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_21_eff_default_transformer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *__pyx_freelist_5vcfnp___pyx_scope_struct_22__transformer[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_22__transformer = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_22__transformer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_22__transformer > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_22__transformer[--__pyx_freecount_5vcfnp___pyx_scope_struct_22__transformer];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_22__transformer(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_eff);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_22__transformer < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_22__transformer[__pyx_freecount_5vcfnp___pyx_scope_struct_22__transformer++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_22__transformer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_eff) {
    e = (*v)(p->__pyx_v_eff, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_22__transformer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_21_eff_default_transformer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_eff);
  p->__pyx_v_eff = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_22__transformer = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_22__transformer", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_22__transformer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_22__transformer, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_22__transformer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_22__transformer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_23_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_23_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_23_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_23_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_23_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_23_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_23_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_fill);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_23_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_23_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_23_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_23_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_fill) {
    e = (*v)(p->__pyx_v_fill, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_23_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_22__transformer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fill);
  p->__pyx_v_fill = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_23_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_23_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_23_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_23_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_23_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_23_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_23_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *__pyx_freelist_5vcfnp___pyx_scope_struct_24___iter__[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_24___iter__ = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_24___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_24___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_24___iter__[--__pyx_freecount_5vcfnp___pyx_scope_struct_24___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_24___iter__(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_info_types);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_24___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_24___iter__[__pyx_freecount_5vcfnp___pyx_scope_struct_24___iter__++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_24___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)o;
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_info_types) {
    e = (*v)(p->__pyx_v_info_types, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_24___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_info_types);
  p->__pyx_v_info_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_24___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_24___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_24___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_24___iter__, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_24___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_24___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_25_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_25_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_25_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_25_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_25_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_25_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_25_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_25_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_25_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_25_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_25_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_25_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_25_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_25_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_25_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_25_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_25_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_25_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_25_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *__pyx_freelist_5vcfnp___pyx_scope_struct_26_genexpr[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_26_genexpr = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_26_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_26_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_26_genexpr[--__pyx_freecount_5vcfnp___pyx_scope_struct_26_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_26_genexpr(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_f);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_26_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_26_genexpr[__pyx_freecount_5vcfnp___pyx_scope_struct_26_genexpr++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_26_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_f) {
    e = (*v)(p->__pyx_v_f, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_26_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_24___iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_f);
  p->__pyx_v_f = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_26_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_26_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_26_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_26_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_26_genexpr, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_26_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_26_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *__pyx_freelist_5vcfnp___pyx_scope_struct_27__itervariantstable[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_27__itervariantstable = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_27__itervariantstable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_27__itervariantstable > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_27__itervariantstable[--__pyx_freecount_5vcfnp___pyx_scope_struct_27__itervariantstable];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_27__itervariantstable(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arities);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_fill);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_flatten);
  Py_CLEAR(p->__pyx_v_flatten_filter);
  Py_CLEAR(p->__pyx_v_info_types);
  Py_CLEAR(p->__pyx_v_parse_info);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_27__itervariantstable < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_27__itervariantstable[__pyx_freecount_5vcfnp___pyx_scope_struct_27__itervariantstable++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_27__itervariantstable(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)o;
  if (p->__pyx_v_arities) {
    e = (*v)(p->__pyx_v_arities, a); if (e) return e;
  }
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_fill) {
    e = (*v)(p->__pyx_v_fill, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_flatten) {
    e = (*v)(p->__pyx_v_flatten, a); if (e) return e;
  }
  if (p->__pyx_v_flatten_filter) {
    e = (*v)(p->__pyx_v_flatten_filter, a); if (e) return e;
  }
  if (p->__pyx_v_info_types) {
    e = (*v)(p->__pyx_v_info_types, a); if (e) return e;
  }
  if (p->__pyx_v_parse_info) {
    e = (*v)(p->__pyx_v_parse_info, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_27__itervariantstable(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable *)o;
  tmp = ((PyObject*)p->__pyx_v_arities);
  p->__pyx_v_arities = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fill);
  p->__pyx_v_fill = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatten);
  p->__pyx_v_flatten = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatten_filter);
  p->__pyx_v_flatten_filter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_info_types);
  p->__pyx_v_info_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_parse_info);
  p->__pyx_v_parse_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_27__itervariantstable = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_27__itervariantstable", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_27__itervariantstable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_27__itervariantstable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_27__itervariantstable, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_27__itervariantstable, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_27__itervariantstable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *__pyx_freelist_5vcfnp___pyx_scope_struct_28_flatten_eff[8];
static int __pyx_freecount_5vcfnp___pyx_scope_struct_28_flatten_eff = 0;

static PyObject *__pyx_tp_new_5vcfnp___pyx_scope_struct_28_flatten_eff(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp___pyx_scope_struct_28_flatten_eff > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp___pyx_scope_struct_28_flatten_eff[--__pyx_freecount_5vcfnp___pyx_scope_struct_28_flatten_eff];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_28_flatten_eff(PyObject *o) {
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fill);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp___pyx_scope_struct_28_flatten_eff < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff)))) {
    __pyx_freelist_5vcfnp___pyx_scope_struct_28_flatten_eff[__pyx_freecount_5vcfnp___pyx_scope_struct_28_flatten_eff++] = ((struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp___pyx_scope_struct_28_flatten_eff(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *)o;
  if (p->__pyx_v_fill) {
    e = (*v)(p->__pyx_v_fill, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp___pyx_scope_struct_28_flatten_eff(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *p = (struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff *)o;
  tmp = ((PyObject*)p->__pyx_v_fill);
  p->__pyx_v_fill = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp___pyx_scope_struct_28_flatten_eff = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.__pyx_scope_struct_28_flatten_eff", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp___pyx_scope_struct_28_flatten_eff), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp___pyx_scope_struct_28_flatten_eff, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp___pyx_scope_struct_28_flatten_eff, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp___pyx_scope_struct_28_flatten_eff, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp___pyx_scope_struct_28_flatten_eff, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "vcfnp",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_2_0_0_dev0, __pyx_k_2_0_0_dev0, sizeof(__pyx_k_2_0_0_dev0), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ABHet, __pyx_k_ABHet, sizeof(__pyx_k_ABHet), 0, 0, 1, 1},
  {&__pyx_n_s_ABHom, __pyx_k_ABHom, sizeof(__pyx_k_ABHom), 0, 0, 1, 1},
  {&__pyx_n_s_AC, __pyx_k_AC, sizeof(__pyx_k_AC), 0, 0, 1, 1},
  {&__pyx_n_s_AD, __pyx_k_AD, sizeof(__pyx_k_AD), 0, 0, 1, 1},
  {&__pyx_n_s_AF, __pyx_k_AF, sizeof(__pyx_k_AF), 0, 0, 1, 1},
  {&__pyx_n_b_ALT, __pyx_k_ALT, sizeof(__pyx_k_ALT), 0, 0, 0, 1},
  {&__pyx_n_s_ALT, __pyx_k_ALT, sizeof(__pyx_k_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_AN, __pyx_k_AN, sizeof(__pyx_k_AN), 0, 0, 1, 1},
  {&__pyx_kp_s_Abstract_class_providing_support, __pyx_k_Abstract_class_providing_support, sizeof(__pyx_k_Abstract_class_providing_support), 0, 0, 1, 0},
  {&__pyx_n_s_Amino_Acid_Change, __pyx_k_Amino_Acid_Change, sizeof(__pyx_k_Amino_Acid_Change), 0, 0, 1, 1},
  {&__pyx_n_s_Amino_Acid_Length, __pyx_k_Amino_Acid_Length, sizeof(__pyx_k_Amino_Acid_Length), 0, 0, 1, 1},
  {&__pyx_n_s_ArrayLoader, __pyx_k_ArrayLoader, sizeof(__pyx_k_ArrayLoader), 0, 0, 1, 1},
  {&__pyx_n_s_ArrayLoader___init, __pyx_k_ArrayLoader___init, sizeof(__pyx_k_ArrayLoader___init), 0, 0, 1, 1},
  {&__pyx_n_s_ArrayLoader_build, __pyx_k_ArrayLoader_build, sizeof(__pyx_k_ArrayLoader_build), 0, 0, 1, 1},
  {&__pyx_n_s_ArrayLoader_load, __pyx_k_ArrayLoader_load, sizeof(__pyx_k_ArrayLoader_load), 0, 0, 1, 1},
  {&__pyx_n_s_BaseQRankSum, __pyx_k_BaseQRankSum, sizeof(__pyx_k_BaseQRankSum), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CACHEDIR_SUFFIX, __pyx_k_CACHEDIR_SUFFIX, sizeof(__pyx_k_CACHEDIR_SUFFIX), 0, 0, 1, 1},
  {&__pyx_n_b_CHROM, __pyx_k_CHROM, sizeof(__pyx_k_CHROM), 0, 0, 0, 1},
  {&__pyx_n_s_CHROM, __pyx_k_CHROM, sizeof(__pyx_k_CHROM), 0, 0, 1, 1},
  {&__pyx_n_s_CODING, __pyx_k_CODING, sizeof(__pyx_k_CODING), 0, 0, 1, 1},
  {&__pyx_n_s_Calldata2DLoader, __pyx_k_Calldata2DLoader, sizeof(__pyx_k_Calldata2DLoader), 0, 0, 1, 1},
  {&__pyx_n_s_Calldata2DLoader_build, __pyx_k_Calldata2DLoader_build, sizeof(__pyx_k_Calldata2DLoader_build), 0, 0, 1, 1},
  {&__pyx_n_s_CalldataLoader, __pyx_k_CalldataLoader, sizeof(__pyx_k_CalldataLoader), 0, 0, 1, 1},
  {&__pyx_n_s_CalldataLoader_build, __pyx_k_CalldataLoader_build, sizeof(__pyx_k_CalldataLoader_build), 0, 0, 1, 1},
  {&__pyx_n_s_CalldataLoader_build_locals_gen, __pyx_k_CalldataLoader_build_locals_gen, sizeof(__pyx_k_CalldataLoader_build_locals_gen), 0, 0, 1, 1},
  {&__pyx_kp_s_Class_for_building_variants_arra, __pyx_k_Class_for_building_variants_arra, sizeof(__pyx_k_Class_for_building_variants_arra), 0, 0, 1, 0},
  {&__pyx_n_s_ClippingRankSum, __pyx_k_ClippingRankSum, sizeof(__pyx_k_ClippingRankSum), 0, 0, 1, 1},
  {&__pyx_n_s_Codon_Change, __pyx_k_Codon_Change, sizeof(__pyx_k_Codon_Change), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_CALLDATA_ARITY, __pyx_k_DEFAULT_CALLDATA_ARITY, sizeof(__pyx_k_DEFAULT_CALLDATA_ARITY), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_CALLDATA_DTYPE, __pyx_k_DEFAULT_CALLDATA_DTYPE, sizeof(__pyx_k_DEFAULT_CALLDATA_DTYPE), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_CALLDATA_FILL, __pyx_k_DEFAULT_CALLDATA_FILL, sizeof(__pyx_k_DEFAULT_CALLDATA_FILL), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_FILL_MAP, __pyx_k_DEFAULT_FILL_MAP, sizeof(__pyx_k_DEFAULT_FILL_MAP), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_FLATTEN, __pyx_k_DEFAULT_FLATTEN, sizeof(__pyx_k_DEFAULT_FLATTEN), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_INFO_DTYPE, __pyx_k_DEFAULT_INFO_DTYPE, sizeof(__pyx_k_DEFAULT_INFO_DTYPE), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_TRANSFORMER, __pyx_k_DEFAULT_TRANSFORMER, sizeof(__pyx_k_DEFAULT_TRANSFORMER), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_TYPE_MAP, __pyx_k_DEFAULT_TYPE_MAP, sizeof(__pyx_k_DEFAULT_TYPE_MAP), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_VARIANT_ARITY, __pyx_k_DEFAULT_VARIANT_ARITY, sizeof(__pyx_k_DEFAULT_VARIANT_ARITY), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_VARIANT_DTYPE, __pyx_k_DEFAULT_VARIANT_DTYPE, sizeof(__pyx_k_DEFAULT_VARIANT_DTYPE), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_VARIANT_FILL, __pyx_k_DEFAULT_VARIANT_FILL, sizeof(__pyx_k_DEFAULT_VARIANT_FILL), 0, 0, 1, 1},
  {&__pyx_n_s_DP, __pyx_k_DP, sizeof(__pyx_k_DP), 0, 0, 1, 1},
  {&__pyx_n_s_Dels, __pyx_k_Dels, sizeof(__pyx_k_Dels), 0, 0, 1, 1},
  {&__pyx_n_s_EFF, __pyx_k_EFF, sizeof(__pyx_k_EFF), 0, 0, 1, 1},
  {&__pyx_n_s_EFF_DEFAULT_DTYPE, __pyx_k_EFF_DEFAULT_DTYPE, sizeof(__pyx_k_EFF_DEFAULT_DTYPE), 0, 0, 1, 1},
  {&__pyx_n_s_EFF_DEFAULT_FILLS, __pyx_k_EFF_DEFAULT_FILLS, sizeof(__pyx_k_EFF_DEFAULT_FILLS), 0, 0, 1, 1},
  {&__pyx_n_s_EFF_FIELDS, __pyx_k_EFF_FIELDS, sizeof(__pyx_k_EFF_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_Effect, __pyx_k_Effect, sizeof(__pyx_k_Effect), 0, 0, 1, 1},
  {&__pyx_n_s_Effect_Impact, __pyx_k_Effect_Impact, sizeof(__pyx_k_Effect_Impact), 0, 0, 1, 1},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_Exon, __pyx_k_Exon, sizeof(__pyx_k_Exon), 0, 0, 1, 1},
  {&__pyx_n_b_FILTER, __pyx_k_FILTER, sizeof(__pyx_k_FILTER), 0, 0, 0, 1},
  {&__pyx_n_s_FILTER, __pyx_k_FILTER, sizeof(__pyx_k_FILTER), 0, 0, 1, 1},
  {&__pyx_n_s_FILTER_2, __pyx_k_FILTER_2, sizeof(__pyx_k_FILTER_2), 0, 0, 1, 1},
  {&__pyx_n_s_FS, __pyx_k_FS, sizeof(__pyx_k_FS), 0, 0, 1, 1},
  {&__pyx_n_s_Flag, __pyx_k_Flag, sizeof(__pyx_k_Flag), 0, 0, 1, 1},
  {&__pyx_n_s_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_Functional_Class, __pyx_k_Functional_Class, sizeof(__pyx_k_Functional_Class), 0, 0, 1, 1},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_n_s_GQ, __pyx_k_GQ, sizeof(__pyx_k_GQ), 0, 0, 1, 1},
  {&__pyx_n_b_GT, __pyx_k_GT, sizeof(__pyx_k_GT), 0, 0, 0, 1},
  {&__pyx_n_s_GT, __pyx_k_GT, sizeof(__pyx_k_GT), 0, 0, 1, 1},
  {&__pyx_n_s_Gene_Coding, __pyx_k_Gene_Coding, sizeof(__pyx_k_Gene_Coding), 0, 0, 1, 1},
  {&__pyx_n_s_Gene_Name, __pyx_k_Gene_Name, sizeof(__pyx_k_Gene_Name), 0, 0, 1, 1},
  {&__pyx_n_s_HRun, __pyx_k_HRun, sizeof(__pyx_k_HRun), 0, 0, 1, 1},
  {&__pyx_n_s_HaplotypeScore, __pyx_k_HaplotypeScore, sizeof(__pyx_k_HaplotypeScore), 0, 0, 1, 1},
  {&__pyx_n_b_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 0, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_b_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 0, 1},
  {&__pyx_n_s_InbreedingCoeff, __pyx_k_InbreedingCoeff, sizeof(__pyx_k_InbreedingCoeff), 0, 0, 1, 1},
  {&__pyx_n_s_Integer, __pyx_k_Integer, sizeof(__pyx_k_Integer), 0, 0, 1, 1},
  {&__pyx_kp_u_Load_a_numpy_1_dimensional_stru, __pyx_k_Load_a_numpy_1_dimensional_stru, sizeof(__pyx_k_Load_a_numpy_1_dimensional_stru), 0, 1, 0, 0},
  {&__pyx_kp_u_Load_an_numpy_structured_array, __pyx_k_Load_an_numpy_structured_array, sizeof(__pyx_k_Load_an_numpy_structured_array), 0, 1, 0, 0},
  {&__pyx_n_s_Logger, __pyx_k_Logger, sizeof(__pyx_k_Logger), 0, 0, 1, 1},
  {&__pyx_n_s_Logger___call, __pyx_k_Logger___call, sizeof(__pyx_k_Logger___call), 0, 0, 1, 1},
  {&__pyx_n_s_Logger___init, __pyx_k_Logger___init, sizeof(__pyx_k_Logger___init), 0, 0, 1, 1},
  {&__pyx_n_s_MLEAC, __pyx_k_MLEAC, sizeof(__pyx_k_MLEAC), 0, 0, 1, 1},
  {&__pyx_n_s_MLEAF, __pyx_k_MLEAF, sizeof(__pyx_k_MLEAF), 0, 0, 1, 1},
  {&__pyx_n_s_MLPSAC, __pyx_k_MLPSAC, sizeof(__pyx_k_MLPSAC), 0, 0, 1, 1},
  {&__pyx_n_s_MLPSAF, __pyx_k_MLPSAF, sizeof(__pyx_k_MLPSAF), 0, 0, 1, 1},
  {&__pyx_n_s_MQ, __pyx_k_MQ, sizeof(__pyx_k_MQ), 0, 0, 1, 1},
  {&__pyx_n_s_MQ0, __pyx_k_MQ0, sizeof(__pyx_k_MQ0), 0, 0, 1, 1},
  {&__pyx_n_s_MQ0Fraction, __pyx_k_MQ0Fraction, sizeof(__pyx_k_MQ0Fraction), 0, 0, 1, 1},
  {&__pyx_n_s_MQRankSum, __pyx_k_MQRankSum, sizeof(__pyx_k_MQRankSum), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_OND, __pyx_k_OND, sizeof(__pyx_k_OND), 0, 0, 1, 1},
  {&__pyx_n_s_PASS, __pyx_k_PASS, sizeof(__pyx_k_PASS), 0, 0, 1, 1},
  {&__pyx_n_s_PL, __pyx_k_PL, sizeof(__pyx_k_PL), 0, 0, 1, 1},
  {&__pyx_n_b_POS, __pyx_k_POS, sizeof(__pyx_k_POS), 0, 0, 0, 1},
  {&__pyx_n_s_POS, __pyx_k_POS, sizeof(__pyx_k_POS), 0, 0, 1, 1},
  {&__pyx_n_s_PY2, __pyx_k_PY2, sizeof(__pyx_k_PY2), 0, 0, 1, 1},
  {&__pyx_n_s_QD, __pyx_k_QD, sizeof(__pyx_k_QD), 0, 0, 1, 1},
  {&__pyx_n_b_QUAL, __pyx_k_QUAL, sizeof(__pyx_k_QUAL), 0, 0, 0, 1},
  {&__pyx_n_s_QUAL, __pyx_k_QUAL, sizeof(__pyx_k_QUAL), 0, 0, 1, 1},
  {&__pyx_n_b_REF, __pyx_k_REF, sizeof(__pyx_k_REF), 0, 0, 0, 1},
  {&__pyx_n_s_REF, __pyx_k_REF, sizeof(__pyx_k_REF), 0, 0, 1, 1},
  {&__pyx_n_s_RPA, __pyx_k_RPA, sizeof(__pyx_k_RPA), 0, 0, 1, 1},
  {&__pyx_n_s_RU, __pyx_k_RU, sizeof(__pyx_k_RU), 0, 0, 1, 1},
  {&__pyx_n_s_ReadPosRankSum, __pyx_k_ReadPosRankSum, sizeof(__pyx_k_ReadPosRankSum), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_STANDARD_CALLDATA_FIELDS, __pyx_k_STANDARD_CALLDATA_FIELDS, sizeof(__pyx_k_STANDARD_CALLDATA_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_STANDARD_VARIANT_FIELDS, __pyx_k_STANDARD_VARIANT_FIELDS, sizeof(__pyx_k_STANDARD_VARIANT_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_TYPESTRING2KEY, __pyx_k_TYPESTRING2KEY, sizeof(__pyx_k_TYPESTRING2KEY), 0, 0, 1, 1},
  {&__pyx_n_s_Transcript_BioType, __pyx_k_Transcript_BioType, sizeof(__pyx_k_Transcript_BioType), 0, 0, 1, 1},
  {&__pyx_n_s_Transcript_ID, __pyx_k_Transcript_ID, sizeof(__pyx_k_Transcript_ID), 0, 0, 1, 1},
  {&__pyx_kp_u_Utility_function_to_view_a_stru, __pyx_k_Utility_function_to_view_a_stru, sizeof(__pyx_k_Utility_function_to_view_a_stru), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VariantType, __pyx_k_VariantType, sizeof(__pyx_k_VariantType), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsLoader, __pyx_k_VariantsLoader, sizeof(__pyx_k_VariantsLoader), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsLoader_build, __pyx_k_VariantsLoader_build, sizeof(__pyx_k_VariantsLoader_build), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsLoader_build_locals_gen, __pyx_k_VariantsLoader_build_locals_gen, sizeof(__pyx_k_VariantsLoader_build_locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsTable, __pyx_k_VariantsTable, sizeof(__pyx_k_VariantsTable), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsTable___init, __pyx_k_VariantsTable___init, sizeof(__pyx_k_VariantsTable___init), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsTable___iter, __pyx_k_VariantsTable___iter, sizeof(__pyx_k_VariantsTable___iter), 0, 0, 1, 1},
  {&__pyx_n_s_VariantsTable___iter___locals_ge, __pyx_k_VariantsTable___iter___locals_ge, sizeof(__pyx_k_VariantsTable___iter___locals_ge), 0, 0, 1, 1},
  {&__pyx_kp_s_WARNING_duplicate_definition_in, __pyx_k_WARNING_duplicate_definition_in, sizeof(__pyx_k_WARNING_duplicate_definition_in), 0, 0, 1, 0},
  {&__pyx_kp_s_WARNING_no_INFO_definition_found, __pyx_k_WARNING_no_INFO_definition_found, sizeof(__pyx_k_WARNING_no_INFO_definition_found), 0, 0, 1, 0},
  {&__pyx_kp_s_WARNING_no_definition_found_for, __pyx_k_WARNING_no_definition_found_for, sizeof(__pyx_k_WARNING_no_definition_found_for), 0, 0, 1, 0},
  {&__pyx_kp_s__136, __pyx_k__136, sizeof(__pyx_k__136), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_b__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 0, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_b__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 0, 0},
  {&__pyx_kp_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
  {&__pyx_kp_s__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_b__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 0, 0},
  {&__pyx_n_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 1},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a12, __pyx_k_a12, sizeof(__pyx_k_a12), 0, 0, 1, 1},
  {&__pyx_n_s_a14, __pyx_k_a14, sizeof(__pyx_k_a14), 0, 0, 1, 1},
  {&__pyx_n_s_a20, __pyx_k_a20, sizeof(__pyx_k_a20), 0, 0, 1, 1},
  {&__pyx_n_s_a33, __pyx_k_a33, sizeof(__pyx_k_a33), 0, 0, 1, 1},
  {&__pyx_n_s_a6, __pyx_k_a6, sizeof(__pyx_k_a6), 0, 0, 1, 1},
  {&__pyx_n_s_a7, __pyx_k_a7, sizeof(__pyx_k_a7), 0, 0, 1, 1},
  {&__pyx_n_s_a8, __pyx_k_a8, sizeof(__pyx_k_a8), 0, 0, 1, 1},
  {&__pyx_kp_s_a_d, __pyx_k_a_d, sizeof(__pyx_k_a_d), 0, 0, 1, 0},
  {&__pyx_n_s_after, __pyx_k_after, sizeof(__pyx_k_after), 0, 0, 1, 1},
  {&__pyx_n_s_after_all, __pyx_k_after_all, sizeof(__pyx_k_after_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_samples, __pyx_k_all_samples, sizeof(__pyx_k_all_samples), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_arities, __pyx_k_arities, sizeof(__pyx_k_arities), 0, 0, 1, 1},
  {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
  {&__pyx_n_s_array_type, __pyx_k_array_type, sizeof(__pyx_k_array_type), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b1, __pyx_k_b1, sizeof(__pyx_k_b1), 0, 0, 1, 1},
  {&__pyx_n_s_before, __pyx_k_before, sizeof(__pyx_k_before), 0, 0, 1, 1},
  {&__pyx_n_s_before_all, __pyx_k_before_all, sizeof(__pyx_k_before_all), 0, 0, 1, 1},
  {&__pyx_n_s_binary_type, __pyx_k_binary_type, sizeof(__pyx_k_binary_type), 0, 0, 1, 1},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_kp_s_building_array, __pyx_k_building_array, sizeof(__pyx_k_building_array), 0, 0, 1, 0},
  {&__pyx_n_s_cache, __pyx_k_cache, sizeof(__pyx_k_cache), 0, 0, 1, 1},
  {&__pyx_kp_s_cache_file_available, __pyx_k_cache_file_available, sizeof(__pyx_k_cache_file_available), 0, 0, 1, 0},
  {&__pyx_kp_s_cache_file_out_of_date, __pyx_k_cache_file_out_of_date, sizeof(__pyx_k_cache_file_out_of_date), 0, 0, 1, 0},
  {&__pyx_n_s_cache_fn, __pyx_k_cache_fn, sizeof(__pyx_k_cache_fn), 0, 0, 1, 1},
  {&__pyx_n_s_cachedir, __pyx_k_cachedir, sizeof(__pyx_k_cachedir), 0, 0, 1, 1},
  {&__pyx_kp_s_caching_is_disabled, __pyx_k_caching_is_disabled, sizeof(__pyx_k_caching_is_disabled), 0, 0, 1, 0},
  {&__pyx_kp_s_caching_is_enabled, __pyx_k_caching_is_enabled, sizeof(__pyx_k_caching_is_enabled), 0, 0, 1, 0},
  {&__pyx_kp_s_caching_only_supported_when_load, __pyx_k_caching_only_supported_when_load, sizeof(__pyx_k_caching_only_supported_when_load), 0, 0, 1, 0},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_calldata, __pyx_k_calldata, sizeof(__pyx_k_calldata), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_2d, __pyx_k_calldata_2d, sizeof(__pyx_k_calldata_2d), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_arities, __pyx_k_calldata_arities, sizeof(__pyx_k_calldata_arities), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_arities_locals_genexpr, __pyx_k_calldata_arities_locals_genexpr, sizeof(__pyx_k_calldata_arities_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_dtype, __pyx_k_calldata_dtype, sizeof(__pyx_k_calldata_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_fields, __pyx_k_calldata_fields, sizeof(__pyx_k_calldata_fields), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_fills, __pyx_k_calldata_fills, sizeof(__pyx_k_calldata_fills), 0, 0, 1, 1},
  {&__pyx_n_s_calldata_fills_locals_genexpr, __pyx_k_calldata_fills_locals_genexpr, sizeof(__pyx_k_calldata_fills_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u_calldata_line_1161, __pyx_k_calldata_line_1161, sizeof(__pyx_k_calldata_line_1161), 0, 1, 0, 0},
  {&__pyx_n_s_cell_dtype, __pyx_k_cell_dtype, sizeof(__pyx_k_cell_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cols, __pyx_k_cols, sizeof(__pyx_k_cols), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtypes, __pyx_k_dtypes, sizeof(__pyx_k_dtypes), 0, 0, 1, 1},
  {&__pyx_n_s_eff, __pyx_k_eff, sizeof(__pyx_k_eff), 0, 0, 1, 1},
  {&__pyx_n_s_eff_default_transformer, __pyx_k_eff_default_transformer, sizeof(__pyx_k_eff_default_transformer), 0, 0, 1, 1},
  {&__pyx_n_s_eff_default_transformer_locals, __pyx_k_eff_default_transformer_locals, sizeof(__pyx_k_eff_default_transformer_locals), 0, 0, 1, 1},
  {&__pyx_n_s_eff_default_transformer_locals_2, __pyx_k_eff_default_transformer_locals_2, sizeof(__pyx_k_eff_default_transformer_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exclude_fields, __pyx_k_exclude_fields, sizeof(__pyx_k_exclude_fields), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_extend, __pyx_k_extend, sizeof(__pyx_k_extend), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 0, 1, 1},
  {&__pyx_n_s_f4, __pyx_k_f4, sizeof(__pyx_k_f4), 0, 0, 1, 1},
  {&__pyx_n_s_ff, __pyx_k_ff, sizeof(__pyx_k_ff), 0, 0, 1, 1},
  {&__pyx_n_s_fflds, __pyx_k_fflds, sizeof(__pyx_k_fflds), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_fieldspec, __pyx_k_fieldspec, sizeof(__pyx_k_fieldspec), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_file_not_found_s, __pyx_k_file_not_found_s, sizeof(__pyx_k_file_not_found_s), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_kp_s_filename_argument_must_be_string, __pyx_k_filename_argument_must_be_string, sizeof(__pyx_k_filename_argument_must_be_string), 0, 0, 1, 0},
  {&__pyx_n_s_filenames, __pyx_k_filenames, sizeof(__pyx_k_filenames), 0, 0, 1, 1},
  {&__pyx_n_s_filenames_from_arg, __pyx_k_filenames_from_arg, sizeof(__pyx_k_filenames_from_arg), 0, 0, 1, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_fills, __pyx_k_fills, sizeof(__pyx_k_fills), 0, 0, 1, 1},
  {&__pyx_n_s_filter_ids, __pyx_k_filter_ids, sizeof(__pyx_k_filter_ids), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_flatten_2, __pyx_k_flatten_2, sizeof(__pyx_k_flatten_2), 0, 0, 1, 1},
  {&__pyx_n_s_flatten_eff, __pyx_k_flatten_eff, sizeof(__pyx_k_flatten_eff), 0, 0, 1, 1},
  {&__pyx_n_s_flatten_eff_locals__flatten, __pyx_k_flatten_eff_locals__flatten, sizeof(__pyx_k_flatten_eff_locals__flatten), 0, 0, 1, 1},
  {&__pyx_n_s_flatten_filter, __pyx_k_flatten_filter, sizeof(__pyx_k_flatten_filter), 0, 0, 1, 1},
  {&__pyx_n_s_flt, __pyx_k_flt, sizeof(__pyx_k_flt), 0, 0, 1, 1},
  {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_format_counts, __pyx_k_format_counts, sizeof(__pyx_k_format_counts), 0, 0, 1, 1},
  {&__pyx_n_s_format_ids, __pyx_k_format_ids, sizeof(__pyx_k_format_ids), 0, 0, 1, 1},
  {&__pyx_n_s_format_types, __pyx_k_format_types, sizeof(__pyx_k_format_types), 0, 0, 1, 1},
  {&__pyx_n_s_fromiter, __pyx_k_fromiter, sizeof(__pyx_k_fromiter), 0, 0, 1, 1},
  {&__pyx_n_s_fromiter_2, __pyx_k_fromiter_2, sizeof(__pyx_k_fromiter_2), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_b_genotype, __pyx_k_genotype, sizeof(__pyx_k_genotype), 0, 0, 0, 1},
  {&__pyx_n_s_genotype, __pyx_k_genotype, sizeof(__pyx_k_genotype), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_cache_fn, __pyx_k_get_cache_fn, sizeof(__pyx_k_get_cache_fn), 0, 0, 1, 1},
  {&__pyx_n_s_get_logger, __pyx_k_get_logger, sizeof(__pyx_k_get_logger), 0, 0, 1, 1},
  {&__pyx_n_s_getmtime, __pyx_k_getmtime, sizeof(__pyx_k_getmtime), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_k_home_aliman_src_github_alimanfo, sizeof(__pyx_k_home_aliman_src_github_alimanfo), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i4, __pyx_k_i4, sizeof(__pyx_k_i4), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info_counts, __pyx_k_info_counts, sizeof(__pyx_k_info_counts), 0, 0, 1, 1},
  {&__pyx_n_s_info_ids, __pyx_k_info_ids, sizeof(__pyx_k_info_ids), 0, 0, 1, 1},
  {&__pyx_n_s_info_transformers, __pyx_k_info_transformers, sizeof(__pyx_k_info_transformers), 0, 0, 1, 1},
  {&__pyx_n_s_info_transformers_locals_genexp, __pyx_k_info_transformers_locals_genexp, sizeof(__pyx_k_info_transformers_locals_genexp), 0, 0, 1, 1},
  {&__pyx_n_s_info_types, __pyx_k_info_types, sizeof(__pyx_k_info_types), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_is_cached, __pyx_k_is_cached, sizeof(__pyx_k_is_cached), 0, 0, 1, 1},
  {&__pyx_n_b_is_called, __pyx_k_is_called, sizeof(__pyx_k_is_called), 0, 0, 0, 1},
  {&__pyx_n_s_is_called, __pyx_k_is_called, sizeof(__pyx_k_is_called), 0, 0, 1, 1},
  {&__pyx_n_b_is_phased, __pyx_k_is_phased, sizeof(__pyx_k_is_phased), 0, 0, 0, 1},
  {&__pyx_n_s_is_phased, __pyx_k_is_phased, sizeof(__pyx_k_is_phased), 0, 0, 1, 1},
  {&__pyx_n_b_is_snp, __pyx_k_is_snp, sizeof(__pyx_k_is_snp), 0, 0, 0, 1},
  {&__pyx_n_s_is_snp, __pyx_k_is_snp, sizeof(__pyx_k_is_snp), 0, 0, 1, 1},
  {&__pyx_n_s_isdir, __pyx_k_isdir, sizeof(__pyx_k_isdir), 0, 0, 1, 1},
  {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_iter_withprogress, __pyx_k_iter_withprogress, sizeof(__pyx_k_iter_withprogress), 0, 0, 1, 1},
  {&__pyx_n_s_iterable, __pyx_k_iterable, sizeof(__pyx_k_iterable), 0, 0, 1, 1},
  {&__pyx_n_s_itercalldata, __pyx_k_itercalldata, sizeof(__pyx_k_itercalldata), 0, 0, 1, 1},
  {&__pyx_n_s_itercalldata_with_condition, __pyx_k_itercalldata_with_condition, sizeof(__pyx_k_itercalldata_with_condition), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_itervariants, __pyx_k_itervariants, sizeof(__pyx_k_itervariants), 0, 0, 1, 1},
  {&__pyx_n_s_itervariants_with_condition, __pyx_k_itervariants_with_condition, sizeof(__pyx_k_itervariants_with_condition), 0, 0, 1, 1},
  {&__pyx_n_s_itervariantstable, __pyx_k_itervariantstable, sizeof(__pyx_k_itervariantstable), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_lambda, __pyx_k_lambda, sizeof(__pyx_k_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_loader, __pyx_k_loader, sizeof(__pyx_k_loader), 0, 0, 1, 1},
  {&__pyx_kp_s_loading_from_cache_file, __pyx_k_loading_from_cache_file, sizeof(__pyx_k_loading_from_cache_file), 0, 0, 1, 0},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logstream, __pyx_k_logstream, sizeof(__pyx_k_logstream), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makedirs, __pyx_k_makedirs, sizeof(__pyx_k_makedirs), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_match_eff_main, __pyx_k_match_eff_main, sizeof(__pyx_k_match_eff_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mk_cache_fn, __pyx_k_mk_cache_fn, sizeof(__pyx_k_mk_cache_fn), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_nm, __pyx_k_nm, sizeof(__pyx_k_nm), 0, 0, 1, 1},
  {&__pyx_kp_s_no_cache_file_found, __pyx_k_no_cache_file_found, sizeof(__pyx_k_no_cache_file_found), 0, 0, 1, 0},
  {&__pyx_n_s_nolog, __pyx_k_nolog, sizeof(__pyx_k_nolog), 0, 0, 1, 1},
  {&__pyx_n_s_now, __pyx_k_now, sizeof(__pyx_k_now), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_b_num_alleles, __pyx_k_num_alleles, sizeof(__pyx_k_num_alleles), 0, 0, 0, 1},
  {&__pyx_n_s_num_alleles, __pyx_k_num_alleles, sizeof(__pyx_k_num_alleles), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_parse_info, __pyx_k_parse_info, sizeof(__pyx_k_parse_info), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_plody, __pyx_k_plody, sizeof(__pyx_k_plody), 0, 0, 1, 1},
  {&__pyx_n_s_ploidy, __pyx_k_ploidy, sizeof(__pyx_k_ploidy), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_prog_eff_main, __pyx_k_prog_eff_main, sizeof(__pyx_k_prog_eff_main), 0, 0, 1, 1},
  {&__pyx_n_s_progress, __pyx_k_progress, sizeof(__pyx_k_progress), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_region, __pyx_k_region, sizeof(__pyx_k_region), 0, 0, 1, 1},
  {&__pyx_n_s_region_set, __pyx_k_region_set, sizeof(__pyx_k_region_set), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s_npy, __pyx_k_s_npy, sizeof(__pyx_k_s_npy), 0, 0, 1, 0},
  {&__pyx_kp_s_s_rows_in_2fs_batch_in_2fs_d_ro, __pyx_k_s_rows_in_2fs_batch_in_2fs_d_ro, sizeof(__pyx_k_s_rows_in_2fs_batch_in_2fs_d_ro), 0, 0, 1, 0},
  {&__pyx_kp_s_s_rows_in_2fs_d_rows_s, __pyx_k_s_rows_in_2fs_d_rows_s, sizeof(__pyx_k_s_rows_in_2fs_d_rows_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_npy, __pyx_k_s_s_npy, sizeof(__pyx_k_s_s_npy), 0, 0, 1, 0},
  {&__pyx_n_s_sampleNames, __pyx_k_sampleNames, sizeof(__pyx_k_sampleNames), 0, 0, 1, 1},
  {&__pyx_n_s_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 0, 1, 1},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_kp_s_saving_to_cache_file, __pyx_k_saving_to_cache_file, sizeof(__pyx_k_saving_to_cache_file), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_skip_cached, __pyx_k_skip_cached, sizeof(__pyx_k_skip_cached), 0, 0, 1, 1},
  {&__pyx_kp_s_skipping_load_from_cache_file, __pyx_k_skipping_load_from_cache_file, sizeof(__pyx_k_skipping_load_from_cache_file), 0, 0, 1, 0},
  {&__pyx_n_s_slice_args, __pyx_k_slice_args, sizeof(__pyx_k_slice_args), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stack, __pyx_k_stack, sizeof(__pyx_k_stack), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_string_types, __pyx_k_string_types, sizeof(__pyx_k_string_types), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_b_svlen, __pyx_k_svlen, sizeof(__pyx_k_svlen), 0, 0, 0, 1},
  {&__pyx_n_s_svlen, __pyx_k_svlen, sizeof(__pyx_k_svlen), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text_type, __pyx_k_text_type, sizeof(__pyx_k_text_type), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_transformer, __pyx_k_transformer, sizeof(__pyx_k_transformer), 0, 0, 1, 1},
  {&__pyx_n_s_transformers, __pyx_k_transformers, sizeof(__pyx_k_transformers), 0, 0, 1, 1},
  {&__pyx_n_s_u1, __pyx_k_u1, sizeof(__pyx_k_u1), 0, 0, 1, 1},
  {&__pyx_n_s_u2, __pyx_k_u2, sizeof(__pyx_k_u2), 0, 0, 1, 1},
  {&__pyx_kp_s_unexpected_error_cache_directory, __pyx_k_unexpected_error_cache_directory, sizeof(__pyx_k_unexpected_error_cache_directory), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_s_unknown_sample_s, __pyx_k_unknown_sample_s, sizeof(__pyx_k_unknown_sample_s), 0, 0, 1, 0},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_variant, __pyx_k_variant, sizeof(__pyx_k_variant), 0, 0, 1, 1},
  {&__pyx_n_s_variant_file, __pyx_k_variant_file, sizeof(__pyx_k_variant_file), 0, 0, 1, 1},
  {&__pyx_n_s_variants, __pyx_k_variants, sizeof(__pyx_k_variants), 0, 0, 1, 1},
  {&__pyx_n_s_variants_arities, __pyx_k_variants_arities, sizeof(__pyx_k_variants_arities), 0, 0, 1, 1},
  {&__pyx_n_s_variants_arities_locals_genexpr, __pyx_k_variants_arities_locals_genexpr, sizeof(__pyx_k_variants_arities_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_variants_dtype, __pyx_k_variants_dtype, sizeof(__pyx_k_variants_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_variants_fields, __pyx_k_variants_fields, sizeof(__pyx_k_variants_fields), 0, 0, 1, 1},
  {&__pyx_n_s_variants_fills, __pyx_k_variants_fills, sizeof(__pyx_k_variants_fills), 0, 0, 1, 1},
  {&__pyx_n_s_variants_fills_locals_genexpr, __pyx_k_variants_fills_locals_genexpr, sizeof(__pyx_k_variants_fills_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u_variants_line_581, __pyx_k_variants_line_581, sizeof(__pyx_k_variants_line_581), 0, 1, 0, 0},
  {&__pyx_n_s_vcf, __pyx_k_vcf, sizeof(__pyx_k_vcf), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_count, __pyx_k_vcf_count, sizeof(__pyx_k_vcf_count), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_fn, __pyx_k_vcf_fn, sizeof(__pyx_k_vcf_fn), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_fns, __pyx_k_vcf_fns, sizeof(__pyx_k_vcf_fns), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_type, __pyx_k_vcf_type, sizeof(__pyx_k_vcf_type), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_types, __pyx_k_vcf_types, sizeof(__pyx_k_vcf_types), 0, 0, 1, 1},
  {&__pyx_kp_s_vcfnp, __pyx_k_vcfnp, sizeof(__pyx_k_vcfnp), 0, 0, 1, 0},
  {&__pyx_n_s_vcfnp_2, __pyx_k_vcfnp_2, sizeof(__pyx_k_vcfnp_2), 0, 0, 1, 1},
  {&__pyx_kp_s_vcfnp_cache, __pyx_k_vcfnp_cache, sizeof(__pyx_k_vcfnp_cache), 0, 0, 1, 0},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
  {&__pyx_n_s_view2d, __pyx_k_view2d, sizeof(__pyx_k_view2d), 0, 0, 1, 1},
  {&__pyx_kp_u_view2d_line_1532, __pyx_k_view2d_line_1532, sizeof(__pyx_k_view2d_line_1532), 0, 1, 0, 0},
  {&__pyx_n_s_visited, __pyx_k_visited, sizeof(__pyx_k_visited), 0, 0, 1, 1},
  {&__pyx_n_s_warn_duplicates, __pyx_k_warn_duplicates, sizeof(__pyx_k_warn_duplicates), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "vcfnp.pyx":344
 *         filenames = filename
 *     else:
 *         raise Exception('filename argument must be string, list or tuple')             # <<<<<<<<<<<<<<
 *     for fn in filenames:
 *         if not os.path.exists(fn):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_filename_argument_must_be_string); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "vcfnp.pyx":403
 *     else:
 *         # loading a specific region
 *         region = region.replace(':', '_').replace('-', '_')             # <<<<<<<<<<<<<<
 *         cache_fn = os.path.join(cachedir, '%s.%s.npy' % (array_type, region))
 *     return cache_fn
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_s__4, __pyx_n_s__5); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_kp_s__7, __pyx_n_s__5); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "vcfnp.pyx":414
 *     # guard condition
 *     if isinstance(vcf_fn, (list, tuple)):
 *         raise Exception(             # <<<<<<<<<<<<<<
 *             'caching only supported when loading from a single VCF file'
 *         )
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_caching_only_supported_when_load); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "vcfnp.pyx":425
 *     # (if not, we will parse the VCF and build array from scratch)
 *     if not os.path.exists(cache_fn):
 *         log('no cache file found')             # <<<<<<<<<<<<<<
 *         is_cached = False
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_cache_file_found); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "vcfnp.pyx":429
 *     elif os.path.getmtime(vcf_fn) > os.path.getmtime(cache_fn):
 *         is_cached = False
 *         log('cache file out of date')             # <<<<<<<<<<<<<<
 *     else:
 *         is_cached = True
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_cache_file_out_of_date); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "vcfnp.pyx":432
 *     else:
 *         is_cached = True
 *         log('cache file available')             # <<<<<<<<<<<<<<
 * 
 *     return cache_fn, is_cached
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_cache_file_available); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "vcfnp.pyx":445
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):
 *         debug('init')             # <<<<<<<<<<<<<<
 *         self.vcf_fn = vcf_fn
 *         # deal with polymorphic vcf_fn argument
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_init); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "vcfnp.pyx":463
 *         skip_cached = self.skip_cached
 *         if cache:
 *             log('caching is enabled')             # <<<<<<<<<<<<<<
 *             cache_fn, is_cached = _get_cache_fn(vcf_fn, array_type=array_type,
 *                                                 region=region,
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_caching_is_enabled); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "vcfnp.pyx":468
 *                                                 cachedir=cachedir, log=log)
 *             if not is_cached:
 *                 log('building array')             # <<<<<<<<<<<<<<
 *                 arr = self.build()
 *                 log('saving to cache file', cache_fn)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_building_array); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "vcfnp.pyx":480
 * 
 *         else:
 *             log('caching is disabled')             # <<<<<<<<<<<<<<
 *             log('building array')
 *             arr = self.build()
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_caching_is_disabled); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "vcfnp.pyx":481
 *         else:
 *             log('caching is disabled')
 *             log('building array')             # <<<<<<<<<<<<<<
 *             arr = self.build()
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_building_array); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "vcfnp.pyx":1509
 *             return -1
 *         else:
 *             return (-1,) * ploidy             # <<<<<<<<<<<<<<
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 */
  __pyx_tuple__21 = PyTuple_New(1); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__21, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "vcfnp.pyx":1656
 *                 else (1 if v == 'CODING' else 0) if i == 8
 *                 else v
 *                 for i, (v, fill) in enumerate(zip(eff, fills)[:11])             # <<<<<<<<<<<<<<
 *             )
 *             return result
 */
  __pyx_slice__23 = PySlice_New(Py_None, __pyx_int_11, Py_None); if (unlikely(!__pyx_slice__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__23);
  __Pyx_GIVEREF(__pyx_slice__23);

  /* "vcfnp.pyx":1650
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')             # <<<<<<<<<<<<<<
 *             result = tuple(
 *                 fill if v == ''
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s__20); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "vcfnp.pyx":1644
 * 
 *     """
 *     def _transformer(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return fills
 */
  __pyx_tuple__28 = PyTuple_Pack(6, __pyx_n_s_vals, __pyx_n_s_match_eff_main, __pyx_n_s_eff, __pyx_n_s_result, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_transformer, 1644, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1711
 *         # turn arities into tuple for convenience
 *         if self.arities is None:
 *             arities = (None,) * len(fields)             # <<<<<<<<<<<<<<
 *         else:
 *             arities = tuple(self.arities.get(f) for f in fields)
 */
  __pyx_tuple__30 = PyTuple_New(1); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_INCREF(Py_None);
  PyTuple_SET_ITEM(__pyx_tuple__30, 0, Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "vcfnp.pyx":1873
 *             # ignore all but first effect
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')             # <<<<<<<<<<<<<<
 *             eff = [fill if v == '' else v for v in eff[:11]]
 *             return eff
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s__20); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "vcfnp.pyx":1874
 *             match_eff_main = _prog_eff_main.match(vals[0])
 *             eff = [match_eff_main.group(1)] + match_eff_main.group(2).split('|')
 *             eff = [fill if v == '' else v for v in eff[:11]]             # <<<<<<<<<<<<<<
 *             return eff
 *     return _flatten
 */
  __pyx_slice__35 = PySlice_New(Py_None, __pyx_int_11, Py_None); if (unlikely(!__pyx_slice__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__35);
  __Pyx_GIVEREF(__pyx_slice__35);

  /* "vcfnp.pyx":1867
 * 
 * def flatten_eff(fill='.'):
 *     def _flatten(vals):             # <<<<<<<<<<<<<<
 *         if len(vals) == 0:
 *             return [fill] * 11
 */
  __pyx_tuple__36 = PyTuple_Pack(4, __pyx_n_s_vals, __pyx_n_s_match_eff_main, __pyx_n_s_eff, __pyx_n_s_v); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_flatten_2, 1867, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "../../../../pyenv/vcfnp_py34/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "vcfnp.pyx":71
 * # these are the standard fields in the variants array
 * STANDARD_VARIANT_FIELDS = (
 *     'CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER',             # <<<<<<<<<<<<<<
 *     'num_alleles', 'is_snp', 'svlen'
 * )
 */
  __pyx_tuple__44 = PyTuple_Pack(10, __pyx_n_s_CHROM, __pyx_n_s_POS, __pyx_n_s_ID, __pyx_n_s_REF, __pyx_n_s_ALT, __pyx_n_s_QUAL, __pyx_n_s_FILTER, __pyx_n_s_num_alleles, __pyx_n_s_is_snp, __pyx_n_s_svlen); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "vcfnp.pyx":170
 * 
 * 
 * STANDARD_CALLDATA_FIELDS = ('is_called', 'is_phased', 'genotype')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_is_called, __pyx_n_s_is_phased, __pyx_n_s_genotype); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "vcfnp.pyx":223
 * 
 * 
 * def _variants_fields(fields, exclude_fields, info_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which fields to extract when loading
 *     variants."""
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_fields, __pyx_n_s_exclude_fields, __pyx_n_s_info_ids, __pyx_n_s_f); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_variants_fields, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */
  __pyx_tuple__49 = PyTuple_Pack(7, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_info_counts, __pyx_n_s_f, __pyx_n_s_vcf_count, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_variants_arities, 245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */
  __pyx_tuple__51 = PyTuple_Pack(7, __pyx_n_s_fields, __pyx_n_s_fills, __pyx_n_s_info_types, __pyx_n_s_f, __pyx_n_s_vcf_type, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_variants_fills, 272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */
  __pyx_tuple__53 = PyTuple_Pack(5, __pyx_n_s_fields, __pyx_n_s_transformers, __pyx_n_s_f, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_info_transformers, 291, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":303
 * 
 * 
 * def _variants_dtype(fields, dtypes, arities, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                     info_types):
 *     """Utility function to build a numpy dtype for a variants array,
 */
  __pyx_tuple__55 = PyTuple_Pack(13, __pyx_n_s_fields, __pyx_n_s_dtypes, __pyx_n_s_arities, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_info_types, __pyx_n_s_dtype, __pyx_n_s_f, __pyx_n_s_n, __pyx_n_s_vcf_type, __pyx_n_s_flt, __pyx_n_s_nm, __pyx_n_s_t); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(6, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_variants_dtype, 303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":337
 * 
 * 
 * def _filenames_from_arg(filename):             # <<<<<<<<<<<<<<
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_filename, __pyx_n_s_filenames, __pyx_n_s_fn); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_filenames_from_arg, 337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":356
 * class _Logger(object):
 * 
 *     def __init__(self, logstream=None):             # <<<<<<<<<<<<<<
 *         if logstream is None:
 *             logstream = sys.stderr
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_logstream); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_init_2, 356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__61 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "vcfnp.pyx":361
 *         self.logstream = logstream
 * 
 *     def __call__(self, *msg):             # <<<<<<<<<<<<<<
 *         s = ('[vcfnp] '
 *              + str(datetime.now())
 */
  __pyx_tuple__62 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_msg, __pyx_n_s_s, __pyx_n_s_m); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_call, 361, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":370
 * 
 * 
 * def _nolog(*args, **kwargs):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_nolog, 370, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":374
 * 
 * 
 * def _get_logger(logstream, verbose):             # <<<<<<<<<<<<<<
 *     if verbose:
 *         log = _Logger(logstream)
 */
  __pyx_tuple__66 = PyTuple_Pack(3, __pyx_n_s_logstream, __pyx_n_s_verbose, __pyx_n_s_log); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_get_logger, 374, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":385
 * 
 * 
 * def _mk_cache_fn(vcf_fn, array_type, region=None, cachedir=None):             # <<<<<<<<<<<<<<
 *     """Utility function to construct a filename for a cache file, given a VCF
 *     file name (where the original data came from) and other parameters."""
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_vcf_fn, __pyx_n_s_array_type, __pyx_n_s_region, __pyx_n_s_cachedir, __pyx_n_s_cache_fn); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_mk_cache_fn, 385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":408
 * 
 * 
 * def _get_cache_fn(vcf_fn, array_type, region, cachedir, log):             # <<<<<<<<<<<<<<
 *     """Utility function to obtain a cache file name and determine whether or
 *     not a fresh cache file is available."""
 */
  __pyx_tuple__70 = PyTuple_Pack(7, __pyx_n_s_vcf_fn, __pyx_n_s_array_type, __pyx_n_s_region, __pyx_n_s_cachedir, __pyx_n_s_log, __pyx_n_s_cache_fn, __pyx_n_s_is_cached); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(5, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_get_cache_fn, 408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":444
 *     array_type = None
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):             # <<<<<<<<<<<<<<
 *         debug('init')
 *         self.vcf_fn = vcf_fn
 */
  __pyx_tuple__72 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_vcf_fn, __pyx_n_s_logstream, __pyx_n_s_verbose, __pyx_n_s_kwargs, __pyx_n_s_k, __pyx_n_s_v); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_init_2, 444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":453
 *             setattr(self, k, v)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 *         debug(log)
 */
  __pyx_tuple__74 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_log, __pyx_n_s_array_type, __pyx_n_s_vcf_fn, __pyx_n_s_region, __pyx_n_s_cache, __pyx_n_s_cachedir, __pyx_n_s_skip_cached, __pyx_n_s_cache_fn, __pyx_n_s_is_cached, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_load, 453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":487
 * 
 *     # to be overridden in subclass
 *     def build(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_build, 487, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(26, __pyx_n_s_self, __pyx_n_s_log, __pyx_n_s_vcf_fns, __pyx_n_s_vcf, __pyx_n_s_filter_ids, __pyx_n_s_info_ids, __pyx_n_s_info_types, __pyx_n_s_info_counts, __pyx_n_s_fields, __pyx_n_s_parse_info, __pyx_n_s_vcf_types, __pyx_n_s_f, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_transformers, __pyx_n_s_fieldspec, __pyx_n_s_flatten_filter, __pyx_n_s_dtype, __pyx_n_s_region, __pyx_n_s_condition, __pyx_n_s_it, __pyx_n_s_slice_args, __pyx_n_s_arr, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 26, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_build, 496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":581
 * 
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,             # <<<<<<<<<<<<<<
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 */
  __pyx_tuple__80 = PyTuple_Pack(20, __pyx_n_s_vcf_fn, __pyx_n_s_region, __pyx_n_s_fields, __pyx_n_s_exclude_fields, __pyx_n_s_dtypes, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_transformers, __pyx_n_s_vcf_types, __pyx_n_s_count, __pyx_n_s_progress, __pyx_n_s_logstream, __pyx_n_s_condition, __pyx_n_s_slice_args, __pyx_n_s_flatten_filter, __pyx_n_s_verbose, __pyx_n_s_cache, __pyx_n_s_cachedir, __pyx_n_s_skip_cached, __pyx_n_s_loader); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(19, 0, 20, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_variants, 581, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":679
 * 
 * 
 * def _fromiter(it, dtype, count, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:
 */
  __pyx_tuple__82 = PyTuple_Pack(6, __pyx_n_s_it, __pyx_n_s_dtype, __pyx_n_s_count, __pyx_n_s_progress, __pyx_n_s_log, __pyx_n_s_a); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_fromiter, 679, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":690
 * 
 * 
 * def _iter_withprogress(iterable, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator, reporting progress
 *     as we go."""
 */
  __pyx_tuple__84 = PyTuple_Pack(10, __pyx_n_s_iterable, __pyx_n_s_progress, __pyx_n_s_log, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_before_all, __pyx_n_s_before, __pyx_n_s_o, __pyx_n_s_after, __pyx_n_s_after_all); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_iter_withprogress, 690, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":709
 * 
 * 
 * def _itervariants(vcf_fns, region, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                   bint flatten_filter, bint parse_info):
 *     """Iterate over variants from a VCF file, and generate a tuple for each
 */
  __pyx_tuple__86 = PyTuple_Pack(10, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fieldspec, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_parse_info, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(6, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariants, 709, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":742
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, list fieldspec,             # <<<<<<<<<<<<<<
 *                                  tuple filter_ids, bint flatten_filter,
 *                                  parse_info, condition):
 */
  __pyx_tuple__88 = PyTuple_Pack(13, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fieldspec, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_parse_info, __pyx_n_s_condition, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(7, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariants_with_condition, 742, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":891
 * 
 * 
 * def _warn_duplicates(fields):             # <<<<<<<<<<<<<<
 *     visited = set()
 *     for f in fields:
 */
  __pyx_tuple__90 = PyTuple_Pack(3, __pyx_n_s_fields, __pyx_n_s_visited, __pyx_n_s_f); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_warn_duplicates, 891, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":991
 * 
 * 
 * def _calldata_fields(fields, exclude_fields, format_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which calldata (i.e., FORMAT) fields to
 *     extract."""
 */
  __pyx_tuple__92 = PyTuple_Pack(4, __pyx_n_s_fields, __pyx_n_s_exclude_fields, __pyx_n_s_format_ids, __pyx_n_s_f); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata_fields, 991, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */
  __pyx_tuple__94 = PyTuple_Pack(8, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_format_counts, __pyx_n_s_ploidy, __pyx_n_s_f, __pyx_n_s_vcf_count, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata_arities, 1013, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */
  __pyx_tuple__96 = PyTuple_Pack(8, __pyx_n_s_fields, __pyx_n_s_fills, __pyx_n_s_format_types, __pyx_n_s_ploidy, __pyx_n_s_f, __pyx_n_s_vcf_type, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata_fills, 1038, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1052
 * 
 * 
 * def _calldata_dtype(fields, dtypes, format_types, arities, samples, ploidy):             # <<<<<<<<<<<<<<
 * 
 *     # construct a numpy dtype for structured array cells
 */
  __pyx_tuple__98 = PyTuple_Pack(13, __pyx_n_s_fields, __pyx_n_s_dtypes, __pyx_n_s_format_types, __pyx_n_s_arities, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_cell_dtype, __pyx_n_s_f, __pyx_n_s_vcf_type, __pyx_n_s_n, __pyx_n_s_t, __pyx_n_s_dtype, __pyx_n_s_s); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(6, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata_dtype, 1052, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(26, __pyx_n_s_self, __pyx_n_s_log, __pyx_n_s_vcf_fns, __pyx_n_s_vcf, __pyx_n_s_format_ids, __pyx_n_s_format_types, __pyx_n_s_format_counts, __pyx_n_s_all_samples, __pyx_n_s_samples, __pyx_n_s_s, __pyx_n_s_fields, __pyx_n_s_vcf_types, __pyx_n_s_f, __pyx_n_s_ploidy, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_dtype, __pyx_n_s_fieldspec, __pyx_n_s_condition, __pyx_n_s_region, __pyx_n_s_it, __pyx_n_s_slice_args, __pyx_n_s_arr, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 26, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_build, 1080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1161
 * 
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,             # <<<<<<<<<<<<<<
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 */
  __pyx_tuple__102 = PyTuple_Pack(21, __pyx_n_s_vcf_fn, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fields, __pyx_n_s_exclude_fields, __pyx_n_s_dtypes, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_vcf_types, __pyx_n_s_count, __pyx_n_s_progress, __pyx_n_s_logstream, __pyx_n_s_condition, __pyx_n_s_slice_args, __pyx_n_s_verbose, __pyx_n_s_cache, __pyx_n_s_cachedir, __pyx_n_s_skip_cached, __pyx_n_s_loader, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(19, 0, 21, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata, 1161, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1329
 *     array_type = 'calldata_2d'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         arr = super().build()
 *         return view2d(arr)
 */
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_build, 1329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1334
 * 
 * 
 * def calldata_2d(vcf_fn, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     Load a numpy 2-dimensional structured array with data from the sample
 */
  __pyx_tuple__106 = PyTuple_Pack(4, __pyx_n_s_vcf_fn, __pyx_n_s_kwargs, __pyx_n_s_loader, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_calldata_2d, 1334, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1389
 * 
 * 
 * def _itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
  __pyx_tuple__108 = PyTuple_Pack(9, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fieldspec, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itercalldata, 1389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1411
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy,             # <<<<<<<<<<<<<<
 *                                  list fieldspec, condition):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_tuple__110 = PyTuple_Pack(12, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fieldspec, __pyx_n_s_condition, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(6, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itercalldata_with_condition, 1411, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1532
 * 
 * 
 * def view2d(a):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to view a structured 1D array where all fields have a
 */
  __pyx_tuple__112 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_rows, __pyx_n_s_cols, __pyx_n_s_dtype, __pyx_n_s_b); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_view2d, 1532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1617
 * 
 * EFF_DEFAULT_DTYPE = [
 *     ('Effect', 'a33'),             # <<<<<<<<<<<<<<
 *     ('Effect_Impact', 'a8'),
 *     ('Functional_Class', 'a8'),
 */
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_n_s_Effect, __pyx_n_s_a33); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "vcfnp.pyx":1618
 * EFF_DEFAULT_DTYPE = [
 *     ('Effect', 'a33'),
 *     ('Effect_Impact', 'a8'),             # <<<<<<<<<<<<<<
 *     ('Functional_Class', 'a8'),
 *     ('Codon_Change', 'a7'), # N.B., will lose information for indels
 */
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_n_s_Effect_Impact, __pyx_n_s_a8); if (unlikely(!__pyx_tuple__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "vcfnp.pyx":1619
 *     ('Effect', 'a33'),
 *     ('Effect_Impact', 'a8'),
 *     ('Functional_Class', 'a8'),             # <<<<<<<<<<<<<<
 *     ('Codon_Change', 'a7'), # N.B., will lose information for indels
 *     ('Amino_Acid_Change', 'a6'), # N.B., will lose information for indels
 */
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_n_s_Functional_Class, __pyx_n_s_a8); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "vcfnp.pyx":1620
 *     ('Effect_Impact', 'a8'),
 *     ('Functional_Class', 'a8'),
 *     ('Codon_Change', 'a7'), # N.B., will lose information for indels             # <<<<<<<<<<<<<<
 *     ('Amino_Acid_Change', 'a6'), # N.B., will lose information for indels
 *     ('Amino_Acid_Length', 'i4'),
 */
  __pyx_tuple__117 = PyTuple_Pack(2, __pyx_n_s_Codon_Change, __pyx_n_s_a7); if (unlikely(!__pyx_tuple__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "vcfnp.pyx":1621
 *     ('Functional_Class', 'a8'),
 *     ('Codon_Change', 'a7'), # N.B., will lose information for indels
 *     ('Amino_Acid_Change', 'a6'), # N.B., will lose information for indels             # <<<<<<<<<<<<<<
 *     ('Amino_Acid_Length', 'i4'),
 *     ('Gene_Name', 'a14'), # N.B., may be too short for some species
 */
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_n_s_Amino_Acid_Change, __pyx_n_s_a6); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "vcfnp.pyx":1622
 *     ('Codon_Change', 'a7'), # N.B., will lose information for indels
 *     ('Amino_Acid_Change', 'a6'), # N.B., will lose information for indels
 *     ('Amino_Acid_Length', 'i4'),             # <<<<<<<<<<<<<<
 *     ('Gene_Name', 'a14'), # N.B., may be too short for some species
 *     ('Transcript_BioType', 'a20'),
 */
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_n_s_Amino_Acid_Length, __pyx_n_s_i4); if (unlikely(!__pyx_tuple__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "vcfnp.pyx":1623
 *     ('Amino_Acid_Change', 'a6'), # N.B., will lose information for indels
 *     ('Amino_Acid_Length', 'i4'),
 *     ('Gene_Name', 'a14'), # N.B., may be too short for some species             # <<<<<<<<<<<<<<
 *     ('Transcript_BioType', 'a20'),
 *     ('Gene_Coding', 'i1'),
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_Gene_Name, __pyx_n_s_a14); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "vcfnp.pyx":1624
 *     ('Amino_Acid_Length', 'i4'),
 *     ('Gene_Name', 'a14'), # N.B., may be too short for some species
 *     ('Transcript_BioType', 'a20'),             # <<<<<<<<<<<<<<
 *     ('Gene_Coding', 'i1'),
 *     ('Transcript_ID', 'a20'),
 */
  __pyx_tuple__121 = PyTuple_Pack(2, __pyx_n_s_Transcript_BioType, __pyx_n_s_a20); if (unlikely(!__pyx_tuple__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "vcfnp.pyx":1625
 *     ('Gene_Name', 'a14'), # N.B., may be too short for some species
 *     ('Transcript_BioType', 'a20'),
 *     ('Gene_Coding', 'i1'),             # <<<<<<<<<<<<<<
 *     ('Transcript_ID', 'a20'),
 *     ('Exon', 'i1')
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_Gene_Coding, __pyx_n_s_i1); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "vcfnp.pyx":1626
 *     ('Transcript_BioType', 'a20'),
 *     ('Gene_Coding', 'i1'),
 *     ('Transcript_ID', 'a20'),             # <<<<<<<<<<<<<<
 *     ('Exon', 'i1')
 * ]
 */
  __pyx_tuple__123 = PyTuple_Pack(2, __pyx_n_s_Transcript_ID, __pyx_n_s_a20); if (unlikely(!__pyx_tuple__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "vcfnp.pyx":1627
 *     ('Gene_Coding', 'i1'),
 *     ('Transcript_ID', 'a20'),
 *     ('Exon', 'i1')             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_s_Exon, __pyx_n_s_i1); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "vcfnp.pyx":1635
 * 
 * 
 * EFF_DEFAULT_FILLS = ('.', '.', '.', '.', '.', -1, '.', '.', -1, '.', -1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__125 = PyTuple_Pack(11, __pyx_kp_s__19, __pyx_kp_s__19, __pyx_kp_s__19, __pyx_kp_s__19, __pyx_kp_s__19, __pyx_int_neg_1, __pyx_kp_s__19, __pyx_kp_s__19, __pyx_int_neg_1, __pyx_kp_s__19, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */
  __pyx_tuple__126 = PyTuple_Pack(3, __pyx_n_s_fills, __pyx_n_s_transformer, __pyx_n_s_transformer); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_eff_default_transformer, 1638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1667
 * class VariantsTable(object):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  filename,
 *                  region=None,
 */
  __pyx_tuple__128 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_region, __pyx_n_s_fields, __pyx_n_s_exclude_fields, __pyx_n_s_arities, __pyx_n_s_flatten_filter, __pyx_n_s_fill, __pyx_n_s_flatten); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(9, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_init_2, 1667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__130 = PyTuple_Pack(7, ((PyObject *)Py_None), ((PyObject *)Py_None), ((PyObject *)Py_None), ((PyObject *)Py_None), ((PyObject *)Py_False), ((PyObject*)__pyx_kp_s__19), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */
  __pyx_tuple__131 = PyTuple_Pack(20, __pyx_n_s_self, __pyx_n_s_vcf_fns, __pyx_n_s_vcf, __pyx_n_s_filter_ids, __pyx_n_s_info_ids, __pyx_n_s_info_types, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_parse_info, __pyx_n_s_f, __pyx_n_s_ff, __pyx_n_s_t, __pyx_n_s_header, __pyx_n_s_i, __pyx_n_s_fflds, __pyx_n_s__5, __pyx_n_s_data, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(1, 0, 20, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_iter, 1686, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1757
 * 
 * 
 * def _itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                        filter_ids, flatten_filter, fill, flatten):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_tuple__133 = PyTuple_Pack(14, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_info_types, __pyx_n_s_parse_info, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_fill, __pyx_n_s_flatten, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(10, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariantstable, 1757, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1849
 * 
 * EFF_FIELDS = (
 *     'Effect',             # <<<<<<<<<<<<<<
 *     'Effect_Impact',
 *     'Functional_Class',
 */
  __pyx_tuple__135 = PyTuple_Pack(11, __pyx_n_s_Effect, __pyx_n_s_Effect_Impact, __pyx_n_s_Functional_Class, __pyx_n_s_Codon_Change, __pyx_n_s_Amino_Acid_Change, __pyx_n_s_Amino_Acid_Length, __pyx_n_s_Gene_Name, __pyx_n_s_Transcript_BioType, __pyx_n_s_Gene_Coding, __pyx_n_s_Transcript_ID, __pyx_n_s_Exon); if (unlikely(!__pyx_tuple__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "vcfnp.pyx":1863
 * 
 * 
 * _prog_eff_main = re.compile(r'([^(]+)\(([^)]+)\)')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s__136); if (unlikely(!__pyx_tuple__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */
  __pyx_tuple__138 = PyTuple_Pack(3, __pyx_n_s_fill, __pyx_n_s_flatten_2, __pyx_n_s_flatten_2); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_flatten_eff, 1866, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initvcfnp(void); /*proto*/
PyMODINIT_FUNC initvcfnp(void)
#else
PyMODINIT_FUNC PyInit_vcfnp(void); /*proto*/
PyMODINIT_FUNC PyInit_vcfnp(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_vcfnp(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("vcfnp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_vcfnp) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "vcfnp")) {
      if (unlikely(PyDict_SetItemString(modules, "vcfnp", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct___variants_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct___variants_arities.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct___variants_arities = &__pyx_type_5vcfnp___pyx_scope_struct___variants_arities;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_1_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_2__variants_fills) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_2__variants_fills.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_2__variants_fills = &__pyx_type_5vcfnp___pyx_scope_struct_2__variants_fills;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_3_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_3_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_4__info_transformers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_4__info_transformers.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_4__info_transformers = &__pyx_type_5vcfnp___pyx_scope_struct_4__info_transformers;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_5_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_5_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_5_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_6_build) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_6_build.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_6_build = &__pyx_type_5vcfnp___pyx_scope_struct_6_build;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_7_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_7_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_7_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_8_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_8_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_8_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_8_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_9__iter_withprogress) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_9__iter_withprogress.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_9__iter_withprogress = &__pyx_type_5vcfnp___pyx_scope_struct_9__iter_withprogress;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_10__itervariants) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_10__itervariants.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_10__itervariants = &__pyx_type_5vcfnp___pyx_scope_struct_10__itervariants;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_11__itervariants_with_condition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_11__itervariants_with_condition.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_11__itervariants_with_condition = &__pyx_type_5vcfnp___pyx_scope_struct_11__itervariants_with_condition;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_12__calldata_arities) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_12__calldata_arities.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_12__calldata_arities = &__pyx_type_5vcfnp___pyx_scope_struct_12__calldata_arities;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_13_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_13_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_13_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_13_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_14__calldata_fills) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_14__calldata_fills.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_14__calldata_fills = &__pyx_type_5vcfnp___pyx_scope_struct_14__calldata_fills;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_15_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_15_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_15_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_15_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_16_build) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_16_build.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_16_build = &__pyx_type_5vcfnp___pyx_scope_struct_16_build;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_17_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_17_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_17_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_17_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_18_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_18_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_18_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_18_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_19__itercalldata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_19__itercalldata.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_19__itercalldata = &__pyx_type_5vcfnp___pyx_scope_struct_19__itercalldata;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition = &__pyx_type_5vcfnp___pyx_scope_struct_20__itercalldata_with_condition;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_21_eff_default_transformer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_21_eff_default_transformer.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_21_eff_default_transformer = &__pyx_type_5vcfnp___pyx_scope_struct_21_eff_default_transformer;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_22__transformer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_22__transformer.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_22__transformer = &__pyx_type_5vcfnp___pyx_scope_struct_22__transformer;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_23_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_23_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_23_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_23_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_24___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_24___iter__.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_24___iter__ = &__pyx_type_5vcfnp___pyx_scope_struct_24___iter__;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_25_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_25_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_25_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_25_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_26_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_26_genexpr.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_26_genexpr = &__pyx_type_5vcfnp___pyx_scope_struct_26_genexpr;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_27__itervariantstable) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_27__itervariantstable.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_27__itervariantstable = &__pyx_type_5vcfnp___pyx_scope_struct_27__itervariantstable;
  if (PyType_Ready(&__pyx_type_5vcfnp___pyx_scope_struct_28_flatten_eff) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5vcfnp___pyx_scope_struct_28_flatten_eff.tp_print = 0;
  __pyx_ptype_5vcfnp___pyx_scope_struct_28_flatten_eff = &__pyx_type_5vcfnp___pyx_scope_struct_28_flatten_eff;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6vcflib_PyVariantCallFile = __Pyx_ImportType("vcflib", "PyVariantCallFile", sizeof(struct __pyx_obj_6vcflib_PyVariantCallFile), 1); if (unlikely(!__pyx_ptype_6vcflib_PyVariantCallFile)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "vcfnp.pyx":8
 * 
 * 
 * __version__ = '2.0.0.dev0'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_s_2_0_0_dev0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":11
 * 
 * 
 * import sys             # <<<<<<<<<<<<<<
 * import re
 * from itertools import chain
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":12
 * 
 * import sys
 * import re             # <<<<<<<<<<<<<<
 * from itertools import chain
 * import numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":13
 * import sys
 * import re
 * from itertools import chain             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_chain);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_chain);
  __Pyx_GIVEREF(__pyx_n_s_chain);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_chain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chain, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":14
 * import re
 * from itertools import chain
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from vcflib cimport (PyVariantCallFile, VariantCallFile, Variant,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":26
 * from libc.stdlib cimport atoi, atol, atof
 * from cython.operator cimport dereference as deref
 * import time             # <<<<<<<<<<<<<<
 * from itertools import islice
 * import os
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":27
 * from cython.operator cimport dereference as deref
 * import time
 * from itertools import islice             # <<<<<<<<<<<<<<
 * import os
 * from datetime import datetime
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_islice);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_islice);
  __Pyx_GIVEREF(__pyx_n_s_islice);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_islice); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_islice, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":28
 * import time
 * from itertools import islice
 * import os             # <<<<<<<<<<<<<<
 * from datetime import datetime
 * import logging
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":29
 * from itertools import islice
 * import os
 * from datetime import datetime             # <<<<<<<<<<<<<<
 * import logging
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_datetime);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_datetime);
  __Pyx_GIVEREF(__pyx_n_s_datetime);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_datetime, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":30
 * import os
 * from datetime import datetime
 * import logging             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":33
 * 
 * 
 * logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 * import inspect
 * debug = lambda msg: logger.debug('%s: %s' % (inspect.stack()[0][3], msg))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":34
 * 
 * logger = logging.getLogger(__name__)
 * import inspect             # <<<<<<<<<<<<<<
 * debug = lambda msg: logger.debug('%s: %s' % (inspect.stack()[0][3], msg))
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_inspect, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inspect, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":35
 * logger = logging.getLogger(__name__)
 * import inspect
 * debug = lambda msg: logger.debug('%s: %s' % (inspect.stack()[0][3], msg))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_62lambda1, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_vcfnp_2, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_debug, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":39
 * 
 * # PY2/3 compatibility
 * PY2 = sys.version_info[0] == 2             # <<<<<<<<<<<<<<
 * if PY2:
 *     text_type = unicode
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_version_info); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY2, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":40
 * # PY2/3 compatibility
 * PY2 = sys.version_info[0] == 2
 * if PY2:             # <<<<<<<<<<<<<<
 *     text_type = unicode
 *     binary_type = str
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "vcfnp.pyx":41
 * PY2 = sys.version_info[0] == 2
 * if PY2:
 *     text_type = unicode             # <<<<<<<<<<<<<<
 *     binary_type = str
 *     string_types = basestring,
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_type, ((PyObject *)((PyObject*)(&PyUnicode_Type)))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":42
 * if PY2:
 *     text_type = unicode
 *     binary_type = str             # <<<<<<<<<<<<<<
 *     string_types = basestring,
 * else:
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_binary_type, ((PyObject *)((PyObject*)(&PyString_Type)))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":43
 *     text_type = unicode
 *     binary_type = str
 *     string_types = basestring,             # <<<<<<<<<<<<<<
 * else:
 *     text_type = str
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyBaseString_Type))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((PyObject*)(&PyBaseString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyBaseString_Type))));
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_types, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L2;
  }
  /*else*/ {

    /* "vcfnp.pyx":45
 *     string_types = basestring,
 * else:
 *     text_type = str             # <<<<<<<<<<<<<<
 *     binary_type = bytes
 *     string_types = str,
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_type, ((PyObject *)((PyObject*)(&PyString_Type)))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":46
 * else:
 *     text_type = str
 *     binary_type = bytes             # <<<<<<<<<<<<<<
 *     string_types = str,
 * 
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_binary_type, ((PyObject *)((PyObject*)(&PyBytes_Type)))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "vcfnp.pyx":47
 *     text_type = str
 *     binary_type = bytes
 *     string_types = str,             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_types, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L2:;

  /* "vcfnp.pyx":50
 * 
 * 
 * cdef size_t npos = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_5vcfnp_npos = -1;

  /* "vcfnp.pyx":62
 * 
 * 
 * TYPESTRING2KEY = {             # <<<<<<<<<<<<<<
 *     'Float': FIELD_FLOAT,
 *     'Integer': FIELD_INTEGER,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "vcfnp.pyx":63
 * 
 * TYPESTRING2KEY = {
 *     'Float': FIELD_FLOAT,             # <<<<<<<<<<<<<<
 *     'Integer': FIELD_INTEGER,
 *     'String': FIELD_STRING,
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_FLOAT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Float, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":64
 * TYPESTRING2KEY = {
 *     'Float': FIELD_FLOAT,
 *     'Integer': FIELD_INTEGER,             # <<<<<<<<<<<<<<
 *     'String': FIELD_STRING,
 *     'Flag': FIELD_BOOL,
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_INTEGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Integer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":65
 *     'Float': FIELD_FLOAT,
 *     'Integer': FIELD_INTEGER,
 *     'String': FIELD_STRING,             # <<<<<<<<<<<<<<
 *     'Flag': FIELD_BOOL,
 * }
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_String, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":66
 *     'Integer': FIELD_INTEGER,
 *     'String': FIELD_STRING,
 *     'Flag': FIELD_BOOL,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_BOOL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Flag, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPESTRING2KEY, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":71
 * # these are the standard fields in the variants array
 * STANDARD_VARIANT_FIELDS = (
 *     'CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER',             # <<<<<<<<<<<<<<
 *     'num_alleles', 'is_snp', 'svlen'
 * )
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STANDARD_VARIANT_FIELDS, __pyx_tuple__44) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":77
 * 
 * # default dtypes for the variants array fields
 * DEFAULT_VARIANT_DTYPE = {             # <<<<<<<<<<<<<<
 *     'CHROM': 'a12',
 *     'POS': 'i4',
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_CHROM, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_POS, __pyx_n_s_i4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ID, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_REF, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ALT, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_QUAL, __pyx_n_s_f4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_num_alleles, __pyx_n_s_u1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_snp, __pyx_n_s_b1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_svlen, __pyx_n_s_i4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_VARIANT_DTYPE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":91
 * 
 * # default arities for the variants array fields
 * DEFAULT_VARIANT_ARITY = {             # <<<<<<<<<<<<<<
 *     'CHROM': 1,
 *     'POS': 1,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_CHROM, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_POS, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ID, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_REF, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ALT, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_QUAL, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_num_alleles, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_snp, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_svlen, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_VARIANT_ARITY, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":105
 * 
 * # default fill values for the variants fields if values are missing
 * DEFAULT_VARIANT_FILL = {             # <<<<<<<<<<<<<<
 *     'CHROM': '',
 *     'POS': 0,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_CHROM, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_POS, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ID, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_REF, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ALT, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_QUAL, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_num_alleles, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":113
 *     'QUAL': 0,
 *     'num_alleles': 0,
 *     'is_snp': False,             # <<<<<<<<<<<<<<
 *     'svlen': 0,
 * }
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_snp, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_svlen, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_VARIANT_FILL, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":119
 * 
 * # default mapping from VCF field types to numpy dtypes
 * DEFAULT_TYPE_MAP = {             # <<<<<<<<<<<<<<
 *     FIELD_FLOAT: 'f4',
 *     FIELD_INTEGER: 'i4',
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "vcfnp.pyx":120
 * # default mapping from VCF field types to numpy dtypes
 * DEFAULT_TYPE_MAP = {
 *     FIELD_FLOAT: 'f4',             # <<<<<<<<<<<<<<
 *     FIELD_INTEGER: 'i4',
 *     FIELD_STRING: 'a12',
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_FLOAT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_n_s_f4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":121
 * DEFAULT_TYPE_MAP = {
 *     FIELD_FLOAT: 'f4',
 *     FIELD_INTEGER: 'i4',             # <<<<<<<<<<<<<<
 *     FIELD_STRING: 'a12',
 *     FIELD_BOOL: 'b1',
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_INTEGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_n_s_i4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":122
 *     FIELD_FLOAT: 'f4',
 *     FIELD_INTEGER: 'i4',
 *     FIELD_STRING: 'a12',             # <<<<<<<<<<<<<<
 *     FIELD_BOOL: 'b1',
 *     FIELD_UNKNOWN: 'a12' # leave as string
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":123
 *     FIELD_INTEGER: 'i4',
 *     FIELD_STRING: 'a12',
 *     FIELD_BOOL: 'b1',             # <<<<<<<<<<<<<<
 *     FIELD_UNKNOWN: 'a12' # leave as string
 * }
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_BOOL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_n_s_b1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":124
 *     FIELD_STRING: 'a12',
 *     FIELD_BOOL: 'b1',
 *     FIELD_UNKNOWN: 'a12' # leave as string             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_UNKNOWN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_TYPE_MAP, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":129
 * 
 * # default mapping from VCF field types to fill values for missing values
 * DEFAULT_FILL_MAP = {             # <<<<<<<<<<<<<<
 *     FIELD_FLOAT: 0.,
 *     FIELD_INTEGER: 0,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "vcfnp.pyx":130
 * # default mapping from VCF field types to fill values for missing values
 * DEFAULT_FILL_MAP = {
 *     FIELD_FLOAT: 0.,             # <<<<<<<<<<<<<<
 *     FIELD_INTEGER: 0,
 *     FIELD_STRING: '',
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_FLOAT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_float_0_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":131
 * DEFAULT_FILL_MAP = {
 *     FIELD_FLOAT: 0.,
 *     FIELD_INTEGER: 0,             # <<<<<<<<<<<<<<
 *     FIELD_STRING: '',
 *     FIELD_BOOL: False,
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_INTEGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":132
 *     FIELD_FLOAT: 0.,
 *     FIELD_INTEGER: 0,
 *     FIELD_STRING: '',             # <<<<<<<<<<<<<<
 *     FIELD_BOOL: False,
 *     FIELD_UNKNOWN: ''
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":133
 *     FIELD_INTEGER: 0,
 *     FIELD_STRING: '',
 *     FIELD_BOOL: False,             # <<<<<<<<<<<<<<
 *     FIELD_UNKNOWN: ''
 * }
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_BOOL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":134
 *     FIELD_STRING: '',
 *     FIELD_BOOL: False,
 *     FIELD_UNKNOWN: ''             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = PyInt_FromLong(vcf::FIELD_UNKNOWN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_t_2, __pyx_kp_s__24) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_FILL_MAP, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":140
 * # default dtypes for some known INFO fields where lower precision is
 * # acceptable in most cases
 * DEFAULT_INFO_DTYPE = {             # <<<<<<<<<<<<<<
 *     'ABHet': 'f2',
 *     'ABHom': 'f2',
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ABHet, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ABHom, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_AC, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_AF, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_AN, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_BaseQRankSum, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ClippingRankSum, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Dels, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_FS, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_HRun, __pyx_n_s_u1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_HaplotypeScore, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_InbreedingCoeff, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_VariantType, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MLEAC, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MLEAF, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MQ, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MQ0Fraction, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MQRankSum, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_OND, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_QD, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_RPA, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_RU, __pyx_n_s_a12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ReadPosRankSum, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_INFO_DTYPE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":167
 * 
 * 
 * DEFAULT_TRANSFORMER = dict()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_TRANSFORMER, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":170
 * 
 * 
 * STANDARD_CALLDATA_FIELDS = ('is_called', 'is_phased', 'genotype')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STANDARD_CALLDATA_FIELDS, __pyx_tuple__45) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":173
 * 
 * 
 * DEFAULT_CALLDATA_DTYPE = {             # <<<<<<<<<<<<<<
 *     'is_called': 'b1',
 *     'is_phased': 'b1',
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_called, __pyx_n_s_b1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_phased, __pyx_n_s_b1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_genotype, __pyx_n_s_i1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_AD, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_DP, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_GQ, __pyx_n_s_u1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MLPSAC, __pyx_n_s_u1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MLPSAF, __pyx_n_s_f2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_MQ0, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_PL, __pyx_n_s_u2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_CALLDATA_DTYPE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":188
 * 
 * 
 * DEFAULT_CALLDATA_FILL = {             # <<<<<<<<<<<<<<
 *     'is_called': False,
 *     'is_phased': False,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "vcfnp.pyx":189
 * 
 * DEFAULT_CALLDATA_FILL = {
 *     'is_called': False,             # <<<<<<<<<<<<<<
 *     'is_phased': False,
 *     'genotype': -1,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_called, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":190
 * DEFAULT_CALLDATA_FILL = {
 *     'is_called': False,
 *     'is_phased': False,             # <<<<<<<<<<<<<<
 *     'genotype': -1,
 * }
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_phased, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_genotype, __pyx_int_neg_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_CALLDATA_FILL, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":195
 * 
 * 
 * DEFAULT_CALLDATA_ARITY = {             # <<<<<<<<<<<<<<
 *     'is_called': 1,
 *     'is_phased': 1,
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_called, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_phased, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_AD, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_CALLDATA_ARITY, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":203
 * 
 * 
 * cdef char SEMICOLON = b';'             # <<<<<<<<<<<<<<
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'
 */
  __pyx_v_5vcfnp_SEMICOLON = ';';

  /* "vcfnp.pyx":204
 * 
 * cdef char SEMICOLON = b';'
 * cdef string DOT = b'.'             # <<<<<<<<<<<<<<
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_kp_b__19); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_DOT = __pyx_t_7;

  /* "vcfnp.pyx":205
 * cdef char SEMICOLON = b';'
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_kp_b__46); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_GT_DELIMS = __pyx_t_7;

  /* "vcfnp.pyx":206
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_CHROM); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_CHROM = __pyx_t_7;

  /* "vcfnp.pyx":207
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_POS); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_POS = __pyx_t_7;

  /* "vcfnp.pyx":208
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_ID); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_ID = __pyx_t_7;

  /* "vcfnp.pyx":209
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_REF); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_REF = __pyx_t_7;

  /* "vcfnp.pyx":210
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_ALT); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_ALT = __pyx_t_7;

  /* "vcfnp.pyx":211
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_QUAL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_QUAL = __pyx_t_7;

  /* "vcfnp.pyx":212
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_FILTER); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_FILTER = __pyx_t_7;

  /* "vcfnp.pyx":213
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_INFO); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_INFO = __pyx_t_7;

  /* "vcfnp.pyx":214
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_num_alleles); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_NUM_ALLELES = __pyx_t_7;

  /* "vcfnp.pyx":215
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_is_snp); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_IS_SNP = __pyx_t_7;

  /* "vcfnp.pyx":216
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_svlen); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_SVLEN = __pyx_t_7;

  /* "vcfnp.pyx":217
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_is_called); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_IS_CALLED = __pyx_t_7;

  /* "vcfnp.pyx":218
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 * cdef string FIELD_NAME_GT = b'GT'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_is_phased); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_IS_PHASED = __pyx_t_7;

  /* "vcfnp.pyx":219
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_GT = b'GT'
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_genotype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_GENOTYPE = __pyx_t_7;

  /* "vcfnp.pyx":220
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 * cdef string FIELD_NAME_GT = b'GT'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__string(__pyx_n_b_GT); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_5vcfnp_FIELD_NAME_GT = __pyx_t_7;

  /* "vcfnp.pyx":223
 * 
 * 
 * def _variants_fields(fields, exclude_fields, info_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which fields to extract when loading
 *     variants."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_1_variants_fields, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_variants_fields, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":245
 * 
 * 
 * def _variants_arities(fields, arities, info_counts):             # <<<<<<<<<<<<<<
 *     """Utility function to determine arities (i.e., number of values to
 *     expect) for variants fields."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_3_variants_arities, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_variants_arities, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":272
 * 
 * 
 * def _variants_fills(fields, fills, info_types):             # <<<<<<<<<<<<<<
 *     """Utility function to determine fill values for variants fields with
 *     missing values."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_5_variants_fills, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_variants_fills, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":291
 * 
 * 
 * def _info_transformers(fields, transformers):             # <<<<<<<<<<<<<<
 *     """Utility function to determine transformer functions for variants
 *     fields."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_7_info_transformers, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_info_transformers, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":303
 * 
 * 
 * def _variants_dtype(fields, dtypes, arities, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                     info_types):
 *     """Utility function to build a numpy dtype for a variants array,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_9_variants_dtype, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_variants_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":337
 * 
 * 
 * def _filenames_from_arg(filename):             # <<<<<<<<<<<<<<
 *     """Utility function to deal with polymorphic filenames argument."""
 *     if isinstance(filename, string_types):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_11_filenames_from_arg, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_filenames_from_arg, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":354
 * 
 * 
 * class _Logger(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, logstream=None):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_Logger, __pyx_n_s_Logger, (PyObject *) NULL, __pyx_n_s_vcfnp_2, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "vcfnp.pyx":356
 * class _Logger(object):
 * 
 *     def __init__(self, logstream=None):             # <<<<<<<<<<<<<<
 *         if logstream is None:
 *             logstream = sys.stderr
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_7_Logger_1__init__, 0, __pyx_n_s_Logger___init, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__61);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":361
 *         self.logstream = logstream
 * 
 *     def __call__(self, *msg):             # <<<<<<<<<<<<<<
 *         s = ('[vcfnp] '
 *              + str(datetime.now())
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_7_Logger_3__call__, 0, __pyx_n_s_Logger___call, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_call, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":354
 * 
 * 
 * class _Logger(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, logstream=None):
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Logger, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Logger, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":370
 * 
 * 
 * def _nolog(*args, **kwargs):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_13_nolog, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nolog, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":374
 * 
 * 
 * def _get_logger(logstream, verbose):             # <<<<<<<<<<<<<<
 *     if verbose:
 *         log = _Logger(logstream)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_15_get_logger, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_logger, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":382
 * 
 * 
 * CACHEDIR_SUFFIX = '.vcfnp_cache'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CACHEDIR_SUFFIX, __pyx_kp_s_vcfnp_cache) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":385
 * 
 * 
 * def _mk_cache_fn(vcf_fn, array_type, region=None, cachedir=None):             # <<<<<<<<<<<<<<
 *     """Utility function to construct a filename for a cache file, given a VCF
 *     file name (where the original data came from) and other parameters."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_17_mk_cache_fn, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mk_cache_fn, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":408
 * 
 * 
 * def _get_cache_fn(vcf_fn, array_type, region, cachedir, log):             # <<<<<<<<<<<<<<
 *     """Utility function to obtain a cache file name and determine whether or
 *     not a fresh cache file is available."""
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_19_get_cache_fn, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_cache_fn, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":437
 * 
 * 
 * class _ArrayLoader(object):             # <<<<<<<<<<<<<<
 *     """Abstract class providing support for loading an array optionally via a
 *     cache layer."""
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_ArrayLoader, __pyx_n_s_ArrayLoader, (PyObject *) NULL, __pyx_n_s_vcfnp_2, __pyx_kp_s_Abstract_class_providing_support); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "vcfnp.pyx":442
 * 
 *     # to be overridden in subclass
 *     array_type = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):
 */
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_array_type, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":444
 *     array_type = None
 * 
 *     def __init__(self, vcf_fn, logstream, verbose, **kwargs):             # <<<<<<<<<<<<<<
 *         debug('init')
 *         self.vcf_fn = vcf_fn
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_12_ArrayLoader_1__init__, 0, __pyx_n_s_ArrayLoader___init, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":453
 *             setattr(self, k, v)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 *         debug(log)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_12_ArrayLoader_3load, 0, __pyx_n_s_ArrayLoader_load, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_load, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":487
 * 
 *     # to be overridden in subclass
 *     def build(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_12_ArrayLoader_5build, 0, __pyx_n_s_ArrayLoader_build, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_build, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":437
 * 
 * 
 * class _ArrayLoader(object):             # <<<<<<<<<<<<<<
 *     """Abstract class providing support for loading an array optionally via a
 *     cache layer."""
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ArrayLoader, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArrayLoader, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":491
 * 
 * 
 * class _VariantsLoader(_ArrayLoader):             # <<<<<<<<<<<<<<
 *     """Class for building variants array."""
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ArrayLoader); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_VariantsLoader, __pyx_n_s_VariantsLoader, (PyObject *) NULL, __pyx_n_s_vcfnp_2, __pyx_kp_s_Class_for_building_variants_arra); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "vcfnp.pyx":494
 *     """Class for building variants array."""
 * 
 *     array_type = 'variants'             # <<<<<<<<<<<<<<
 * 
 *     def build(self):
 */
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_array_type, __pyx_n_s_variants) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":496
 *     array_type = 'variants'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_15_VariantsLoader_1build, 0, __pyx_n_s_VariantsLoader_build, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_build, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":491
 * 
 * 
 * class _VariantsLoader(_ArrayLoader):             # <<<<<<<<<<<<<<
 *     """Class for building variants array."""
 * 
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_VariantsLoader, __pyx_t_2, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VariantsLoader, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":581
 * 
 * 
 * def variants(vcf_fn, region=None, fields=None, exclude_fields=None, dtypes=None,             # <<<<<<<<<<<<<<
 *              arities=None, fills=None, transformers=None, vcf_types=None,
 *              count=None, progress=0, logstream=None, condition=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_21variants, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_variants, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":679
 * 
 * 
 * def _fromiter(it, dtype, count, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator."""
 *     if progress > 0:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_23_fromiter, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fromiter, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":690
 * 
 * 
 * def _iter_withprogress(iterable, long progress, log):             # <<<<<<<<<<<<<<
 *     """Utility function to load an array from an iterator, reporting progress
 *     as we go."""
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_25_iter_withprogress, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iter_withprogress, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":709
 * 
 * 
 * def _itervariants(vcf_fns, region, list fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *                   bint flatten_filter, bint parse_info):
 *     """Iterate over variants from a VCF file, and generate a tuple for each
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_28_itervariants, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariants, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":742
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, list fieldspec,             # <<<<<<<<<<<<<<
 *                                  tuple filter_ids, bint flatten_filter,
 *                                  parse_info, condition):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_31_itervariants_with_condition, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariants_with_condition, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":891
 * 
 * 
 * def _warn_duplicates(fields):             # <<<<<<<<<<<<<<
 *     visited = set()
 *     for f in fields:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_34_warn_duplicates, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warn_duplicates, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":991
 * 
 * 
 * def _calldata_fields(fields, exclude_fields, format_ids):             # <<<<<<<<<<<<<<
 *     """Utility function to determine which calldata (i.e., FORMAT) fields to
 *     extract."""
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_36_calldata_fields, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata_fields, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1013
 * 
 * 
 * def _calldata_arities(fields, arities, format_counts, ploidy):             # <<<<<<<<<<<<<<
 *     if arities is None:
 *         arities = dict()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_38_calldata_arities, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata_arities, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1038
 * 
 * 
 * def _calldata_fills(fields, fills, format_types, ploidy):             # <<<<<<<<<<<<<<
 *     if fills is None:
 *         fills = dict()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_40_calldata_fills, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata_fills, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1052
 * 
 * 
 * def _calldata_dtype(fields, dtypes, format_types, arities, samples, ploidy):             # <<<<<<<<<<<<<<
 * 
 *     # construct a numpy dtype for structured array cells
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_42_calldata_dtype, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1076
 * 
 * 
 * class _CalldataLoader(_ArrayLoader):             # <<<<<<<<<<<<<<
 * 
 *     array_type = 'calldata'
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_ArrayLoader); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_CalldataLoader, __pyx_n_s_CalldataLoader, (PyObject *) NULL, __pyx_n_s_vcfnp_2, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "vcfnp.pyx":1078
 * class _CalldataLoader(_ArrayLoader):
 * 
 *     array_type = 'calldata'             # <<<<<<<<<<<<<<
 * 
 *     def build(self):
 */
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_array_type, __pyx_n_s_calldata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1080
 *     array_type = 'calldata'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         log = self.log
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_15_CalldataLoader_1build, 0, __pyx_n_s_CalldataLoader_build, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_build, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp.pyx":1076
 * 
 * 
 * class _CalldataLoader(_ArrayLoader):             # <<<<<<<<<<<<<<
 * 
 *     array_type = 'calldata'
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CalldataLoader, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CalldataLoader, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1161
 * 
 * 
 * def calldata(vcf_fn, region=None, samples=None, ploidy=2, fields=None,             # <<<<<<<<<<<<<<
 *              exclude_fields=None, dtypes=None, arities=None, fills=None,
 *              vcf_types=None, count=None, progress=0, logstream=None,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_44calldata, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vcfnp.pyx":1325
 * 
 * 
 * class _Calldata2DLoader(_CalldataLoader):             # <<<<<<<<<<<<<<
 * 
 *     array_type = 'calldata_2d'
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_CalldataLoader); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_Calldata2DLoader, __pyx_n_s_Calldata2DLoader, (PyObject *) NULL, __pyx_n_s_vcfnp_2, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "vcfnp.pyx":1327
 * class _Calldata2DLoader(_CalldataLoader):
 * 
 *     array_type = 'calldata_2d'             # <<<<<<<<<<<<<<
 * 
 *     def build(self):
 */
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_array_type, __pyx_n_s_calldata_2d) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1329
 *     array_type = 'calldata_2d'
 * 
 *     def build(self):             # <<<<<<<<<<<<<<
 *         arr = super().build()
 *         return view2d(arr)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_17_Calldata2DLoader_1build, 0, __pyx_n_s_Calldata2DLoader_build, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_t_4);
  PyList_Append(__pyx_t_1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_build, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp.pyx":1325
 * 
 * 
 * class _Calldata2DLoader(_CalldataLoader):             # <<<<<<<<<<<<<<
 * 
 *     array_type = 'calldata_2d'
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_Calldata2DLoader, __pyx_t_2, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_InitClassCell(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Calldata2DLoader, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1334
 * 
 * 
 * def calldata_2d(vcf_fn, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     Load a numpy 2-dimensional structured array with data from the sample
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_46calldata_2d, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calldata_2d, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1389
 * 
 * 
 * def _itercalldata(vcf_fns, region, tuple samples, int ploidy, list fieldspec):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_48_itercalldata, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itercalldata, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1411
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, tuple samples, int ploidy,             # <<<<<<<<<<<<<<
 *                                  list fieldspec, condition):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_51_itercalldata_with_condition, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itercalldata_with_condition, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1532
 * 
 * 
 * def view2d(a):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to view a structured 1D array where all fields have a
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_54view2d, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_view2d, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1616
 * 
 * 
 * EFF_DEFAULT_DTYPE = [             # <<<<<<<<<<<<<<
 *     ('Effect', 'a33'),
 *     ('Effect_Impact', 'a8'),
 */
  __pyx_t_2 = PyList_New(11); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_tuple__114);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __Pyx_INCREF(__pyx_tuple__115);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __Pyx_INCREF(__pyx_tuple__116);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __Pyx_INCREF(__pyx_tuple__117);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __Pyx_INCREF(__pyx_tuple__118);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __Pyx_INCREF(__pyx_tuple__119);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __Pyx_INCREF(__pyx_tuple__120);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __Pyx_INCREF(__pyx_tuple__121);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __Pyx_INCREF(__pyx_tuple__122);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __Pyx_INCREF(__pyx_tuple__123);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __Pyx_INCREF(__pyx_tuple__124);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EFF_DEFAULT_DTYPE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1631
 * 
 * 
 * DEFAULT_INFO_DTYPE['EFF'] = EFF_DEFAULT_DTYPE             # <<<<<<<<<<<<<<
 * DEFAULT_VARIANT_ARITY['EFF'] = 1
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_EFF_DEFAULT_DTYPE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_INFO_DTYPE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_n_s_EFF, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1632
 * 
 * DEFAULT_INFO_DTYPE['EFF'] = EFF_DEFAULT_DTYPE
 * DEFAULT_VARIANT_ARITY['EFF'] = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_VARIANT_ARITY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_n_s_EFF, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1635
 * 
 * 
 * EFF_DEFAULT_FILLS = ('.', '.', '.', '.', '.', -1, '.', '.', -1, '.', -1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EFF_DEFAULT_FILLS, __pyx_tuple__125) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1638
 * 
 * 
 * def eff_default_transformer(fills=EFF_DEFAULT_FILLS):             # <<<<<<<<<<<<<<
 *     """
 *     Return a simple transformer function for parsing EFF annotations. N.B.,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_EFF_DEFAULT_FILLS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__22 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_56eff_default_transformer, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_eff_default_transformer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1662
 * 
 * 
 * DEFAULT_TRANSFORMER['EFF'] = eff_default_transformer()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_eff_default_transformer); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_TRANSFORMER); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_n_s_EFF, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1665
 * 
 * 
 * class VariantsTable(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_VariantsTable, __pyx_n_s_VariantsTable, (PyObject *) NULL, __pyx_n_s_vcfnp_2, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "vcfnp.pyx":1667
 * class VariantsTable(object):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  filename,
 *                  region=None,
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_13VariantsTable_1__init__, 0, __pyx_n_s_VariantsTable___init, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__130);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init_2, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp.pyx":1686
 *         self.flatten = flatten
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 * 
 *         vcf_fns = _filenames_from_arg(self.filename)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5vcfnp_13VariantsTable_3__iter__, 0, __pyx_n_s_VariantsTable___iter, NULL, __pyx_n_s_vcfnp_2, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_iter, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp.pyx":1665
 * 
 * 
 * class VariantsTable(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_VariantsTable, __pyx_t_2, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VariantsTable, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1757
 * 
 * 
 * def _itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                        filter_ids, flatten_filter, fill, flatten):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_58_itervariantstable, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariantstable, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1849
 * 
 * EFF_FIELDS = (
 *     'Effect',             # <<<<<<<<<<<<<<
 *     'Effect_Impact',
 *     'Functional_Class',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EFF_FIELDS, __pyx_tuple__135) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "vcfnp.pyx":1863
 * 
 * 
 * _prog_eff_main = re.compile(r'([^(]+)\(([^)]+)\)')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_compile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prog_eff_main, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1866
 * 
 * 
 * def flatten_eff(fill='.'):             # <<<<<<<<<<<<<<
 *     def _flatten(vals):
 *         if len(vals) == 0:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_61flatten_eff, NULL, __pyx_n_s_vcfnp_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flatten_eff, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1879
 * 
 * 
 * DEFAULT_FLATTEN = {             # <<<<<<<<<<<<<<
 *     'EFF': (EFF_FIELDS, flatten_eff),
 * }
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "vcfnp.pyx":1880
 * 
 * DEFAULT_FLATTEN = {
 *     'EFF': (EFF_FIELDS, flatten_eff),             # <<<<<<<<<<<<<<
 * }
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_EFF_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_flatten_eff); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_EFF, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_FLATTEN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp.pyx":1
 * # cython: profile = False             # <<<<<<<<<<<<<<
 * # cython: boundscheck = False
 * # cython: wraparound = False
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_variants_line_581, __pyx_kp_u_Load_an_numpy_structured_array) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_calldata_line_1161, __pyx_kp_u_Load_a_numpy_1_dimensional_stru) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_view2d_line_1532, __pyx_kp_u_Utility_function_to_view_a_stru) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init vcfnp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init vcfnp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_PyObject_CallMethod1((PyObject*)&PyDict_Type, __pyx_n_s_items, d);
    else
        return PyDict_Items(d);
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE void __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj) {
    int i;
    for (i = 0; i < PyList_GET_SIZE(cyfunctions); i++) {
        __pyx_CyFunctionObject *m =
            (__pyx_CyFunctionObject *) PyList_GET_ITEM(cyfunctions, i);
        m->func_classobj = classobj;
        Py_INCREF(classobj);
    }
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Generator_get_name(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Generator_set_name(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Generator_get_qualname(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Generator_set_qualname(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Generator_get_name, (setter)__Pyx_Generator_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Generator_get_qualname, (setter)__Pyx_Generator_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_GeneratorObject, is_running), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {"throw", (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {"close", (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_GeneratorObject),
    0,
    (destructor) __Pyx_Generator_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Generator_traverse,
    0,
    0,
    offsetof(__pyx_GeneratorObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Generator_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
