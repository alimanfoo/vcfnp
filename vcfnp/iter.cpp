/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/aliman/src/github/alimanfoo/vcfnp/vcflib/Variant.h",
            "/home/aliman/src/github/alimanfoo/vcfnp/vcflib/split.h"
        ],
        "extra_compile_args": [
            "-O3"
        ],
        "include_dirs": [
            "/home/aliman/src/github/alimanfoo/vcfnp/vcflib",
            "/home/aliman/src/github/alimanfoo/vcfnp/vcflib/smithwaterman",
            "/home/aliman/src/github/alimanfoo/vcfnp/vcflib/tabixpp",
            "./vcfnp"
        ],
        "language": "c++",
        "libraries": [
            "m",
            "z"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__vcfnp__iter
#define __PYX_HAVE_API__vcfnp__iter
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include "stdlib.h"
#include "split.h"
#include "Variant.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "vcfnp/iter.pyx",
  "stringsource",
  "vcfnp/vcflib.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5vcfnp_6vcflib_PyVariantCallFile;
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants;
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition;
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata;
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition;
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable;

/* "vcfnp/vcflib.pxd":143
 * 
 * 
 * cdef class PyVariantCallFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef VariantCallFile *thisptr
 */
struct __pyx_obj_5vcfnp_6vcflib_PyVariantCallFile {
  PyObject_HEAD
  vcf::VariantCallFile *thisptr;
};


/* "vcfnp/iter.pyx":92
 * 
 * 
 * def _itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                   parse_info, truncate):
 * 
 */
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants {
  PyObject_HEAD
  PyObject *__pyx_v__;
  PyObject *__pyx_v_fieldspec;
  PyObject *__pyx_v_filter_ids;
  PyObject *__pyx_v_flatten_filter;
  PyObject *__pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_region_start;
  PyObject *__pyx_v_region_start_stop;
  PyObject *__pyx_v_region_stop;
  PyObject *__pyx_v_truncate;
  PyObject *__pyx_v_v;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp/iter.pyx":131
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter, parse_info, condition,
 *                                  truncate):
 */
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition {
  PyObject_HEAD
  PyObject *__pyx_v__;
  PyObject *__pyx_v_condition;
  PyObject *__pyx_v_fieldspec;
  PyObject *__pyx_v_filter_ids;
  PyObject *__pyx_v_flatten_filter;
  long __pyx_v_i;
  long __pyx_v_n;
  PyObject *__pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_region_start;
  PyObject *__pyx_v_region_start_stop;
  PyObject *__pyx_v_region_stop;
  PyObject *__pyx_v_truncate;
  PyObject *__pyx_v_v;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp/iter.pyx":392
 * 
 * 
 * def _itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata {
  PyObject_HEAD
  PyObject *__pyx_v__;
  PyObject *__pyx_v_fieldspec;
  PyObject *__pyx_v_ploidy;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_region_start;
  PyObject *__pyx_v_region_start_stop;
  PyObject *__pyx_v_region_stop;
  PyObject *__pyx_v_samples;
  PyObject *__pyx_v_truncate;
  PyObject *__pyx_v_v;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp/iter.pyx":422
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                                  condition, truncate):
 *     cdef VariantCallFile *variant_file
 */
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition {
  PyObject_HEAD
  PyObject *__pyx_v__;
  PyObject *__pyx_v_condition;
  PyObject *__pyx_v_fieldspec;
  long __pyx_v_i;
  long __pyx_v_n;
  PyObject *__pyx_v_ploidy;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  PyObject *__pyx_v_region_start;
  PyObject *__pyx_v_region_start_stop;
  PyObject *__pyx_v_region_stop;
  PyObject *__pyx_v_samples;
  PyObject *__pyx_v_truncate;
  PyObject *__pyx_v_v;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "vcfnp/iter.pyx":542
 * 
 * 
 * def itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                       filter_ids, flatten_filter, fill, flatteners):
 * 
 */
struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable {
  PyObject_HEAD
  PyObject *__pyx_v_arities;
  PyObject *__pyx_v_fields;
  PyObject *__pyx_v_fill;
  PyObject *__pyx_v_filter_ids;
  PyObject *__pyx_v_flatten_filter;
  PyObject *__pyx_v_flatteners;
  PyObject *__pyx_v_info_types;
  PyObject *__pyx_v_parse_info;
  PyObject *__pyx_v_region;
  bool __pyx_v_region_set;
  vcf::Variant *__pyx_v_variant;
  vcf::VariantCallFile *__pyx_v_variant_file;
  PyObject *__pyx_v_vcf_fn;
  PyObject *__pyx_v_vcf_fns;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__vcf_3a__3a_VariantFieldType(enum vcf::VariantFieldType value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'vcfnp.compat' */
static PyObject *(*__pyx_f_5vcfnp_6compat_s)(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_5vcfnp_6compat_b)(PyObject *, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'vcfnp.vcflib' */
static PyTypeObject *__pyx_ptype_5vcfnp_6vcflib_PyVariantCallFile = 0;

/* Module declarations from 'vcfnp.iter' */
static PyTypeObject *__pyx_ptype_5vcfnp_4iter___pyx_scope_struct___itervariants = 0;
static PyTypeObject *__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition = 0;
static PyTypeObject *__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_2__itercalldata = 0;
static PyTypeObject *__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition = 0;
static PyTypeObject *__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable = 0;
static size_t __pyx_v_5vcfnp_4iter_npos;
static char __pyx_v_5vcfnp_4iter_SEMICOLON;
static std::string __pyx_v_5vcfnp_4iter_DOT;
static std::string __pyx_v_5vcfnp_4iter_GT_DELIMS;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_CHROM;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_POS;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_ID;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_REF;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_ALT;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_QUAL;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_FILTER;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_INFO;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_NUM_ALLELES;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_SNP;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_SVLEN;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_CALLED;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_PHASED;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_GENOTYPE;
static std::string __pyx_v_5vcfnp_4iter_FIELD_NAME_GT;
static PyObject *__pyx_f_5vcfnp_4iter__get_next_variant(vcf::VariantCallFile *, vcf::Variant *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkvrow(vcf::Variant *, PyObject *, PyObject *, int); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkvval(vcf::Variant *, std::string, int, PyObject *, int, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkaltval(vcf::Variant *, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkfilterval(vcf::Variant *, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__is_snp(vcf::Variant *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__svlen(vcf::Variant *, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__svlen_single(std::string, std::vector<std::string>  &, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__svlen_multi(std::string, std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval(std::vector<std::string>  &, int, PyObject *, int); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_string(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_string_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_double(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_double_single(std::vector<std::string>  &, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_double_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_long(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_long_single(std::vector<std::string>  &, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkval_long_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkcrow(vcf::Variant *, PyObject *, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkcvals(vcf::Variant *, std::string, int, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkcval(std::map<std::string,std::vector<std::string> >  &, int, std::string, int, PyObject *, int); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__is_called(std::map<std::string,std::vector<std::string> >  &); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__is_phased(std::map<std::string,std::vector<std::string> >  &); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__genotype(std::map<std::string,std::vector<std::string> >  &, int); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mkvtblrow(vcf::Variant *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5vcfnp_4iter__mktblval_multi(std::vector<std::string>  &, int, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
#define __Pyx_MODULE_NAME "vcfnp.iter"
int __pyx_module_is_main_vcfnp__iter = 0;

/* Implementation of 'vcfnp.iter' */
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = ":";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_GT[] = "GT";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k__3[] = "-";
static const char __pyx_k__7[] = "*";
static const char __pyx_k_ALT[] = "ALT";
static const char __pyx_k_POS[] = "POS";
static const char __pyx_k_REF[] = "REF";
static const char __pyx_k__12[] = ".";
static const char __pyx_k__13[] = "|";
static const char __pyx_k__15[] = ",";
static const char __pyx_k__16[] = "/|";
static const char __pyx_k__19[] = "_";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_INFO[] = "INFO";
static const char __pyx_k_QUAL[] = "QUAL";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_fill[] = "fill";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_CHROM[] = "CHROM";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_fills[] = "fills";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_svlen[] = "svlen";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_FILTER[] = "FILTER";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_snp[] = "is_snp";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_ploidy[] = "ploidy";
static const char __pyx_k_region[] = "region";
static const char __pyx_k_vcf_fn[] = "vcf_fn";
static const char __pyx_k_arities[] = "arities";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_samples[] = "samples";
static const char __pyx_k_variant[] = "variant";
static const char __pyx_k_vcf_fns[] = "vcf_fns";
static const char __pyx_k_genotype[] = "genotype";
static const char __pyx_k_truncate[] = "truncate";
static const char __pyx_k_condition[] = "condition";
static const char __pyx_k_fieldspec[] = "fieldspec";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_is_called[] = "is_called";
static const char __pyx_k_is_phased[] = "is_phased";
static const char __pyx_k_filter_ids[] = "filter_ids";
static const char __pyx_k_flatteners[] = "flatteners";
static const char __pyx_k_info_types[] = "info_types";
static const char __pyx_k_parse_info[] = "parse_info";
static const char __pyx_k_region_set[] = "region_set";
static const char __pyx_k_vcfnp_iter[] = "vcfnp.iter";
static const char __pyx_k_num_alleles[] = "num_alleles";
static const char __pyx_k_region_stop[] = "region_stop";
static const char __pyx_k_format_types[] = "format_types";
static const char __pyx_k_itercalldata[] = "_itercalldata";
static const char __pyx_k_itervariants[] = "_itervariants";
static const char __pyx_k_region_start[] = "region_start";
static const char __pyx_k_transformers[] = "transformers";
static const char __pyx_k_variant_file[] = "variant_file";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_flatten_filter[] = "flatten_filter";
static const char __pyx_k_itercalldata_2[] = "itercalldata";
static const char __pyx_k_itervariants_2[] = "itervariants";
static const char __pyx_k_itervariantstable[] = "itervariantstable";
static const char __pyx_k_region_start_stop[] = "region_start_stop";
static const char __pyx_k_itercalldata_with_condition[] = "_itercalldata_with_condition";
static const char __pyx_k_itervariants_with_condition[] = "_itervariants_with_condition";
static const char __pyx_k_home_aliman_src_github_alimanfo[] = "/home/aliman/src/github/alimanfoo/vcfnp/vcfnp/iter.pyx";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_b_A;
static PyObject *__pyx_n_b_ALT;
static PyObject *__pyx_n_b_C;
static PyObject *__pyx_n_b_CHROM;
static PyObject *__pyx_n_b_FILTER;
static PyObject *__pyx_n_b_G;
static PyObject *__pyx_n_b_GT;
static PyObject *__pyx_n_b_ID;
static PyObject *__pyx_n_b_INFO;
static PyObject *__pyx_n_b_POS;
static PyObject *__pyx_n_b_QUAL;
static PyObject *__pyx_n_b_REF;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_b_T;
static PyObject *__pyx_kp_b__12;
static PyObject *__pyx_kp_b__13;
static PyObject *__pyx_kp_b__15;
static PyObject *__pyx_kp_b__16;
static PyObject *__pyx_n_s__19;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_b__7;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_arities;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_fieldspec;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_fills;
static PyObject *__pyx_n_s_filter_ids;
static PyObject *__pyx_n_s_flatten_filter;
static PyObject *__pyx_n_s_flatteners;
static PyObject *__pyx_n_s_format_types;
static PyObject *__pyx_n_b_genotype;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_kp_s_home_aliman_src_github_alimanfo;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info_types;
static PyObject *__pyx_n_b_is_called;
static PyObject *__pyx_n_b_is_phased;
static PyObject *__pyx_n_b_is_snp;
static PyObject *__pyx_n_s_itercalldata;
static PyObject *__pyx_n_s_itercalldata_2;
static PyObject *__pyx_n_s_itercalldata_with_condition;
static PyObject *__pyx_n_s_itervariants;
static PyObject *__pyx_n_s_itervariants_2;
static PyObject *__pyx_n_s_itervariants_with_condition;
static PyObject *__pyx_n_s_itervariantstable;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_b_num_alleles;
static PyObject *__pyx_n_s_parse_info;
static PyObject *__pyx_n_s_ploidy;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_region;
static PyObject *__pyx_n_s_region_set;
static PyObject *__pyx_n_s_region_start;
static PyObject *__pyx_n_s_region_start_stop;
static PyObject *__pyx_n_s_region_stop;
static PyObject *__pyx_n_s_samples;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_b_svlen;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_transformers;
static PyObject *__pyx_n_s_truncate;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_variant;
static PyObject *__pyx_n_s_variant_file;
static PyObject *__pyx_n_s_vcf_fn;
static PyObject *__pyx_n_s_vcf_fns;
static PyObject *__pyx_n_s_vcfnp_iter;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_5vcfnp_4iter_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_info_types, PyObject *__pyx_v_transformers, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_2_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_5_itervariants_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_8itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_format_types, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_10_itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_13_itercalldata_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate); /* proto */
static PyObject *__pyx_pf_5vcfnp_4iter_16itervariantstable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatteners); /* proto */
static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct___itervariants(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;

/* "vcfnp/iter.pyx":59
 * 
 * 
 * def itervariants(vcf_fns, region, fields, arities, fills, info_types,             # <<<<<<<<<<<<<<
 *                  transformers, filter_ids, flatten_filter, parse_info,
 *                  condition, truncate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_1itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_itervariants[] = "itervariants(vcf_fns, region, fields, arities, fills, info_types, transformers, filter_ids, flatten_filter, parse_info, condition, truncate)\nIterate over variants from a VCF file, and generate a tuple for each\n    variant suitable for loading into a numpy array.";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_1itervariants = {"itervariants", (PyCFunction)__pyx_pw_5vcfnp_4iter_1itervariants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_itervariants};
static PyObject *__pyx_pw_5vcfnp_4iter_1itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_info_types = 0;
  PyObject *__pyx_v_transformers = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervariants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_fills,&__pyx_n_s_info_types,&__pyx_n_s_transformers,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_parse_info,&__pyx_n_s_condition,&__pyx_n_s_truncate,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 1); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 2); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 3); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 4); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 5); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_transformers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 6); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 7); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 8); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 9); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 10); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, 11); __PYX_ERR(0, 59, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "itervariants") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fields = values[2];
    __pyx_v_arities = values[3];
    __pyx_v_fills = values[4];
    __pyx_v_info_types = values[5];
    __pyx_v_transformers = values[6];
    __pyx_v_filter_ids = values[7];
    __pyx_v_flatten_filter = values[8];
    __pyx_v_parse_info = values[9];
    __pyx_v_condition = values[10];
    __pyx_v_truncate = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("itervariants", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter.itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_itervariants(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fields, __pyx_v_arities, __pyx_v_fills, __pyx_v_info_types, __pyx_v_transformers, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_parse_info, __pyx_v_condition, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_info_types, PyObject *__pyx_v_transformers, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate) {
  PyObject *__pyx_v_fieldspec = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("itervariants", 0);
  __Pyx_INCREF(__pyx_v_vcf_fns);
  __Pyx_INCREF(__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  __Pyx_INCREF(__pyx_v_info_types);
  __Pyx_INCREF(__pyx_v_transformers);
  __Pyx_INCREF(__pyx_v_filter_ids);

  /* "vcfnp/iter.pyx":66
 * 
 *     # force to bytes
 *     vcf_fns = _b(tuple(vcf_fns))             # <<<<<<<<<<<<<<
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_vcf_fns, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":67
 *     # force to bytes
 *     vcf_fns = _b(tuple(vcf_fns))
 *     fields = _b(tuple(fields))             # <<<<<<<<<<<<<<
 *     arities = tuple(arities)
 *     fills = tuple(fills)
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5vcfnp_6compat_b(__pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":68
 *     vcf_fns = _b(tuple(vcf_fns))
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)             # <<<<<<<<<<<<<<
 *     fills = tuple(fills)
 *     info_types = tuple(info_types)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_arities); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_arities, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":69
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 *     fills = tuple(fills)             # <<<<<<<<<<<<<<
 *     info_types = tuple(info_types)
 *     transformers = tuple(transformers)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_fills); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_fills, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":70
 *     arities = tuple(arities)
 *     fills = tuple(fills)
 *     info_types = tuple(info_types)             # <<<<<<<<<<<<<<
 *     transformers = tuple(transformers)
 *     filter_ids = _b(tuple(filter_ids))
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_info_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_info_types, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":71
 *     fills = tuple(fills)
 *     info_types = tuple(info_types)
 *     transformers = tuple(transformers)             # <<<<<<<<<<<<<<
 *     filter_ids = _b(tuple(filter_ids))
 * 
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_transformers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_transformers, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":72
 *     info_types = tuple(info_types)
 *     transformers = tuple(transformers)
 *     filter_ids = _b(tuple(filter_ids))             # <<<<<<<<<<<<<<
 * 
 *     # zip up field information for convenience
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_filter_ids, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":75
 * 
 *     # zip up field information for convenience
 *     fieldspec = tuple(zip(fields, arities, fills, info_types, transformers))             # <<<<<<<<<<<<<<
 * 
 *     if condition is None:
 */
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_v_fills);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_fills);
  __Pyx_INCREF(__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_info_types);
  __Pyx_INCREF(__pyx_v_transformers);
  __Pyx_GIVEREF(__pyx_v_transformers);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_transformers);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fieldspec = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":77
 *     fieldspec = tuple(zip(fields, arities, fills, info_types, transformers))
 * 
 *     if condition is None:             # <<<<<<<<<<<<<<
 *         return _itervariants(vcf_fns=vcf_fns, region=region,
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 */
  __pyx_t_3 = (__pyx_v_condition == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "vcfnp/iter.pyx":78
 * 
 *     if condition is None:
 *         return _itervariants(vcf_fns=vcf_fns, region=region,             # <<<<<<<<<<<<<<
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 *                              flatten_filter=flatten_filter,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_itervariants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_vcf_fns, __pyx_v_vcf_fns) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_region, __pyx_v_region) < 0) __PYX_ERR(0, 78, __pyx_L1_error)

    /* "vcfnp/iter.pyx":79
 *     if condition is None:
 *         return _itervariants(vcf_fns=vcf_fns, region=region,
 *                              fieldspec=fieldspec, filter_ids=filter_ids,             # <<<<<<<<<<<<<<
 *                              flatten_filter=flatten_filter,
 *                              parse_info=parse_info, truncate=truncate)
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fieldspec, __pyx_v_fieldspec) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_filter_ids, __pyx_v_filter_ids) < 0) __PYX_ERR(0, 78, __pyx_L1_error)

    /* "vcfnp/iter.pyx":80
 *         return _itervariants(vcf_fns=vcf_fns, region=region,
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 *                              flatten_filter=flatten_filter,             # <<<<<<<<<<<<<<
 *                              parse_info=parse_info, truncate=truncate)
 *     else:
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flatten_filter, __pyx_v_flatten_filter) < 0) __PYX_ERR(0, 78, __pyx_L1_error)

    /* "vcfnp/iter.pyx":81
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 *                              flatten_filter=flatten_filter,
 *                              parse_info=parse_info, truncate=truncate)             # <<<<<<<<<<<<<<
 *     else:
 *         return _itervariants_with_condition(vcf_fns=vcf_fns, region=region,
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_parse_info, __pyx_v_parse_info) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_truncate, __pyx_v_truncate) < 0) __PYX_ERR(0, 78, __pyx_L1_error)

    /* "vcfnp/iter.pyx":78
 * 
 *     if condition is None:
 *         return _itervariants(vcf_fns=vcf_fns, region=region,             # <<<<<<<<<<<<<<
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 *                              flatten_filter=flatten_filter,
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":77
 *     fieldspec = tuple(zip(fields, arities, fills, info_types, transformers))
 * 
 *     if condition is None:             # <<<<<<<<<<<<<<
 *         return _itervariants(vcf_fns=vcf_fns, region=region,
 *                              fieldspec=fieldspec, filter_ids=filter_ids,
 */
  }

  /* "vcfnp/iter.pyx":83
 *                              parse_info=parse_info, truncate=truncate)
 *     else:
 *         return _itervariants_with_condition(vcf_fns=vcf_fns, region=region,             # <<<<<<<<<<<<<<
 *                                             fieldspec=fieldspec,
 *                                             filter_ids=filter_ids,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_itervariants_with_condition); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_vcf_fns, __pyx_v_vcf_fns) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_region, __pyx_v_region) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":84
 *     else:
 *         return _itervariants_with_condition(vcf_fns=vcf_fns, region=region,
 *                                             fieldspec=fieldspec,             # <<<<<<<<<<<<<<
 *                                             filter_ids=filter_ids,
 *                                             flatten_filter=flatten_filter,
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fieldspec, __pyx_v_fieldspec) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":85
 *         return _itervariants_with_condition(vcf_fns=vcf_fns, region=region,
 *                                             fieldspec=fieldspec,
 *                                             filter_ids=filter_ids,             # <<<<<<<<<<<<<<
 *                                             flatten_filter=flatten_filter,
 *                                             parse_info=parse_info,
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_filter_ids, __pyx_v_filter_ids) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":86
 *                                             fieldspec=fieldspec,
 *                                             filter_ids=filter_ids,
 *                                             flatten_filter=flatten_filter,             # <<<<<<<<<<<<<<
 *                                             parse_info=parse_info,
 *                                             condition=condition,
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flatten_filter, __pyx_v_flatten_filter) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":87
 *                                             filter_ids=filter_ids,
 *                                             flatten_filter=flatten_filter,
 *                                             parse_info=parse_info,             # <<<<<<<<<<<<<<
 *                                             condition=condition,
 *                                             truncate=truncate)
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_parse_info, __pyx_v_parse_info) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":88
 *                                             flatten_filter=flatten_filter,
 *                                             parse_info=parse_info,
 *                                             condition=condition,             # <<<<<<<<<<<<<<
 *                                             truncate=truncate)
 * 
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_condition, __pyx_v_condition) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":89
 *                                             parse_info=parse_info,
 *                                             condition=condition,
 *                                             truncate=truncate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_truncate, __pyx_v_truncate) < 0) __PYX_ERR(0, 83, __pyx_L1_error)

    /* "vcfnp/iter.pyx":83
 *                              parse_info=parse_info, truncate=truncate)
 *     else:
 *         return _itervariants_with_condition(vcf_fns=vcf_fns, region=region,             # <<<<<<<<<<<<<<
 *                                             fieldspec=fieldspec,
 *                                             filter_ids=filter_ids,
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":59
 * 
 * 
 * def itervariants(vcf_fns, region, fields, arities, fills, info_types,             # <<<<<<<<<<<<<<
 *                  transformers, filter_ids, flatten_filter, parse_info,
 *                  condition, truncate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vcfnp.iter.itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fieldspec);
  __Pyx_XDECREF(__pyx_v_vcf_fns);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_arities);
  __Pyx_XDECREF(__pyx_v_fills);
  __Pyx_XDECREF(__pyx_v_info_types);
  __Pyx_XDECREF(__pyx_v_transformers);
  __Pyx_XDECREF(__pyx_v_filter_ids);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_4iter_4generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp/iter.pyx":92
 * 
 * 
 * def _itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                   parse_info, truncate):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_3_itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_2_itervariants[] = "_itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter, parse_info, truncate)";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_3_itervariants = {"_itervariants", (PyCFunction)__pyx_pw_5vcfnp_4iter_3_itervariants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_2_itervariants};
static PyObject *__pyx_pw_5vcfnp_4iter_3_itervariants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fieldspec,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_parse_info,&__pyx_n_s_truncate,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 1); __PYX_ERR(0, 92, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 2); __PYX_ERR(0, 92, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 3); __PYX_ERR(0, 92, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 4); __PYX_ERR(0, 92, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 5); __PYX_ERR(0, 92, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, 6); __PYX_ERR(0, 92, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itervariants") < 0)) __PYX_ERR(0, 92, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fieldspec = values[2];
    __pyx_v_filter_ids = values[3];
    __pyx_v_flatten_filter = values[4];
    __pyx_v_parse_info = values[5];
    __pyx_v_truncate = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itervariants", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter._itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_2_itervariants(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fieldspec, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_parse_info, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_2_itervariants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_truncate) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct___itervariants(__pyx_ptype_5vcfnp_4iter___pyx_scope_struct___itervariants, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_parse_info);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_parse_info);
  __pyx_cur_scope->__pyx_v_truncate = __pyx_v_truncate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_truncate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_truncate);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5vcfnp_4iter_4generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariants, __pyx_n_s_itervariants); if (unlikely(!gen)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.iter._itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_4iter_4generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  vcf::Variant *__pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L19_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 92, __pyx_L1_error)

  /* "vcfnp/iter.pyx":100
 * 
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":101
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         # set whether INFO field needs to be parsed
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp/iter.pyx":102
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         # set whether INFO field needs to be parsed
 *         variant_file.parseInfo = parse_info
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
    try {
      __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 102, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":104
 *         variant_file.open(vcf_fn)
 *         # set whether INFO field needs to be parsed
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_parse_info); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_t_7;

    /* "vcfnp/iter.pyx":106
 *         variant_file.parseInfo = parse_info
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         region_start, region_stop = None, None
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp/iter.pyx":107
 *         # set whether samples fields need to be parsed
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             # set genome region to extract variants from
 */
    __pyx_t_4 = Py_None;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_8 = Py_None;
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_stop);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp/iter.pyx":108
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(_b(region))
 */
    __pyx_t_9 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "vcfnp/iter.pyx":110
 *         if region is not None:
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(_b(region))             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_8 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_region, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      try {
        __pyx_t_7 = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 110, __pyx_L1_error)
      }
      __pyx_cur_scope->__pyx_v_region_set = __pyx_t_7;

      /* "vcfnp/iter.pyx":111
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      __pyx_t_10 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_10) {

        /* "vcfnp/iter.pyx":112
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 112, __pyx_L1_error)

        /* "vcfnp/iter.pyx":111
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      }

      /* "vcfnp/iter.pyx":113
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_, __pyx_cur_scope->__pyx_v_region, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":114
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 114, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_8)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L10_unpacking_done;
          __pyx_L9_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 114, __pyx_L1_error)
          __pyx_L10_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start_stop);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "vcfnp/iter.pyx":115
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "vcfnp/iter.pyx":116
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_11 = __pyx_t_8; __Pyx_INCREF(__pyx_t_11); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 116, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_15 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 116, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 116, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 116, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_15(__pyx_t_11);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 116, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_t_8 = 0;

          /* "vcfnp/iter.pyx":115
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
          __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_v); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 115, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (1) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 115, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 115, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_start);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_stop);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;

        /* "vcfnp/iter.pyx":113
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      }

      /* "vcfnp/iter.pyx":108
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             # set genome region to extract variants from
 *             region_set = variant_file.setRegion(_b(region))
 */
    }

    /* "vcfnp/iter.pyx":117
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         # iterate over variants
 */
    try {
      __pyx_t_16 = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant = __pyx_t_16;

    /* "vcfnp/iter.pyx":120
 * 
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 */
    while (1) {
      __pyx_t_4 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_9) break;

      /* "vcfnp/iter.pyx":121
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      __pyx_t_10 = (__pyx_cur_scope->__pyx_v_region_start != Py_None);
      __pyx_t_17 = (__pyx_t_10 != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_9 = __pyx_t_17;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_truncate); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
      if (__pyx_t_17) {
      } else {
        __pyx_t_9 = __pyx_t_17;
        goto __pyx_L16_bool_binop_done;
      }

      /* "vcfnp/iter.pyx":122
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:             # <<<<<<<<<<<<<<
 *                 continue
 *             yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_variant->position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_cur_scope->__pyx_v_region_start, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __pyx_t_17;
      __pyx_L16_bool_binop_done:;

      /* "vcfnp/iter.pyx":121
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":123
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 *                 continue             # <<<<<<<<<<<<<<
 *             yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 * 
 */
        goto __pyx_L13_continue;

        /* "vcfnp/iter.pyx":121
 *         # iterate over variants
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      }

      /* "vcfnp/iter.pyx":124
 *                     variant.position < region_start:
 *                 continue
 *             yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)             # <<<<<<<<<<<<<<
 * 
 *         # clean up
 */
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fieldspec))||((__pyx_cur_scope->__pyx_v_fieldspec) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_fieldspec)->tp_name), 0))) __PYX_ERR(0, 124, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_filter_ids))||((__pyx_cur_scope->__pyx_v_filter_ids) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_filter_ids)->tp_name), 0))) __PYX_ERR(0, 124, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_flatten_filter); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
      __pyx_t_8 = __pyx_f_5vcfnp_4iter__mkvrow(__pyx_cur_scope->__pyx_v_variant, ((PyObject*)__pyx_cur_scope->__pyx_v_fieldspec), ((PyObject*)__pyx_cur_scope->__pyx_v_filter_ids), __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L19_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 124, __pyx_L1_error)
      __pyx_L13_continue:;
    }

    /* "vcfnp/iter.pyx":127
 * 
 *         # clean up
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp/iter.pyx":128
 *         # clean up
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp/iter.pyx":100
 * 
 *     # work through multiple VCFs if provided
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":92
 * 
 * 
 * def _itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                   parse_info, truncate):
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_itervariants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_4iter_7generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp/iter.pyx":131
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter, parse_info, condition,
 *                                  truncate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_6_itervariants_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_5_itervariants_with_condition[] = "_itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids, flatten_filter, parse_info, condition, truncate)";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_6_itervariants_with_condition = {"_itervariants_with_condition", (PyCFunction)__pyx_pw_5vcfnp_4iter_6_itervariants_with_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_5_itervariants_with_condition};
static PyObject *__pyx_pw_5vcfnp_4iter_6_itervariants_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants_with_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fieldspec,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_parse_info,&__pyx_n_s_condition,&__pyx_n_s_truncate,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 1); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 2); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 3); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 4); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 5); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 6); __PYX_ERR(0, 131, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, 7); __PYX_ERR(0, 131, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itervariants_with_condition") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fieldspec = values[2];
    __pyx_v_filter_ids = values[3];
    __pyx_v_flatten_filter = values[4];
    __pyx_v_parse_info = values[5];
    __pyx_v_condition = values[6];
    __pyx_v_truncate = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itervariants_with_condition", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter._itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_5_itervariants_with_condition(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fieldspec, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_parse_info, __pyx_v_condition, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_5_itervariants_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itervariants_with_condition", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_parse_info);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_parse_info);
  __pyx_cur_scope->__pyx_v_condition = __pyx_v_condition;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_condition);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_condition);
  __pyx_cur_scope->__pyx_v_truncate = __pyx_v_truncate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_truncate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_truncate);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5vcfnp_4iter_7generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariants_with_condition, __pyx_n_s_itervariants_with_condition); if (unlikely(!gen)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.iter._itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_4iter_7generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  vcf::Variant *__pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L22_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 131, __pyx_L1_error)

  /* "vcfnp/iter.pyx":138
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 *     cdef long i = 0             # <<<<<<<<<<<<<<
 *     cdef long n = len(condition)
 * 
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "vcfnp/iter.pyx":139
 *     cdef Variant *variant
 *     cdef long i = 0
 *     cdef long n = len(condition)             # <<<<<<<<<<<<<<
 * 
 *     for vcf_fn in vcf_fns:
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_condition); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_n = __pyx_t_1;

  /* "vcfnp/iter.pyx":141
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 141, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":142
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 142, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp/iter.pyx":143
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
    try {
      __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 143, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":144
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_parse_info); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_t_7;

    /* "vcfnp/iter.pyx":145
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         region_start, region_stop = None, None
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp/iter.pyx":146
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 */
    __pyx_t_4 = Py_None;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_8 = Py_None;
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_stop);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp/iter.pyx":147
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    __pyx_t_9 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "vcfnp/iter.pyx":148
 *         region_start, region_stop = None, None
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_8 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_region, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      try {
        __pyx_t_7 = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 148, __pyx_L1_error)
      }
      __pyx_cur_scope->__pyx_v_region_set = __pyx_t_7;

      /* "vcfnp/iter.pyx":149
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      __pyx_t_10 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_10) {

        /* "vcfnp/iter.pyx":150
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 150, __pyx_L1_error)

        /* "vcfnp/iter.pyx":149
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      }

      /* "vcfnp/iter.pyx":151
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_, __pyx_cur_scope->__pyx_v_region, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
      __pyx_t_9 = (__pyx_t_10 != 0);
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":152
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 152, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_8)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L10_unpacking_done;
          __pyx_L9_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 152, __pyx_L1_error)
          __pyx_L10_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start_stop);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "vcfnp/iter.pyx":153
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "vcfnp/iter.pyx":154
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 154, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_11 = __pyx_t_8; __Pyx_INCREF(__pyx_t_11); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 154, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_15 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 154, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_15(__pyx_t_11);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 154, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_t_8 = 0;

          /* "vcfnp/iter.pyx":153
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
          __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_v); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (1) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 153, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_start);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_stop);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;

        /* "vcfnp/iter.pyx":151
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      }

      /* "vcfnp/iter.pyx":147
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    }

    /* "vcfnp/iter.pyx":155
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 */
    try {
      __pyx_t_16 = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 155, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant = __pyx_t_16;

    /* "vcfnp/iter.pyx":157
 *         variant = new Variant(deref(variant_file))
 * 
 *         while i < n and _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 */
    while (1) {
      __pyx_t_10 = ((__pyx_cur_scope->__pyx_v_i < __pyx_cur_scope->__pyx_v_n) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_4 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L15_bool_binop_done:;
      if (!__pyx_t_9) break;

      /* "vcfnp/iter.pyx":158
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 i += 1
 */
      __pyx_t_10 = (__pyx_cur_scope->__pyx_v_region_start != Py_None);
      __pyx_t_17 = (__pyx_t_10 != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_9 = __pyx_t_17;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_truncate); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
      if (__pyx_t_17) {
      } else {
        __pyx_t_9 = __pyx_t_17;
        goto __pyx_L18_bool_binop_done;
      }

      /* "vcfnp/iter.pyx":159
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_variant->position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_cur_scope->__pyx_v_region_start, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __pyx_t_17;
      __pyx_L18_bool_binop_done:;

      /* "vcfnp/iter.pyx":158
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 i += 1
 */
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":160
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             if condition[i]:
 */
        __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);

        /* "vcfnp/iter.pyx":161
 *                     variant.position < region_start:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 */
        goto __pyx_L13_continue;

        /* "vcfnp/iter.pyx":158
 * 
 *         while i < n and _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 i += 1
 */
      }

      /* "vcfnp/iter.pyx":162
 *                 i += 1
 *                 continue
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 *             i += 1
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_condition, __pyx_cur_scope->__pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":163
 *                 continue
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
        if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fieldspec))||((__pyx_cur_scope->__pyx_v_fieldspec) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_fieldspec)->tp_name), 0))) __PYX_ERR(0, 163, __pyx_L1_error)
        if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_filter_ids))||((__pyx_cur_scope->__pyx_v_filter_ids) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_filter_ids)->tp_name), 0))) __PYX_ERR(0, 163, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_flatten_filter); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)
        __pyx_t_8 = __pyx_f_5vcfnp_4iter__mkvrow(__pyx_cur_scope->__pyx_v_variant, ((PyObject*)__pyx_cur_scope->__pyx_v_fieldspec), ((PyObject*)__pyx_cur_scope->__pyx_v_filter_ids), __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L22_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 163, __pyx_L1_error)

        /* "vcfnp/iter.pyx":162
 *                 i += 1
 *                 continue
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 *             i += 1
 */
      }

      /* "vcfnp/iter.pyx":164
 *             if condition[i]:
 *                 yield _mkvrow(variant, fieldspec, filter_ids, flatten_filter)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);
      __pyx_L13_continue:;
    }

    /* "vcfnp/iter.pyx":166
 *             i += 1
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp/iter.pyx":167
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp/iter.pyx":141
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":131
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter, parse_info, condition,
 *                                  truncate):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_itervariants_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":170
 * 
 * 
 * cdef _get_next_variant(VariantCallFile *variant_file, Variant *variant):             # <<<<<<<<<<<<<<
 *     # break this out into a separate function so we can profile it
 *     return variant_file.getNextVariant(deref(variant))
 */

static PyObject *__pyx_f_5vcfnp_4iter__get_next_variant(vcf::VariantCallFile *__pyx_v_variant_file, vcf::Variant *__pyx_v_variant) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_get_next_variant", 0);

  /* "vcfnp/iter.pyx":172
 * cdef _get_next_variant(VariantCallFile *variant_file, Variant *variant):
 *     # break this out into a separate function so we can profile it
 *     return variant_file.getNextVariant(deref(variant))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_variant_file->getNextVariant((*__pyx_v_variant));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":170
 * 
 * 
 * cdef _get_next_variant(VariantCallFile *variant_file, Variant *variant):             # <<<<<<<<<<<<<<
 *     # break this out into a separate function so we can profile it
 *     return variant_file.getNextVariant(deref(variant))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp.iter._get_next_variant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":175
 * 
 * 
 * cdef _mkvrow(Variant *variant, tuple fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *              bint flatten_filter):
 *     """Make a row of variant data."""
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkvrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_fill = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_transformer = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("_mkvrow", 0);

  /* "vcfnp/iter.pyx":178
 *              bint flatten_filter):
 *     """Make a row of variant data."""
 *     out = list()             # <<<<<<<<<<<<<<
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":179
 *     """Make a row of variant data."""
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:             # <<<<<<<<<<<<<<
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 */
  if (unlikely(__pyx_v_fieldspec == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_fieldspec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 179, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 179, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 5) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 179, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fill, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_transformer, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp/iter.pyx":180
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,             # <<<<<<<<<<<<<<
 *                       filter_ids)
 *         if (f == b'FILTER') and flatten_filter:
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_f); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_vcf_type); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)

    /* "vcfnp/iter.pyx":181
 *     for f, arity, fill, vcf_type, transformer in fieldspec:
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)             # <<<<<<<<<<<<<<
 *         if (f == b'FILTER') and flatten_filter:
 *             out.extend(val)
 */
    __pyx_t_3 = __pyx_f_5vcfnp_4iter__mkvval(__pyx_v_variant, __pyx_t_11, __pyx_t_12, __pyx_v_fill, __pyx_t_13, __pyx_v_transformer, __pyx_v_filter_ids); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vcfnp/iter.pyx":182
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 *         if (f == b'FILTER') and flatten_filter:             # <<<<<<<<<<<<<<
 *             out.extend(val)
 *         else:
 */
    __pyx_t_15 = (__Pyx_PyBytes_Equals(__pyx_v_f, __pyx_n_b_FILTER, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
    if (__pyx_t_15) {
    } else {
      __pyx_t_14 = __pyx_t_15;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_15 = (__pyx_v_flatten_filter != 0);
    __pyx_t_14 = __pyx_t_15;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_14) {

      /* "vcfnp/iter.pyx":183
 *                       filter_ids)
 *         if (f == b'FILTER') and flatten_filter:
 *             out.extend(val)             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(val)
 */
      __pyx_t_16 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 183, __pyx_L1_error)

      /* "vcfnp/iter.pyx":182
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 *         if (f == b'FILTER') and flatten_filter:             # <<<<<<<<<<<<<<
 *             out.extend(val)
 *         else:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":185
 *             out.extend(val)
 *         else:
 *             out.append(val)             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
    /*else*/ {
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 185, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "vcfnp/iter.pyx":179
 *     """Make a row of variant data."""
 *     out = list()
 *     for f, arity, fill, vcf_type, transformer in fieldspec:             # <<<<<<<<<<<<<<
 *         val = _mkvval(variant, f, arity, fill, vcf_type, transformer,
 *                       filter_ids)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":186
 *         else:
 *             out.append(val)
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":175
 * 
 * 
 * cdef _mkvrow(Variant *variant, tuple fieldspec, tuple filter_ids,             # <<<<<<<<<<<<<<
 *              bint flatten_filter):
 *     """Make a row of variant data."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp.iter._mkvrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_fill);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_transformer);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":189
 * 
 * 
 * cdef _mkvval(Variant *variant, string field, int arity, object fill,             # <<<<<<<<<<<<<<
 *              int vcf_type, transformer, tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkvval(vcf::Variant *__pyx_v_variant, std::string __pyx_v_field, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_vcf_type, PyObject *__pyx_v_transformer, PyObject *__pyx_v_filter_ids) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_mkvval", 0);

  /* "vcfnp/iter.pyx":191
 * cdef _mkvval(Variant *variant, string field, int arity, object fill,
 *              int vcf_type, transformer, tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_CHROM) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":192
 *              int vcf_type, transformer, tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:
 *         out = variant.sequenceName             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->sequenceName); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":191
 * cdef _mkvval(Variant *variant, string field, int arity, object fill,
 *              int vcf_type, transformer, tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":193
 *     if field == FIELD_NAME_CHROM:
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_POS) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":194
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_variant->position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":193
 *     if field == FIELD_NAME_CHROM:
 *         out = variant.sequenceName
 *     elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":195
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_ID) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":196
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":195
 *     elif field == FIELD_NAME_POS:
 *         out = variant.position
 *     elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":197
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_REF) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":198
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->ref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":197
 *     elif field == FIELD_NAME_ID:
 *         out = variant.id
 *     elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":199
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_ALT) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":200
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkaltval(__pyx_v_variant, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":199
 *     elif field == FIELD_NAME_REF:
 *         out = variant.ref
 *     elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":201
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_QUAL) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":202
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_variant->quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":201
 *     elif field == FIELD_NAME_ALT:
 *         out = _mkaltval(variant, arity, fill)
 *     elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":203
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_FILTER) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":204
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkfilterval(__pyx_v_variant, __pyx_v_filter_ids); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":203
 *     elif field == FIELD_NAME_QUAL:
 *         out = variant.quality
 *     elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":205
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_NUM_ALLELES) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":206
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)(__pyx_v_variant->alt.size() + 1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":205
 *     elif field == FIELD_NAME_FILTER:
 *         out = _mkfilterval(variant, filter_ids)
 *     elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":207
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_SNP) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":208
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__is_snp(__pyx_v_variant); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":207
 *     elif field == FIELD_NAME_NUM_ALLELES:
 *         out = <int>(variant.alt.size() + 1)
 *     elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":209
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:             # <<<<<<<<<<<<<<
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_SVLEN) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":210
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)             # <<<<<<<<<<<<<<
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__svlen(__pyx_v_variant, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":209
 *     elif field == FIELD_NAME_IS_SNP:
 *         out = _is_snp(variant)
 *     elif field == FIELD_NAME_SVLEN:             # <<<<<<<<<<<<<<
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":211
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:             # <<<<<<<<<<<<<<
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:
 */
  __pyx_t_1 = (__pyx_v_transformer != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "vcfnp/iter.pyx":212
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])             # <<<<<<<<<<<<<<
 *     elif vcf_type == FIELD_BOOL:
 *         # ignore arity, this is a flag
 */
    __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_transformer);
    __pyx_t_5 = __pyx_v_transformer; __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":211
 *     elif field == FIELD_NAME_SVLEN:
 *         out = _svlen(variant, arity, fill)
 *     elif transformer is not None:             # <<<<<<<<<<<<<<
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":213
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *         # ignore arity, this is a flag
 *         out = (variant.infoFlags.count(field) > 0)
 */
  __pyx_t_3 = ((__pyx_v_vcf_type == vcf::FIELD_BOOL) != 0);
  if (__pyx_t_3) {

    /* "vcfnp/iter.pyx":215
 *     elif vcf_type == FIELD_BOOL:
 *         # ignore arity, this is a flag
 *         out = (variant.infoFlags.count(field) > 0)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_variant->infoFlags.count(__pyx_v_field) > 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":213
 *     elif transformer is not None:
 *         out = transformer(variant.info[field])
 *     elif vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *         # ignore arity, this is a flag
 *         out = (variant.infoFlags.count(field) > 0)
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":217
 *         out = (variant.infoFlags.count(field) > 0)
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval((__pyx_v_variant->info[__pyx_v_field]), __pyx_v_arity, __pyx_v_fill, __pyx_v_vcf_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp/iter.pyx":218
 *     else:
 *         out = _mkval(variant.info[field], arity, fill, vcf_type)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":189
 * 
 * 
 * cdef _mkvval(Variant *variant, string field, int arity, object fill,             # <<<<<<<<<<<<<<
 *              int vcf_type, transformer, tuple filter_ids):
 *     if field == FIELD_NAME_CHROM:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp.iter._mkvval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":221
 * 
 * 
 * cdef _mkaltval(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkaltval(vcf::Variant *__pyx_v_variant, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_mkaltval", 0);

  /* "vcfnp/iter.pyx":222
 * 
 * cdef _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if variant.alt.size() == 0:
 *             out = fill
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":223
 * cdef _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:
 *         if variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *             out = fill
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_variant->alt.size() == 0) != 0);
    if (__pyx_t_1) {

      /* "vcfnp/iter.pyx":224
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 *             out = fill             # <<<<<<<<<<<<<<
 *         else:
 *             out = variant.alt.at(0)
 */
      __Pyx_INCREF(__pyx_v_fill);
      __pyx_v_out = __pyx_v_fill;

      /* "vcfnp/iter.pyx":223
 * cdef _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:
 *         if variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *             out = fill
 *         else:
 */
      goto __pyx_L4;
    }

    /* "vcfnp/iter.pyx":226
 *             out = fill
 *         else:
 *             out = variant.alt.at(0)             # <<<<<<<<<<<<<<
 *     elif variant.alt.size() == arity:
 *         out = variant.alt
 */
    /*else*/ {
      try {
        __pyx_t_2 = __pyx_v_variant->alt.at(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 226, __pyx_L1_error)
      }
      __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_out = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L4:;

    /* "vcfnp/iter.pyx":222
 * 
 * cdef _mkaltval(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if variant.alt.size() == 0:
 *             out = fill
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":227
 *         else:
 *             out = variant.alt.at(0)
 *     elif variant.alt.size() == arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out)
 */
  __pyx_t_1 = ((__pyx_v_variant->alt.size() == __pyx_v_arity) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":228
 *             out = variant.alt.at(0)
 *     elif variant.alt.size() == arity:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp/iter.pyx":229
 *     elif variant.alt.size() == arity:
 *         out = variant.alt
 *         out = tuple(out)             # <<<<<<<<<<<<<<
 *     elif variant.alt.size() > arity:
 *         out = variant.alt
 */
    __pyx_t_3 = PySequence_Tuple(__pyx_v_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vcfnp/iter.pyx":227
 *         else:
 *             out = variant.alt.at(0)
 *     elif variant.alt.size() == arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out)
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":230
 *         out = variant.alt
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out[:arity])
 */
  __pyx_t_1 = ((__pyx_v_variant->alt.size() > __pyx_v_arity) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":231
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out = tuple(out[:arity])
 *     else:
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vcfnp/iter.pyx":232
 *     elif variant.alt.size() > arity:
 *         out = variant.alt
 *         out = tuple(out[:arity])             # <<<<<<<<<<<<<<
 *     else:
 *         out = variant.alt
 */
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_out, 0, __pyx_v_arity, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":230
 *         out = variant.alt
 *         out = tuple(out)
 *     elif variant.alt.size() > arity:             # <<<<<<<<<<<<<<
 *         out = variant.alt
 *         out = tuple(out[:arity])
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":234
 *         out = tuple(out[:arity])
 *     else:
 *         out = variant.alt             # <<<<<<<<<<<<<<
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)
 */
  /*else*/ {
    __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_out = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":235
 *     else:
 *         out = variant.alt
 *         out += [fill] * (arity-variant.alt.size())             # <<<<<<<<<<<<<<
 *         out = tuple(out)
 *     return out
 */
    __pyx_t_4 = PyList_New(1 * ((__pyx_v_arity - __pyx_v_variant->alt.size()))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < (__pyx_v_arity - __pyx_v_variant->alt.size()); __pyx_temp++) {
        __Pyx_INCREF(__pyx_v_fill);
        __Pyx_GIVEREF(__pyx_v_fill);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, __pyx_v_fill);
      }
    }
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_out, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vcfnp/iter.pyx":236
 *         out = variant.alt
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_3 = PySequence_Tuple(__pyx_v_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "vcfnp/iter.pyx":237
 *         out += [fill] * (arity-variant.alt.size())
 *         out = tuple(out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":221
 * 
 * 
 * cdef _mkaltval(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if variant.alt.size() == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.iter._mkaltval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":240
 * 
 * 
 * cdef _mkfilterval(Variant *variant, tuple filter_ids):             # <<<<<<<<<<<<<<
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkfilterval(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_filter_ids) {
  PyObject *__pyx_v_filters = NULL;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_mkfilterval", 0);

  /* "vcfnp/iter.pyx":241
 * 
 * cdef _mkfilterval(Variant *variant, tuple filter_ids):
 *     filters = <list>split(variant.filter, SEMICOLON)             # <<<<<<<<<<<<<<
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(split(__pyx_v_variant->filter, __pyx_v_5vcfnp_4iter_SEMICOLON)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_filters = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":242
 * cdef _mkfilterval(Variant *variant, tuple filter_ids):
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]             # <<<<<<<<<<<<<<
 *     out = tuple(out)
 *     return out
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_filter_ids == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 242, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_filter_ids; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_f, __pyx_v_filters, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":243
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_out); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_out, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":244
 *     out = [(f in filters) for f in filter_ids]
 *     out = tuple(out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":240
 * 
 * 
 * cdef _mkfilterval(Variant *variant, tuple filter_ids):             # <<<<<<<<<<<<<<
 *     filters = <list>split(variant.filter, SEMICOLON)
 *     out = [(f in filters) for f in filter_ids]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.iter._mkfilterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filters);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":247
 * 
 * 
 * cdef _is_snp(Variant *variant):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef bytes alt
 */

static PyObject *__pyx_f_5vcfnp_4iter__is_snp(vcf::Variant *__pyx_v_variant) {
  int __pyx_v_i;
  PyObject *__pyx_v_alt = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_FakeReference<std::string> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("_is_snp", 0);

  /* "vcfnp/iter.pyx":250
 *     cdef int i
 *     cdef bytes alt
 *     if variant.ref.size() > 1:             # <<<<<<<<<<<<<<
 *         return False
 *     for i in range(variant.alt.size()):
 */
  __pyx_t_1 = ((__pyx_v_variant->ref.size() > 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":251
 *     cdef bytes alt
 *     if variant.ref.size() > 1:
 *         return False             # <<<<<<<<<<<<<<
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":250
 *     cdef int i
 *     cdef bytes alt
 *     if variant.ref.size() > 1:             # <<<<<<<<<<<<<<
 *         return False
 *     for i in range(variant.alt.size()):
 */
  }

  /* "vcfnp/iter.pyx":252
 *     if variant.ref.size() > 1:
 *         return False
 *     for i in range(variant.alt.size()):             # <<<<<<<<<<<<<<
 *         alt = variant.alt.at(i)
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:
 */
  __pyx_t_2 = __pyx_v_variant->alt.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":253
 *         return False
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)             # <<<<<<<<<<<<<<
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:
 *             return False
 */
    try {
      __pyx_t_4 = __pyx_v_variant->alt.at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 253, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_alt, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "vcfnp/iter.pyx":254
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:             # <<<<<<<<<<<<<<
 *             return False
 *     return True
 */
    __Pyx_INCREF(__pyx_v_alt);
    __pyx_t_6 = __pyx_v_alt;
    __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_n_b_A, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_n_b_C, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_n_b_G, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_n_b_T, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_kp_b__7, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    __pyx_t_1 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = (__pyx_t_1 != 0);
    if (__pyx_t_8) {

      /* "vcfnp/iter.pyx":255
 *         alt = variant.alt.at(i)
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:
 *             return False             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "vcfnp/iter.pyx":254
 *     for i in range(variant.alt.size()):
 *         alt = variant.alt.at(i)
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:             # <<<<<<<<<<<<<<
 *             return False
 *     return True
 */
    }
  }

  /* "vcfnp/iter.pyx":256
 *         if alt not in {b'A', b'C', b'G', b'T', b'*'}:
 *             return False
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":247
 * 
 * 
 * cdef _is_snp(Variant *variant):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef bytes alt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("vcfnp.iter._is_snp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_alt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":259
 * 
 * 
 * cdef _svlen(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)
 */

static PyObject *__pyx_f_5vcfnp_4iter__svlen(vcf::Variant *__pyx_v_variant, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_svlen", 0);

  /* "vcfnp/iter.pyx":260
 * 
 * cdef _svlen(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         return _svlen_single(variant.ref, variant.alt, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":261
 * cdef _svlen(Variant *variant, int arity, object fill):
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         return _svlen_multi(variant.ref, variant.alt, arity, fill)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__svlen_single(__pyx_v_variant->ref, __pyx_v_variant->alt, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":260
 * 
 * cdef _svlen(Variant *variant, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         return _svlen_single(variant.ref, variant.alt, fill)
 *     else:
 */
  }

  /* "vcfnp/iter.pyx":263
 *         return _svlen_single(variant.ref, variant.alt, fill)
 *     else:
 *         return _svlen_multi(variant.ref, variant.alt, arity, fill)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__svlen_multi(__pyx_v_variant->ref, __pyx_v_variant->alt, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":259
 * 
 * 
 * cdef _svlen(Variant *variant, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         return _svlen_single(variant.ref, variant.alt, fill)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp.iter._svlen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":266
 * 
 * 
 * cdef _svlen_single(string ref, vector[string]& alt, object fill):             # <<<<<<<<<<<<<<
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 */

static PyObject *__pyx_f_5vcfnp_4iter__svlen_single(std::string __pyx_v_ref, std::vector<std::string>  &__pyx_v_alt, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_svlen_single", 0);

  /* "vcfnp/iter.pyx":267
 * 
 * cdef _svlen_single(string ref, vector[string]& alt, object fill):
 *     if alt.size() > 0:             # <<<<<<<<<<<<<<
 *         return <int>(alt.at(0).size() - ref.size())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_alt.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":268
 * cdef _svlen_single(string ref, vector[string]& alt, object fill):
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_alt.at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 268, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(((int)(__pyx_t_2->size() - __pyx_v_ref.size()))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":267
 * 
 * cdef _svlen_single(string ref, vector[string]& alt, object fill):
 *     if alt.size() > 0:             # <<<<<<<<<<<<<<
 *         return <int>(alt.at(0).size() - ref.size())
 *     return fill
 */
  }

  /* "vcfnp/iter.pyx":269
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":266
 * 
 * 
 * cdef _svlen_single(string ref, vector[string]& alt, object fill):             # <<<<<<<<<<<<<<
 *     if alt.size() > 0:
 *         return <int>(alt.at(0).size() - ref.size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp.iter._svlen_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":272
 * 
 * 
 * cdef _svlen_multi(string ref, vector[string]& alt, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

static PyObject *__pyx_f_5vcfnp_4iter__svlen_multi(std::string __pyx_v_ref, std::vector<std::string>  &__pyx_v_alt, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_svlen_multi", 0);

  /* "vcfnp/iter.pyx":274
 * cdef _svlen_multi(string ref, vector[string]& alt, int arity, object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < alt.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":275
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < alt.size():
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":276
 *     out = list()
 *     for i in range(arity):
 *         if i < alt.size():             # <<<<<<<<<<<<<<
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_alt.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp/iter.pyx":277
 *     for i in range(arity):
 *         if i < alt.size():
 *             out.append(<int>(alt.at(i).size() - ref.size()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      try {
        __pyx_t_5 = __pyx_v_alt.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 277, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_From_int(((int)(__pyx_t_5->size() - __pyx_v_ref.size()))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vcfnp/iter.pyx":276
 *     out = list()
 *     for i in range(arity):
 *         if i < alt.size():             # <<<<<<<<<<<<<<
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "vcfnp/iter.pyx":279
 *             out.append(<int>(alt.at(i).size() - ref.size()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 279, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "vcfnp/iter.pyx":280
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":272
 * 
 * 
 * cdef _svlen_multi(string ref, vector[string]& alt, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._svlen_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":283
 * 
 * 
 * cdef _mkval(vector[string]& string_vals, int arity, object fill, int vcf_type):             # <<<<<<<<<<<<<<
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_vcf_type) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_mkval", 0);

  /* "vcfnp/iter.pyx":284
 * 
 * cdef _mkval(vector[string]& string_vals, int arity, object fill, int vcf_type):
 *     if vcf_type == FIELD_FLOAT:             # <<<<<<<<<<<<<<
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:
 */
  switch (__pyx_v_vcf_type) {
    case vcf::FIELD_FLOAT:

    /* "vcfnp/iter.pyx":285
 * cdef _mkval(vector[string]& string_vals, int arity, object fill, int vcf_type):
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     elif vcf_type == FIELD_INTEGER:
 *         out = _mkval_long(string_vals, arity, fill)
 */
    __pyx_t_1 = __pyx_f_5vcfnp_4iter__mkval_double(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "vcfnp/iter.pyx":284
 * 
 * cdef _mkval(vector[string]& string_vals, int arity, object fill, int vcf_type):
 *     if vcf_type == FIELD_FLOAT:             # <<<<<<<<<<<<<<
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:
 */
    break;

    /* "vcfnp/iter.pyx":286
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:             # <<<<<<<<<<<<<<
 *         out = _mkval_long(string_vals, arity, fill)
 *     else:
 */
    case vcf::FIELD_INTEGER:

    /* "vcfnp/iter.pyx":287
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:
 *         out = _mkval_long(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         # make strings by default
 */
    __pyx_t_1 = __pyx_f_5vcfnp_4iter__mkval_long(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "vcfnp/iter.pyx":286
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 *     elif vcf_type == FIELD_INTEGER:             # <<<<<<<<<<<<<<
 *         out = _mkval_long(string_vals, arity, fill)
 *     else:
 */
    break;
    default:

    /* "vcfnp/iter.pyx":290
 *     else:
 *         # make strings by default
 *         out = _mkval_string(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_1 = __pyx_f_5vcfnp_4iter__mkval_string(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_out = __pyx_t_1;
    __pyx_t_1 = 0;
    break;
  }

  /* "vcfnp/iter.pyx":291
 *         # make strings by default
 *         out = _mkval_string(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":283
 * 
 * 
 * cdef _mkval(vector[string]& string_vals, int arity, object fill, int vcf_type):             # <<<<<<<<<<<<<<
 *     if vcf_type == FIELD_FLOAT:
 *         out = _mkval_double(string_vals, arity, fill)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._mkval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":294
 * 
 * 
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if string_vals.size() > 0:
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_string(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_mkval_string", 0);

  /* "vcfnp/iter.pyx":295
 * 
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if string_vals.size() > 0:
 *             return string_vals.at(0)
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":296
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:
 *         if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *             return string_vals.at(0)
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
    if (__pyx_t_1) {

      /* "vcfnp/iter.pyx":297
 *     if arity == 1:
 *         if string_vals.size() > 0:
 *             return string_vals.at(0)             # <<<<<<<<<<<<<<
 *         else:
 *             return fill
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_2 = __pyx_v_string_vals.at(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 297, __pyx_L1_error)
      }
      __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "vcfnp/iter.pyx":296
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:
 *         if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *             return string_vals.at(0)
 *         else:
 */
    }

    /* "vcfnp/iter.pyx":299
 *             return string_vals.at(0)
 *         else:
 *             return fill             # <<<<<<<<<<<<<<
 *     else:
 *         return _mkval_string_multi(string_vals, arity, fill)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_fill);
      __pyx_r = __pyx_v_fill;
      goto __pyx_L0;
    }

    /* "vcfnp/iter.pyx":295
 * 
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         if string_vals.size() > 0:
 *             return string_vals.at(0)
 */
  }

  /* "vcfnp/iter.pyx":301
 *             return fill
 *     else:
 *         return _mkval_string_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_5vcfnp_4iter__mkval_string_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":294
 * 
 * 
 * cdef _mkval_string(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         if string_vals.size() > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp.iter._mkval_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":304
 * 
 * 
 * cdef _mkval_string_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_string_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_mkval_string_multi", 0);

  /* "vcfnp/iter.pyx":306
 * cdef _mkval_string_multi(vector[string]& string_vals, int arity, object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":307
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":308
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp/iter.pyx":309
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      try {
        __pyx_t_5 = __pyx_v_string_vals.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 309, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vcfnp/iter.pyx":308
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "vcfnp/iter.pyx":311
 *             out.append(string_vals.at(i))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 311, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "vcfnp/iter.pyx":312
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":304
 * 
 * 
 * cdef _mkval_string_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._mkval_string_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":315
 * 
 * 
 * cdef _mkval_double(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         out = _mkval_double_single(string_vals, fill)
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_double(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_mkval_double", 0);

  /* "vcfnp/iter.pyx":316
 * 
 * cdef _mkval_double(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_double_single(string_vals, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":317
 * cdef _mkval_double(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:
 *         out = _mkval_double_single(string_vals, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval_double_single(__pyx_v_string_vals, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":316
 * 
 * cdef _mkval_double(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_double_single(string_vals, fill)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":319
 *         out = _mkval_double_single(string_vals, fill)
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval_double_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp/iter.pyx":320
 *     else:
 *         out = _mkval_double_multi(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":315
 * 
 * 
 * cdef _mkval_double(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         out = _mkval_double_single(string_vals, fill)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp.iter._mkval_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":323
 * 
 * 
 * cdef _mkval_double_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     cdef double v
 *     if string_vals.size() > 0:
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_double_single(std::vector<std::string>  &__pyx_v_string_vals, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_mkval_double_single", 0);

  /* "vcfnp/iter.pyx":325
 * cdef _mkval_double_single(vector[string]& string_vals, object fill):
 *     cdef double v
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atof(string_vals.at(0).c_str())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":326
 *     cdef double v
 *     if string_vals.size() > 0:
 *         return atof(string_vals.at(0).c_str())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_string_vals.at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 326, __pyx_L1_error)
    }
    __pyx_t_3 = PyFloat_FromDouble(atof(__pyx_t_2->c_str())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":325
 * cdef _mkval_double_single(vector[string]& string_vals, object fill):
 *     cdef double v
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atof(string_vals.at(0).c_str())
 *     return fill
 */
  }

  /* "vcfnp/iter.pyx":327
 *     if string_vals.size() > 0:
 *         return atof(string_vals.at(0).c_str())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":323
 * 
 * 
 * cdef _mkval_double_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     cdef double v
 *     if string_vals.size() > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp.iter._mkval_double_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":330
 * 
 * 
 * cdef _mkval_double_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_double_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_mkval_double_multi", 0);

  /* "vcfnp/iter.pyx":332
 * cdef _mkval_double_multi(vector[string]& string_vals, int arity, object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":333
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(atof(string_vals.at(i).c_str()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":334
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atof(string_vals.at(i).c_str()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp/iter.pyx":335
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(atof(string_vals.at(i).c_str()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      try {
        __pyx_t_5 = __pyx_v_string_vals.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 335, __pyx_L1_error)
      }
      __pyx_t_1 = PyFloat_FromDouble(atof(__pyx_t_5->c_str())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vcfnp/iter.pyx":334
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atof(string_vals.at(i).c_str()))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "vcfnp/iter.pyx":337
 *             out.append(atof(string_vals.at(i).c_str()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 337, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "vcfnp/iter.pyx":338
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":330
 * 
 * 
 * cdef _mkval_double_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._mkval_double_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":341
 * 
 * 
 * cdef _mkval_long(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         out = _mkval_long_single(string_vals, fill)
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_long(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_mkval_long", 0);

  /* "vcfnp/iter.pyx":342
 * 
 * cdef _mkval_long(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_long_single(string_vals, fill)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arity == 1) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":343
 * cdef _mkval_long(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:
 *         out = _mkval_long_single(string_vals, fill)             # <<<<<<<<<<<<<<
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)
 */
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval_long_single(__pyx_v_string_vals, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "vcfnp/iter.pyx":342
 * 
 * cdef _mkval_long(vector[string]& string_vals, int arity, object fill):
 *     if arity == 1:             # <<<<<<<<<<<<<<
 *         out = _mkval_long_single(string_vals, fill)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "vcfnp/iter.pyx":345
 *         out = _mkval_long_single(string_vals, fill)
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval_long_multi(__pyx_v_string_vals, __pyx_v_arity, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_out = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "vcfnp/iter.pyx":346
 *     else:
 *         out = _mkval_long_multi(string_vals, arity, fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":341
 * 
 * 
 * cdef _mkval_long(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     if arity == 1:
 *         out = _mkval_long_single(string_vals, fill)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp.iter._mkval_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":349
 * 
 * 
 * cdef _mkval_long_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_long_single(std::vector<std::string>  &__pyx_v_string_vals, PyObject *__pyx_v_fill) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_mkval_long_single", 0);

  /* "vcfnp/iter.pyx":350
 * 
 * cdef _mkval_long_single(vector[string]& string_vals, object fill):
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atol(string_vals.at(0).c_str())
 *     return fill
 */
  __pyx_t_1 = ((__pyx_v_string_vals.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":351
 * cdef _mkval_long_single(vector[string]& string_vals, object fill):
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())             # <<<<<<<<<<<<<<
 *     return fill
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_string_vals.at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 351, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_long(atol(__pyx_t_2->c_str())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":350
 * 
 * cdef _mkval_long_single(vector[string]& string_vals, object fill):
 *     if string_vals.size() > 0:             # <<<<<<<<<<<<<<
 *         return atol(string_vals.at(0).c_str())
 *     return fill
 */
  }

  /* "vcfnp/iter.pyx":352
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 *     return fill             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fill);
  __pyx_r = __pyx_v_fill;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":349
 * 
 * 
 * cdef _mkval_long_single(vector[string]& string_vals, object fill):             # <<<<<<<<<<<<<<
 *     if string_vals.size() > 0:
 *         return atol(string_vals.at(0).c_str())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp.iter._mkval_long_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":355
 * 
 * 
 * cdef _mkval_long_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkval_long_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_mkval_long_multi", 0);

  /* "vcfnp/iter.pyx":357
 * cdef _mkval_long_multi(vector[string]& string_vals, int arity, object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":358
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(atol(string_vals.at(i).c_str()))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":359
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atol(string_vals.at(i).c_str()))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp/iter.pyx":360
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(atol(string_vals.at(i).c_str()))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      try {
        __pyx_t_5 = __pyx_v_string_vals.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 360, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_From_long(atol(__pyx_t_5->c_str())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vcfnp/iter.pyx":359
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(atol(string_vals.at(i).c_str()))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "vcfnp/iter.pyx":362
 *             out.append(atol(string_vals.at(i).c_str()))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 362, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "vcfnp/iter.pyx":363
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":355
 * 
 * 
 * cdef _mkval_long_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._mkval_long_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":366
 * 
 * 
 * def itercalldata(vcf_fns, region, samples, ploidy, fields, arities, fills,             # <<<<<<<<<<<<<<
 *                  format_types, condition, truncate):
 *     """Iterate over call data (genotypes, etc.) returning tuples suitable for
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_9itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_8itercalldata[] = "itercalldata(vcf_fns, region, samples, ploidy, fields, arities, fills, format_types, condition, truncate)\nIterate over call data (genotypes, etc.) returning tuples suitable for\n    loading into a numpy structured array.";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_9itercalldata = {"itercalldata", (PyCFunction)__pyx_pw_5vcfnp_4iter_9itercalldata, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_8itercalldata};
static PyObject *__pyx_pw_5vcfnp_4iter_9itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_ploidy = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_fills = 0;
  PyObject *__pyx_v_format_types = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itercalldata (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_fills,&__pyx_n_s_format_types,&__pyx_n_s_condition,&__pyx_n_s_truncate,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 1); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 2); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 3); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 4); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 5); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fills)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 6); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 7); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 8); __PYX_ERR(0, 366, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, 9); __PYX_ERR(0, 366, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "itercalldata") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = values[2];
    __pyx_v_ploidy = values[3];
    __pyx_v_fields = values[4];
    __pyx_v_arities = values[5];
    __pyx_v_fills = values[6];
    __pyx_v_format_types = values[7];
    __pyx_v_condition = values[8];
    __pyx_v_truncate = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("itercalldata", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 366, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter.itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_8itercalldata(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fields, __pyx_v_arities, __pyx_v_fills, __pyx_v_format_types, __pyx_v_condition, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_8itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_fills, PyObject *__pyx_v_format_types, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate) {
  PyObject *__pyx_v_fieldspec = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("itercalldata", 0);
  __Pyx_INCREF(__pyx_v_vcf_fns);
  __Pyx_INCREF(__pyx_v_region);
  __Pyx_INCREF(__pyx_v_samples);
  __Pyx_INCREF(__pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  __Pyx_INCREF(__pyx_v_format_types);

  /* "vcfnp/iter.pyx":372
 * 
 *     # force bytes
 *     vcf_fns = _b(tuple(vcf_fns))             # <<<<<<<<<<<<<<
 *     region = region
 *     samples = _b(tuple(samples))
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_vcf_fns, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":373
 *     # force bytes
 *     vcf_fns = _b(tuple(vcf_fns))
 *     region = region             # <<<<<<<<<<<<<<
 *     samples = _b(tuple(samples))
 *     fields = _b(tuple(fields))
 */
  __Pyx_INCREF(__pyx_v_region);
  __Pyx_DECREF_SET(__pyx_v_region, __pyx_v_region);

  /* "vcfnp/iter.pyx":374
 *     vcf_fns = _b(tuple(vcf_fns))
 *     region = region
 *     samples = _b(tuple(samples))             # <<<<<<<<<<<<<<
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5vcfnp_6compat_b(__pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_samples, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":375
 *     region = region
 *     samples = _b(tuple(samples))
 *     fields = _b(tuple(fields))             # <<<<<<<<<<<<<<
 *     arities = tuple(arities)
 *     fills = tuple(fills)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_fields, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":376
 *     samples = _b(tuple(samples))
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)             # <<<<<<<<<<<<<<
 *     fills = tuple(fills)
 *     format_types = tuple(format_types)
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_arities); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_arities, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":377
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 *     fills = tuple(fills)             # <<<<<<<<<<<<<<
 *     format_types = tuple(format_types)
 * 
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_fills); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_fills, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":378
 *     arities = tuple(arities)
 *     fills = tuple(fills)
 *     format_types = tuple(format_types)             # <<<<<<<<<<<<<<
 * 
 *     # zip up field parameters
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_v_format_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_format_types, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":381
 * 
 *     # zip up field parameters
 *     fieldspec = tuple(zip(fields, arities, fills, format_types))             # <<<<<<<<<<<<<<
 * 
 *     if condition is None:
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arities);
  __Pyx_INCREF(__pyx_v_fills);
  __Pyx_GIVEREF(__pyx_v_fills);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_fills);
  __Pyx_INCREF(__pyx_v_format_types);
  __Pyx_GIVEREF(__pyx_v_format_types);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_format_types);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fieldspec = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":383
 *     fieldspec = tuple(zip(fields, arities, fills, format_types))
 * 
 *     if condition is None:             # <<<<<<<<<<<<<<
 *         return _itercalldata(vcf_fns, region, samples, ploidy, fieldspec,
 *                              truncate)
 */
  __pyx_t_3 = (__pyx_v_condition == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "vcfnp/iter.pyx":384
 * 
 *     if condition is None:
 *         return _itercalldata(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                              truncate)
 *     else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itercalldata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "vcfnp/iter.pyx":385
 *     if condition is None:
 *         return _itercalldata(vcf_fns, region, samples, ploidy, fieldspec,
 *                              truncate)             # <<<<<<<<<<<<<<
 *     else:
 *         return _itercalldata_with_condition(vcf_fns, region, samples, ploidy,
 */
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(6+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_region);
    __Pyx_INCREF(__pyx_v_samples);
    __Pyx_GIVEREF(__pyx_v_samples);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_samples);
    __Pyx_INCREF(__pyx_v_ploidy);
    __Pyx_GIVEREF(__pyx_v_ploidy);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_ploidy);
    __Pyx_INCREF(__pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_v_fieldspec);
    __Pyx_INCREF(__pyx_v_truncate);
    __Pyx_GIVEREF(__pyx_v_truncate);
    PyTuple_SET_ITEM(__pyx_t_7, 5+__pyx_t_6, __pyx_v_truncate);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":383
 *     fieldspec = tuple(zip(fields, arities, fills, format_types))
 * 
 *     if condition is None:             # <<<<<<<<<<<<<<
 *         return _itercalldata(vcf_fns, region, samples, ploidy, fieldspec,
 *                              truncate)
 */
  }

  /* "vcfnp/iter.pyx":387
 *                              truncate)
 *     else:
 *         return _itercalldata_with_condition(vcf_fns, region, samples, ploidy,             # <<<<<<<<<<<<<<
 *                                             fieldspec, condition, truncate)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itercalldata_with_condition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "vcfnp/iter.pyx":388
 *     else:
 *         return _itercalldata_with_condition(vcf_fns, region, samples, ploidy,
 *                                             fieldspec, condition, truncate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(7+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_vcf_fns);
    __Pyx_GIVEREF(__pyx_v_vcf_fns);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_vcf_fns);
    __Pyx_INCREF(__pyx_v_region);
    __Pyx_GIVEREF(__pyx_v_region);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_region);
    __Pyx_INCREF(__pyx_v_samples);
    __Pyx_GIVEREF(__pyx_v_samples);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_v_samples);
    __Pyx_INCREF(__pyx_v_ploidy);
    __Pyx_GIVEREF(__pyx_v_ploidy);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_6, __pyx_v_ploidy);
    __Pyx_INCREF(__pyx_v_fieldspec);
    __Pyx_GIVEREF(__pyx_v_fieldspec);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_6, __pyx_v_fieldspec);
    __Pyx_INCREF(__pyx_v_condition);
    __Pyx_GIVEREF(__pyx_v_condition);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_6, __pyx_v_condition);
    __Pyx_INCREF(__pyx_v_truncate);
    __Pyx_GIVEREF(__pyx_v_truncate);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_6, __pyx_v_truncate);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":366
 * 
 * 
 * def itercalldata(vcf_fns, region, samples, ploidy, fields, arities, fills,             # <<<<<<<<<<<<<<
 *                  format_types, condition, truncate):
 *     """Iterate over call data (genotypes, etc.) returning tuples suitable for
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vcfnp.iter.itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fieldspec);
  __Pyx_XDECREF(__pyx_v_vcf_fns);
  __Pyx_XDECREF(__pyx_v_region);
  __Pyx_XDECREF(__pyx_v_samples);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_arities);
  __Pyx_XDECREF(__pyx_v_fills);
  __Pyx_XDECREF(__pyx_v_format_types);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_4iter_12generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp/iter.pyx":392
 * 
 * 
 * def _itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_11_itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_10_itercalldata[] = "_itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate)";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_11_itercalldata = {"_itercalldata", (PyCFunction)__pyx_pw_5vcfnp_4iter_11_itercalldata, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_10_itercalldata};
static PyObject *__pyx_pw_5vcfnp_4iter_11_itercalldata(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_ploidy = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fieldspec,&__pyx_n_s_truncate,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, 1); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, 2); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, 3); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, 4); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, 5); __PYX_ERR(0, 392, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itercalldata") < 0)) __PYX_ERR(0, 392, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = values[2];
    __pyx_v_ploidy = values[3];
    __pyx_v_fieldspec = values[4];
    __pyx_v_truncate = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itercalldata", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter._itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_10_itercalldata(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fieldspec, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_10_itercalldata(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_truncate) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_2__itercalldata, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_samples = __pyx_v_samples;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_samples);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_samples);
  __pyx_cur_scope->__pyx_v_ploidy = __pyx_v_ploidy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ploidy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ploidy);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_truncate = __pyx_v_truncate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_truncate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_truncate);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5vcfnp_4iter_12generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_itercalldata, __pyx_n_s_itercalldata); if (unlikely(!gen)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.iter._itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_4iter_12generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  bool __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  vcf::Variant *__pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L19_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 392, __pyx_L1_error)

  /* "vcfnp/iter.pyx":396
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 396, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 396, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 396, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":397
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 397, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp/iter.pyx":398
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
    try {
      __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 398, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":399
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = True
 *         region_start, region_stop = None, None
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = 0;

    /* "vcfnp/iter.pyx":400
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True             # <<<<<<<<<<<<<<
 *         region_start, region_stop = None, None
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 1;

    /* "vcfnp/iter.pyx":401
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = True
 *         region_start, region_stop = None, None             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 */
    __pyx_t_4 = Py_None;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = Py_None;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_stop);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp/iter.pyx":402
 *         variant_file.parseSamples = True
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "vcfnp/iter.pyx":403
 *         region_start, region_stop = None, None
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_7 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_region, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      try {
        __pyx_t_10 = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 403, __pyx_L1_error)
      }
      __pyx_cur_scope->__pyx_v_region_set = __pyx_t_10;

      /* "vcfnp/iter.pyx":404
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      __pyx_t_9 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":405
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 405, __pyx_L1_error)

        /* "vcfnp/iter.pyx":404
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      }

      /* "vcfnp/iter.pyx":406
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_, __pyx_cur_scope->__pyx_v_region, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
      __pyx_t_8 = (__pyx_t_9 != 0);
      if (__pyx_t_8) {

        /* "vcfnp/iter.pyx":407
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 407, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L10_unpacking_done;
          __pyx_L9_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 407, __pyx_L1_error)
          __pyx_L10_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start_stop);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "vcfnp/iter.pyx":408
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "vcfnp/iter.pyx":409
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_11 = __pyx_t_7; __Pyx_INCREF(__pyx_t_11); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_15 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 409, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_15(__pyx_t_11);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 409, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          __pyx_t_7 = 0;

          /* "vcfnp/iter.pyx":408
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
          __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_v); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 408, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 408, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (1) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 408, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 408, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 408, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_start);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_stop);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;

        /* "vcfnp/iter.pyx":406
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      }

      /* "vcfnp/iter.pyx":402
 *         variant_file.parseSamples = True
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    }

    /* "vcfnp/iter.pyx":410
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while _get_next_variant(variant_file, variant):
 */
    try {
      __pyx_t_16 = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 410, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant = __pyx_t_16;

    /* "vcfnp/iter.pyx":412
 *         variant = new Variant(deref(variant_file))
 * 
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 */
    while (1) {
      __pyx_t_4 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_8) break;

      /* "vcfnp/iter.pyx":413
 * 
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      __pyx_t_9 = (__pyx_cur_scope->__pyx_v_region_start != Py_None);
      __pyx_t_17 = (__pyx_t_9 != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_8 = __pyx_t_17;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_truncate); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
      if (__pyx_t_17) {
      } else {
        __pyx_t_8 = __pyx_t_17;
        goto __pyx_L16_bool_binop_done;
      }

      /* "vcfnp/iter.pyx":414
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:             # <<<<<<<<<<<<<<
 *                 continue
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_variant->position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_cur_scope->__pyx_v_region_start, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __pyx_t_17;
      __pyx_L16_bool_binop_done:;

      /* "vcfnp/iter.pyx":413
 * 
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      if (__pyx_t_8) {

        /* "vcfnp/iter.pyx":415
 *             if region_start is not None and truncate and \
 *                     variant.position < region_start:
 *                 continue             # <<<<<<<<<<<<<<
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)
 * 
 */
        goto __pyx_L13_continue;

        /* "vcfnp/iter.pyx":413
 * 
 *         while _get_next_variant(variant_file, variant):
 *             if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                     variant.position < region_start:
 *                 continue
 */
      }

      /* "vcfnp/iter.pyx":416
 *                     variant.position < region_start:
 *                 continue
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_samples))||((__pyx_cur_scope->__pyx_v_samples) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_samples)->tp_name), 0))) __PYX_ERR(0, 416, __pyx_L1_error)
      __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_ploidy); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 416, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fieldspec))||((__pyx_cur_scope->__pyx_v_fieldspec) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_fieldspec)->tp_name), 0))) __PYX_ERR(0, 416, __pyx_L1_error)
      __pyx_t_7 = __pyx_f_5vcfnp_4iter__mkcrow(__pyx_cur_scope->__pyx_v_variant, ((PyObject*)__pyx_cur_scope->__pyx_v_samples), __pyx_t_18, ((PyObject*)__pyx_cur_scope->__pyx_v_fieldspec)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L19_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 416, __pyx_L1_error)
      __pyx_L13_continue:;
    }

    /* "vcfnp/iter.pyx":418
 *             yield _mkcrow(variant, samples, ploidy, fieldspec)
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp/iter.pyx":419
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp/iter.pyx":396
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":392
 * 
 * 
 * def _itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_itercalldata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_4iter_15generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp/iter.pyx":422
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                                  condition, truncate):
 *     cdef VariantCallFile *variant_file
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_14_itercalldata_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_13_itercalldata_with_condition[] = "_itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec, condition, truncate)";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_14_itercalldata_with_condition = {"_itercalldata_with_condition", (PyCFunction)__pyx_pw_5vcfnp_4iter_14_itercalldata_with_condition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_13_itercalldata_with_condition};
static PyObject *__pyx_pw_5vcfnp_4iter_14_itercalldata_with_condition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_ploidy = 0;
  PyObject *__pyx_v_fieldspec = 0;
  PyObject *__pyx_v_condition = 0;
  PyObject *__pyx_v_truncate = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata_with_condition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_samples,&__pyx_n_s_ploidy,&__pyx_n_s_fieldspec,&__pyx_n_s_condition,&__pyx_n_s_truncate,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 1); __PYX_ERR(0, 422, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 2); __PYX_ERR(0, 422, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ploidy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 3); __PYX_ERR(0, 422, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fieldspec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 4); __PYX_ERR(0, 422, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 5); __PYX_ERR(0, 422, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_truncate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, 6); __PYX_ERR(0, 422, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_itercalldata_with_condition") < 0)) __PYX_ERR(0, 422, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_samples = values[2];
    __pyx_v_ploidy = values[3];
    __pyx_v_fieldspec = values[4];
    __pyx_v_condition = values[5];
    __pyx_v_truncate = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_itercalldata_with_condition", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter._itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_13_itercalldata_with_condition(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_samples, __pyx_v_ploidy, __pyx_v_fieldspec, __pyx_v_condition, __pyx_v_truncate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_13_itercalldata_with_condition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_samples, PyObject *__pyx_v_ploidy, PyObject *__pyx_v_fieldspec, PyObject *__pyx_v_condition, PyObject *__pyx_v_truncate) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_itercalldata_with_condition", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_samples = __pyx_v_samples;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_samples);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_samples);
  __pyx_cur_scope->__pyx_v_ploidy = __pyx_v_ploidy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ploidy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ploidy);
  __pyx_cur_scope->__pyx_v_fieldspec = __pyx_v_fieldspec;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fieldspec);
  __pyx_cur_scope->__pyx_v_condition = __pyx_v_condition;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_condition);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_condition);
  __pyx_cur_scope->__pyx_v_truncate = __pyx_v_truncate;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_truncate);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_truncate);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5vcfnp_4iter_15generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_itercalldata_with_condition, __pyx_n_s_itercalldata_with_condition); if (unlikely(!gen)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.iter._itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_4iter_15generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  vcf::VariantCallFile *__pyx_t_5;
  std::string __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  bool __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  vcf::Variant *__pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L21_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 422, __pyx_L1_error)

  /* "vcfnp/iter.pyx":426
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 *     cdef long i = 0             # <<<<<<<<<<<<<<
 *     cdef long n = len(condition)
 * 
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "vcfnp/iter.pyx":427
 *     cdef Variant *variant
 *     cdef long i = 0
 *     cdef long n = len(condition)             # <<<<<<<<<<<<<<
 * 
 *     for vcf_fn in vcf_fns:
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_condition); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_n = __pyx_t_1;

  /* "vcfnp/iter.pyx":429
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 429, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":430
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 */
    try {
      __pyx_t_5 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 430, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_5;

    /* "vcfnp/iter.pyx":431
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
    try {
      __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 431, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":432
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = 0;

    /* "vcfnp/iter.pyx":433
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         region_start, region_stop = None, None
 *         if region is not None:
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp/iter.pyx":434
 *         variant_file.parseInfo = False
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 */
    __pyx_t_4 = Py_None;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = Py_None;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_stop);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;

    /* "vcfnp/iter.pyx":435
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "vcfnp/iter.pyx":436
 *         region_start, region_stop = None, None
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_7 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_region, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      try {
        __pyx_t_10 = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 436, __pyx_L1_error)
      }
      __pyx_cur_scope->__pyx_v_region_set = __pyx_t_10;

      /* "vcfnp/iter.pyx":437
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      __pyx_t_9 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_9) {

        /* "vcfnp/iter.pyx":438
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 438, __pyx_L1_error)

        /* "vcfnp/iter.pyx":437
 *         if region is not None:
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             if ':' in region:
 */
      }

      /* "vcfnp/iter.pyx":439
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_, __pyx_cur_scope->__pyx_v_region, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 439, __pyx_L1_error)
      __pyx_t_8 = (__pyx_t_9 != 0);
      if (__pyx_t_8) {

        /* "vcfnp/iter.pyx":440
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 440, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 440, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 440, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L10_unpacking_done;
          __pyx_L9_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 440, __pyx_L1_error)
          __pyx_L10_unpacking_done:;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_region_start_stop);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "vcfnp/iter.pyx":441
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "vcfnp/iter.pyx":442
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_region_start_stop, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_11 = __pyx_t_7; __Pyx_INCREF(__pyx_t_11); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 442, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_15 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 442, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_15(__pyx_t_11);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 442, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          __pyx_t_7 = 0;

          /* "vcfnp/iter.pyx":441
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in             # <<<<<<<<<<<<<<
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))
 */
          __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_v); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (1) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 441, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 441, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_start);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_start, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region_stop);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region_stop, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;

        /* "vcfnp/iter.pyx":439
 *             if not region_set:
 *                 raise StopIteration
 *             if ':' in region:             # <<<<<<<<<<<<<<
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 */
      }

      /* "vcfnp/iter.pyx":435
 *         variant_file.parseSamples = False
 *         region_start, region_stop = None, None
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(_b(region))
 *             if not region_set:
 */
    }

    /* "vcfnp/iter.pyx":443
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while i < n:
 */
    try {
      __pyx_t_16 = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 443, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant = __pyx_t_16;

    /* "vcfnp/iter.pyx":445
 *         variant = new Variant(deref(variant_file))
 * 
 *         while i < n:             # <<<<<<<<<<<<<<
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:
 */
    while (1) {
      __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_i < __pyx_cur_scope->__pyx_v_n) != 0);
      if (!__pyx_t_8) break;

      /* "vcfnp/iter.pyx":447
 *         while i < n:
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_condition, __pyx_cur_scope->__pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {

        /* "vcfnp/iter.pyx":448
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:
 *                 variant_file.parseSamples = True             # <<<<<<<<<<<<<<
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 */
        __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 1;

        /* "vcfnp/iter.pyx":449
 *             if condition[i]:
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *                 if region_start is not None and truncate and \
 */
        __pyx_t_4 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 449, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = ((!__pyx_t_8) != 0);
        if (__pyx_t_9) {

          /* "vcfnp/iter.pyx":450
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):
 *                     break             # <<<<<<<<<<<<<<
 *                 if region_start is not None and truncate and \
 *                         variant.position < region_start:
 */
          goto __pyx_L14_break;

          /* "vcfnp/iter.pyx":449
 *             if condition[i]:
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *                 if region_start is not None and truncate and \
 */
        }

        /* "vcfnp/iter.pyx":451
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *                 if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                         variant.position < region_start:
 *                     continue
 */
        __pyx_t_8 = (__pyx_cur_scope->__pyx_v_region_start != Py_None);
        __pyx_t_17 = (__pyx_t_8 != 0);
        if (__pyx_t_17) {
        } else {
          __pyx_t_9 = __pyx_t_17;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_truncate); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 451, __pyx_L1_error)
        if (__pyx_t_17) {
        } else {
          __pyx_t_9 = __pyx_t_17;
          goto __pyx_L18_bool_binop_done;
        }

        /* "vcfnp/iter.pyx":452
 *                     break
 *                 if region_start is not None and truncate and \
 *                         variant.position < region_start:             # <<<<<<<<<<<<<<
 *                     continue
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 */
        __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_variant->position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_cur_scope->__pyx_v_region_start, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 452, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 452, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = __pyx_t_17;
        __pyx_L18_bool_binop_done:;

        /* "vcfnp/iter.pyx":451
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *                 if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                         variant.position < region_start:
 *                     continue
 */
        if (__pyx_t_9) {

          /* "vcfnp/iter.pyx":453
 *                 if region_start is not None and truncate and \
 *                         variant.position < region_start:
 *                     continue             # <<<<<<<<<<<<<<
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 *             else:
 */
          goto __pyx_L13_continue;

          /* "vcfnp/iter.pyx":451
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *                 if region_start is not None and truncate and \             # <<<<<<<<<<<<<<
 *                         variant.position < region_start:
 *                     continue
 */
        }

        /* "vcfnp/iter.pyx":454
 *                         variant.position < region_start:
 *                     continue
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)             # <<<<<<<<<<<<<<
 *             else:
 *                 variant_file.parseSamples = False
 */
        if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_samples))||((__pyx_cur_scope->__pyx_v_samples) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_samples)->tp_name), 0))) __PYX_ERR(0, 454, __pyx_L1_error)
        __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_ploidy); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
        if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fieldspec))||((__pyx_cur_scope->__pyx_v_fieldspec) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_fieldspec)->tp_name), 0))) __PYX_ERR(0, 454, __pyx_L1_error)
        __pyx_t_7 = __pyx_f_5vcfnp_4iter__mkcrow(__pyx_cur_scope->__pyx_v_variant, ((PyObject*)__pyx_cur_scope->__pyx_v_samples), __pyx_t_18, ((PyObject*)__pyx_cur_scope->__pyx_v_fieldspec)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L21_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 454, __pyx_L1_error)

        /* "vcfnp/iter.pyx":447
 *         while i < n:
 *             # only worth parsing samples if we know we want the variant
 *             if condition[i]:             # <<<<<<<<<<<<<<
 *                 variant_file.parseSamples = True
 *                 if not _get_next_variant(variant_file, variant):
 */
        goto __pyx_L15;
      }

      /* "vcfnp/iter.pyx":456
 *                 yield _mkcrow(variant, samples, ploidy, fieldspec)
 *             else:
 *                 variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 */
      /*else*/ {
        __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

        /* "vcfnp/iter.pyx":457
 *             else:
 *                 variant_file.parseSamples = False
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *             i += 1
 */
        __pyx_t_7 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_17 = ((!__pyx_t_9) != 0);
        if (__pyx_t_17) {

          /* "vcfnp/iter.pyx":458
 *                 variant_file.parseSamples = False
 *                 if not _get_next_variant(variant_file, variant):
 *                     break             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
          goto __pyx_L14_break;

          /* "vcfnp/iter.pyx":457
 *             else:
 *                 variant_file.parseSamples = False
 *                 if not _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *                     break
 *             i += 1
 */
        }
      }
      __pyx_L15:;

      /* "vcfnp/iter.pyx":459
 *                 if not _get_next_variant(variant_file, variant):
 *                     break
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_cur_scope->__pyx_v_i = (__pyx_cur_scope->__pyx_v_i + 1);
      __pyx_L13_continue:;
    }
    __pyx_L14_break:;

    /* "vcfnp/iter.pyx":461
 *             i += 1
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp/iter.pyx":462
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp/iter.pyx":429
 *     cdef long n = len(condition)
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":422
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                                  condition, truncate):
 *     cdef VariantCallFile *variant_file
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_itercalldata_with_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":465
 * 
 * 
 * cdef _mkcrow(Variant *variant, tuple samples, int ploidy, tuple fieldspec):             # <<<<<<<<<<<<<<
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]
 *     return tuple(out)
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkcrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_samples, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("_mkcrow", 0);

  /* "vcfnp/iter.pyx":466
 * 
 * cdef _mkcrow(Variant *variant, tuple samples, int ploidy, tuple fieldspec):
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_samples == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_5vcfnp_4iter__mkcvals(__pyx_v_variant, __pyx_t_5, __pyx_v_ploidy, __pyx_v_fieldspec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":467
 * cdef _mkcrow(Variant *variant, tuple samples, int ploidy, tuple fieldspec):
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":465
 * 
 * 
 * cdef _mkcrow(Variant *variant, tuple samples, int ploidy, tuple fieldspec):             # <<<<<<<<<<<<<<
 *     out = [_mkcvals(variant, s, ploidy, fieldspec) for s in samples]
 *     return tuple(out)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.iter._mkcrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":470
 * 
 * 
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):             # <<<<<<<<<<<<<<
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkcvals(vcf::Variant *__pyx_v_variant, std::string __pyx_v_sample, int __pyx_v_ploidy, PyObject *__pyx_v_fieldspec) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_fill = NULL;
  PyObject *__pyx_v_format_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("_mkcvals", 0);

  /* "vcfnp/iter.pyx":471
 * 
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)             # <<<<<<<<<<<<<<
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "vcfnp/iter.pyx":472
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  if (unlikely(__pyx_v_fieldspec == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 472, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_fieldspec; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 472, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 472, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 472, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fill, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_format_type, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp/iter.pyx":471
 * 
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)             # <<<<<<<<<<<<<<
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_f); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_format_type); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_5vcfnp_4iter__mkcval((__pyx_v_variant->samples[__pyx_v_sample]), __pyx_v_ploidy, __pyx_t_11, __pyx_t_12, __pyx_v_fill, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vcfnp/iter.pyx":472
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]             # <<<<<<<<<<<<<<
 *     return tuple(out)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":473
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]
 *     return tuple(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":470
 * 
 * 
 * cdef _mkcvals(Variant *variant, string sample, int ploidy, tuple fieldspec):             # <<<<<<<<<<<<<<
 *     out = [_mkcval(variant.samples[sample], ploidy, f, arity, fill, format_type)
 *            for (f, arity, fill, format_type) in fieldspec]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp.iter._mkcvals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_fill);
  __Pyx_XDECREF(__pyx_v_format_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":476
 * 
 * 
 * cdef _mkcval(map[string, vector[string]]& sample_data, int ploidy,             # <<<<<<<<<<<<<<
 *              string field, int arity, object fill, int format_type):
 *     if field == FIELD_NAME_IS_CALLED:
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkcval(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data, int __pyx_v_ploidy, std::string __pyx_v_field, int __pyx_v_arity, PyObject *__pyx_v_fill, int __pyx_v_format_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_mkcval", 0);

  /* "vcfnp/iter.pyx":478
 * cdef _mkcval(map[string, vector[string]]& sample_data, int ploidy,
 *              string field, int arity, object fill, int format_type):
 *     if field == FIELD_NAME_IS_CALLED:             # <<<<<<<<<<<<<<
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_CALLED) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":479
 *              string field, int arity, object fill, int format_type):
 *     if field == FIELD_NAME_IS_CALLED:
 *         return _is_called(sample_data)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__is_called(__pyx_v_sample_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":478
 * cdef _mkcval(map[string, vector[string]]& sample_data, int ploidy,
 *              string field, int arity, object fill, int format_type):
 *     if field == FIELD_NAME_IS_CALLED:             # <<<<<<<<<<<<<<
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:
 */
  }

  /* "vcfnp/iter.pyx":480
 *     if field == FIELD_NAME_IS_CALLED:
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:             # <<<<<<<<<<<<<<
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_PHASED) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":481
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)             # <<<<<<<<<<<<<<
 *     elif field == FIELD_NAME_GENOTYPE:
 *         return _genotype(sample_data, ploidy)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__is_phased(__pyx_v_sample_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":480
 *     if field == FIELD_NAME_IS_CALLED:
 *         return _is_called(sample_data)
 *     elif field == FIELD_NAME_IS_PHASED:             # <<<<<<<<<<<<<<
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:
 */
  }

  /* "vcfnp/iter.pyx":482
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:             # <<<<<<<<<<<<<<
 *         return _genotype(sample_data, ploidy)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_GENOTYPE) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":483
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:
 *         return _genotype(sample_data, ploidy)             # <<<<<<<<<<<<<<
 *     else:
 *         return _mkval(sample_data[field], arity, fill, format_type)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__genotype(__pyx_v_sample_data, __pyx_v_ploidy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":482
 *     elif field == FIELD_NAME_IS_PHASED:
 *         return _is_phased(sample_data)
 *     elif field == FIELD_NAME_GENOTYPE:             # <<<<<<<<<<<<<<
 *         return _genotype(sample_data, ploidy)
 *     else:
 */
  }

  /* "vcfnp/iter.pyx":485
 *         return _genotype(sample_data, ploidy)
 *     else:
 *         return _mkval(sample_data[field], arity, fill, format_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5vcfnp_4iter__mkval((__pyx_v_sample_data[__pyx_v_field]), __pyx_v_arity, __pyx_v_fill, __pyx_v_format_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":476
 * 
 * 
 * cdef _mkcval(map[string, vector[string]]& sample_data, int ploidy,             # <<<<<<<<<<<<<<
 *              string field, int arity, object fill, int format_type):
 *     if field == FIELD_NAME_IS_CALLED:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vcfnp.iter._mkcval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":488
 * 
 * 
 * cdef _is_called(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

static PyObject *__pyx_f_5vcfnp_4iter__is_called(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data) {
  std::vector<std::string>  *__pyx_v_gts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_is_called", 0);

  /* "vcfnp/iter.pyx":490
 * cdef _is_called(map[string, vector[string]]& sample_data):
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         return False
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_4iter_FIELD_NAME_GT]));

  /* "vcfnp/iter.pyx":491
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":492
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return gts.at(0).find(b'.') == npos
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":491
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "vcfnp/iter.pyx":494
 *         return False
 *     else:
 *         return gts.at(0).find(b'.') == npos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_gts->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 494, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_t_2->find(__pyx_t_3) == __pyx_v_5vcfnp_4iter_npos)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":488
 * 
 * 
 * cdef _is_called(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.iter._is_called", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":497
 * 
 * 
 * cdef _is_phased(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

static PyObject *__pyx_f_5vcfnp_4iter__is_phased(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data) {
  std::vector<std::string>  *__pyx_v_gts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<std::string> __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_is_phased", 0);

  /* "vcfnp/iter.pyx":499
 * cdef _is_phased(map[string, vector[string]]& sample_data):
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         return False
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_4iter_FIELD_NAME_GT]));

  /* "vcfnp/iter.pyx":500
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":501
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return gts.at(0).find(b'|') != npos
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "vcfnp/iter.pyx":500
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "vcfnp/iter.pyx":503
 *         return False
 *     else:
 *         return gts.at(0).find(b'|') != npos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_gts->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 503, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__13); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_t_2->find(__pyx_t_3) != __pyx_v_5vcfnp_4iter_npos)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "vcfnp/iter.pyx":497
 * 
 * 
 * cdef _is_phased(map[string, vector[string]]& sample_data):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     gts = &sample_data[FIELD_NAME_GT]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vcfnp.iter._is_phased", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":506
 * 
 * 
 * cdef _genotype(map[string, vector[string]]& sample_data, int ploidy):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     cdef vector[int] alleles
 */

static PyObject *__pyx_f_5vcfnp_4iter__genotype(std::map<std::string,std::vector<std::string> >  &__pyx_v_sample_data, int __pyx_v_ploidy) {
  std::vector<std::string>  *__pyx_v_gts;
  std::vector<int>  __pyx_v_alleles;
  std::vector<std::string>  __pyx_v_allele_strings;
  int __pyx_v_i;
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_FakeReference<std::string> __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  __Pyx_FakeReference<std::string> __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_FakeReference<std::string> __pyx_t_9;
  __Pyx_FakeReference<std::string> __pyx_t_10;
  __Pyx_RefNannySetupContext("_genotype", 0);

  /* "vcfnp/iter.pyx":512
 *     cdef int i
 *     cdef int allele
 *     gts = &sample_data[FIELD_NAME_GT]             # <<<<<<<<<<<<<<
 *     if gts.size() == 0:
 *         if ploidy == 1:
 */
  __pyx_v_gts = (&(__pyx_v_sample_data[__pyx_v_5vcfnp_4iter_FIELD_NAME_GT]));

  /* "vcfnp/iter.pyx":513
 *     cdef int allele
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         if ploidy == 1:
 *             return -1
 */
  __pyx_t_1 = ((__pyx_v_gts->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "vcfnp/iter.pyx":514
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_ploidy == 1) != 0);
    if (__pyx_t_1) {

      /* "vcfnp/iter.pyx":515
 *     if gts.size() == 0:
 *         if ploidy == 1:
 *             return -1             # <<<<<<<<<<<<<<
 *         else:
 *             return (-1,) * ploidy
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_neg_1);
      __pyx_r = __pyx_int_neg_1;
      goto __pyx_L0;

      /* "vcfnp/iter.pyx":514
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             return -1
 *         else:
 */
    }

    /* "vcfnp/iter.pyx":517
 *             return -1
 *         else:
 *             return (-1,) * ploidy             # <<<<<<<<<<<<<<
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ploidy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__14, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "vcfnp/iter.pyx":513
 *     cdef int allele
 *     gts = &sample_data[FIELD_NAME_GT]
 *     if gts.size() == 0:             # <<<<<<<<<<<<<<
 *         if ploidy == 1:
 *             return -1
 */
  }

  /* "vcfnp/iter.pyx":519
 *             return (-1,) * ploidy
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)             # <<<<<<<<<<<<<<
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:
 */
  /*else*/ {
    try {
      __pyx_t_4 = __pyx_v_gts->at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 519, __pyx_L1_error)
    }
    split(__pyx_t_4, __pyx_v_5vcfnp_4iter_GT_DELIMS, __pyx_v_allele_strings);

    /* "vcfnp/iter.pyx":520
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             if allele_strings.size() > 0:
 *                 s = allele_strings.at(0)
 */
    __pyx_t_1 = ((__pyx_v_ploidy == 1) != 0);
    if (__pyx_t_1) {

      /* "vcfnp/iter.pyx":521
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:             # <<<<<<<<<<<<<<
 *                 s = allele_strings.at(0)
 *                 if s == b'.':
 */
      __pyx_t_1 = ((__pyx_v_allele_strings.size() > 0) != 0);
      if (__pyx_t_1) {

        /* "vcfnp/iter.pyx":522
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:
 *                 s = allele_strings.at(0)             # <<<<<<<<<<<<<<
 *                 if s == b'.':
 *                     return -1
 */
        try {
          __pyx_t_5 = __pyx_v_allele_strings.at(0);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 522, __pyx_L1_error)
        }
        __pyx_v_s = __pyx_t_5;

        /* "vcfnp/iter.pyx":523
 *             if allele_strings.size() > 0:
 *                 s = allele_strings.at(0)
 *                 if s == b'.':             # <<<<<<<<<<<<<<
 *                     return -1
 *                 else:
 */
        __pyx_t_1 = ((__pyx_v_s == ((char *)".")) != 0);
        if (__pyx_t_1) {

          /* "vcfnp/iter.pyx":524
 *                 s = allele_strings.at(0)
 *                 if s == b'.':
 *                     return -1             # <<<<<<<<<<<<<<
 *                 else:
 *                     return atoi(allele_strings.at(0).c_str())
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_int_neg_1);
          __pyx_r = __pyx_int_neg_1;
          goto __pyx_L0;

          /* "vcfnp/iter.pyx":523
 *             if allele_strings.size() > 0:
 *                 s = allele_strings.at(0)
 *                 if s == b'.':             # <<<<<<<<<<<<<<
 *                     return -1
 *                 else:
 */
        }

        /* "vcfnp/iter.pyx":526
 *                     return -1
 *                 else:
 *                     return atoi(allele_strings.at(0).c_str())             # <<<<<<<<<<<<<<
 *             else:
 *                 return -1
 */
        /*else*/ {
          __Pyx_XDECREF(__pyx_r);
          try {
            __pyx_t_6 = __pyx_v_allele_strings.at(0);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 526, __pyx_L1_error)
          }
          __pyx_t_3 = __Pyx_PyInt_From_int(atoi(__pyx_t_6->c_str())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_r = __pyx_t_3;
          __pyx_t_3 = 0;
          goto __pyx_L0;
        }

        /* "vcfnp/iter.pyx":521
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:
 *             if allele_strings.size() > 0:             # <<<<<<<<<<<<<<
 *                 s = allele_strings.at(0)
 *                 if s == b'.':
 */
      }

      /* "vcfnp/iter.pyx":528
 *                     return atoi(allele_strings.at(0).c_str())
 *             else:
 *                 return -1             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(ploidy):
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_int_neg_1);
        __pyx_r = __pyx_int_neg_1;
        goto __pyx_L0;
      }

      /* "vcfnp/iter.pyx":520
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 *         if ploidy == 1:             # <<<<<<<<<<<<<<
 *             if allele_strings.size() > 0:
 *                 s = allele_strings.at(0)
 */
    }

    /* "vcfnp/iter.pyx":530
 *                 return -1
 *         else:
 *             for i in range(ploidy):             # <<<<<<<<<<<<<<
 *                 if i < allele_strings.size():
 *                     s = allele_strings.at(i)
 */
    /*else*/ {
      __pyx_t_7 = __pyx_v_ploidy;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "vcfnp/iter.pyx":531
 *         else:
 *             for i in range(ploidy):
 *                 if i < allele_strings.size():             # <<<<<<<<<<<<<<
 *                     s = allele_strings.at(i)
 *                     if s == b'.':
 */
        __pyx_t_1 = ((__pyx_v_i < __pyx_v_allele_strings.size()) != 0);
        if (__pyx_t_1) {

          /* "vcfnp/iter.pyx":532
 *             for i in range(ploidy):
 *                 if i < allele_strings.size():
 *                     s = allele_strings.at(i)             # <<<<<<<<<<<<<<
 *                     if s == b'.':
 *                         alleles.push_back(-1)
 */
          try {
            __pyx_t_9 = __pyx_v_allele_strings.at(__pyx_v_i);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 532, __pyx_L1_error)
          }
          __pyx_v_s = __pyx_t_9;

          /* "vcfnp/iter.pyx":533
 *                 if i < allele_strings.size():
 *                     s = allele_strings.at(i)
 *                     if s == b'.':             # <<<<<<<<<<<<<<
 *                         alleles.push_back(-1)
 *                     else:
 */
          __pyx_t_1 = ((__pyx_v_s == ((char *)".")) != 0);
          if (__pyx_t_1) {

            /* "vcfnp/iter.pyx":534
 *                     s = allele_strings.at(i)
 *                     if s == b'.':
 *                         alleles.push_back(-1)             # <<<<<<<<<<<<<<
 *                     else:
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))
 */
            try {
              __pyx_v_alleles.push_back(-1);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 534, __pyx_L1_error)
            }

            /* "vcfnp/iter.pyx":533
 *                 if i < allele_strings.size():
 *                     s = allele_strings.at(i)
 *                     if s == b'.':             # <<<<<<<<<<<<<<
 *                         alleles.push_back(-1)
 *                     else:
 */
            goto __pyx_L11;
          }

          /* "vcfnp/iter.pyx":536
 *                         alleles.push_back(-1)
 *                     else:
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))             # <<<<<<<<<<<<<<
 *                 else:
 *                     alleles.push_back(-1)
 */
          /*else*/ {
            try {
              __pyx_t_10 = __pyx_v_allele_strings.at(__pyx_v_i);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 536, __pyx_L1_error)
            }
            try {
              __pyx_v_alleles.push_back(atoi(__pyx_t_10->c_str()));
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 536, __pyx_L1_error)
            }
          }
          __pyx_L11:;

          /* "vcfnp/iter.pyx":531
 *         else:
 *             for i in range(ploidy):
 *                 if i < allele_strings.size():             # <<<<<<<<<<<<<<
 *                     s = allele_strings.at(i)
 *                     if s == b'.':
 */
          goto __pyx_L10;
        }

        /* "vcfnp/iter.pyx":538
 *                         alleles.push_back(atoi(allele_strings.at(i).c_str()))
 *                 else:
 *                     alleles.push_back(-1)             # <<<<<<<<<<<<<<
 *             return tuple(alleles)
 * 
 */
        /*else*/ {
          try {
            __pyx_v_alleles.push_back(-1);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 538, __pyx_L1_error)
          }
        }
        __pyx_L10:;
      }

      /* "vcfnp/iter.pyx":539
 *                 else:
 *                     alleles.push_back(-1)
 *             return tuple(alleles)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }

  /* "vcfnp/iter.pyx":506
 * 
 * 
 * cdef _genotype(map[string, vector[string]]& sample_data, int ploidy):             # <<<<<<<<<<<<<<
 *     cdef vector[string] *gts
 *     cdef vector[int] alleles
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vcfnp.iter._genotype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5vcfnp_4iter_18generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "vcfnp/iter.pyx":542
 * 
 * 
 * def itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                       filter_ids, flatten_filter, fill, flatteners):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5vcfnp_4iter_17itervariantstable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5vcfnp_4iter_16itervariantstable[] = "itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info, filter_ids, flatten_filter, fill, flatteners)";
static PyMethodDef __pyx_mdef_5vcfnp_4iter_17itervariantstable = {"itervariantstable", (PyCFunction)__pyx_pw_5vcfnp_4iter_17itervariantstable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5vcfnp_4iter_16itervariantstable};
static PyObject *__pyx_pw_5vcfnp_4iter_17itervariantstable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vcf_fns = 0;
  PyObject *__pyx_v_region = 0;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_arities = 0;
  PyObject *__pyx_v_info_types = 0;
  PyObject *__pyx_v_parse_info = 0;
  PyObject *__pyx_v_filter_ids = 0;
  PyObject *__pyx_v_flatten_filter = 0;
  PyObject *__pyx_v_fill = 0;
  PyObject *__pyx_v_flatteners = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervariantstable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcf_fns,&__pyx_n_s_region,&__pyx_n_s_fields,&__pyx_n_s_arities,&__pyx_n_s_info_types,&__pyx_n_s_parse_info,&__pyx_n_s_filter_ids,&__pyx_n_s_flatten_filter,&__pyx_n_s_fill,&__pyx_n_s_flatteners,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vcf_fns)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_region)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 1); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 2); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 3); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_info_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 4); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parse_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 5); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 6); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatten_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 7); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fill)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 8); __PYX_ERR(0, 542, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flatteners)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, 9); __PYX_ERR(0, 542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "itervariantstable") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_vcf_fns = values[0];
    __pyx_v_region = values[1];
    __pyx_v_fields = values[2];
    __pyx_v_arities = values[3];
    __pyx_v_info_types = values[4];
    __pyx_v_parse_info = values[5];
    __pyx_v_filter_ids = values[6];
    __pyx_v_flatten_filter = values[7];
    __pyx_v_fill = values[8];
    __pyx_v_flatteners = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("itervariantstable", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vcfnp.iter.itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5vcfnp_4iter_16itervariantstable(__pyx_self, __pyx_v_vcf_fns, __pyx_v_region, __pyx_v_fields, __pyx_v_arities, __pyx_v_info_types, __pyx_v_parse_info, __pyx_v_filter_ids, __pyx_v_flatten_filter, __pyx_v_fill, __pyx_v_flatteners);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5vcfnp_4iter_16itervariantstable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcf_fns, PyObject *__pyx_v_region, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_parse_info, PyObject *__pyx_v_filter_ids, PyObject *__pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatteners) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervariantstable", 0);
  __pyx_cur_scope = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(__pyx_ptype_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_vcf_fns = __pyx_v_vcf_fns;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __pyx_cur_scope->__pyx_v_region = __pyx_v_region;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_region);
  __pyx_cur_scope->__pyx_v_fields = __pyx_v_fields;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fields);
  __pyx_cur_scope->__pyx_v_arities = __pyx_v_arities;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arities);
  __pyx_cur_scope->__pyx_v_info_types = __pyx_v_info_types;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_info_types);
  __pyx_cur_scope->__pyx_v_parse_info = __pyx_v_parse_info;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_parse_info);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_parse_info);
  __pyx_cur_scope->__pyx_v_filter_ids = __pyx_v_filter_ids;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __pyx_cur_scope->__pyx_v_flatten_filter = __pyx_v_flatten_filter;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatten_filter);
  __pyx_cur_scope->__pyx_v_fill = __pyx_v_fill;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fill);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fill);
  __pyx_cur_scope->__pyx_v_flatteners = __pyx_v_flatteners;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatteners);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatteners);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5vcfnp_4iter_18generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_itervariantstable, __pyx_n_s_itervariantstable); if (unlikely(!gen)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("vcfnp.iter.itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5vcfnp_4iter_18generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *__pyx_cur_scope = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  vcf::VariantCallFile *__pyx_t_7;
  std::string __pyx_t_8;
  bool __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  vcf::Variant *__pyx_t_12;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 542, __pyx_L1_error)

  /* "vcfnp/iter.pyx":546
 * 
 *     # force bytes
 *     vcf_fns = _b(tuple(vcf_fns))             # <<<<<<<<<<<<<<
 *     region = _b(region)
 *     fields = _b(tuple(fields))
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_vcf_fns);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fns, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":547
 *     # force bytes
 *     vcf_fns = _b(tuple(vcf_fns))
 *     region = _b(region)             # <<<<<<<<<<<<<<
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 */
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_region, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_region);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_region, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":548
 *     vcf_fns = _b(tuple(vcf_fns))
 *     region = _b(region)
 *     fields = _b(tuple(fields))             # <<<<<<<<<<<<<<
 *     arities = tuple(arities)
 *     info_types = tuple(info_types)
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5vcfnp_6compat_b(__pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fields);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fields, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":549
 *     region = _b(region)
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)             # <<<<<<<<<<<<<<
 *     info_types = tuple(info_types)
 *     filter_ids = _b(tuple(filter_ids))
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_arities); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_arities);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_arities, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":550
 *     fields = _b(tuple(fields))
 *     arities = tuple(arities)
 *     info_types = tuple(info_types)             # <<<<<<<<<<<<<<
 *     filter_ids = _b(tuple(filter_ids))
 *     fill = _b(fill)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_info_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_info_types);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_info_types, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":551
 *     arities = tuple(arities)
 *     info_types = tuple(info_types)
 *     filter_ids = _b(tuple(filter_ids))             # <<<<<<<<<<<<<<
 *     fill = _b(fill)
 *     flatteners = tuple(flatteners)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_filter_ids); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_filter_ids);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_filter_ids, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":552
 *     info_types = tuple(info_types)
 *     filter_ids = _b(tuple(filter_ids))
 *     fill = _b(fill)             # <<<<<<<<<<<<<<
 *     flatteners = tuple(flatteners)
 *     debug(flatteners)
 */
  __pyx_t_2 = __pyx_f_5vcfnp_6compat_b(__pyx_cur_scope->__pyx_v_fill, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_fill);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_fill, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":553
 *     filter_ids = _b(tuple(filter_ids))
 *     fill = _b(fill)
 *     flatteners = tuple(flatteners)             # <<<<<<<<<<<<<<
 *     debug(flatteners)
 * 
 */
  __pyx_t_2 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_flatteners); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_flatteners);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_flatteners, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":554
 *     fill = _b(fill)
 *     flatteners = tuple(flatteners)
 *     debug(flatteners)             # <<<<<<<<<<<<<<
 * 
 *     cdef VariantCallFile *variant_file
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_debug); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_flatteners); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flatteners);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flatteners);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_cur_scope->__pyx_v_flatteners);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":559
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vcf_fns)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vcf_fns; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vcf_fns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 559, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 559, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vcf_fn);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vcf_fn, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "vcfnp/iter.pyx":560
 * 
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()             # <<<<<<<<<<<<<<
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 */
    try {
      __pyx_t_7 = new vcf::VariantCallFile();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 560, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant_file = __pyx_t_7;

    /* "vcfnp/iter.pyx":561
 *     for vcf_fn in vcf_fns:
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)             # <<<<<<<<<<<<<<
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 */
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_vcf_fn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L1_error)
    try {
      __pyx_cur_scope->__pyx_v_variant_file->open(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 561, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":562
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info             # <<<<<<<<<<<<<<
 *         variant_file.parseSamples = False
 *         if region is not None:
 */
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_parse_info); if (unlikely((__pyx_t_9 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_variant_file->parseInfo = __pyx_t_9;

    /* "vcfnp/iter.pyx":563
 *         variant_file.open(vcf_fn)
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False             # <<<<<<<<<<<<<<
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 */
    __pyx_cur_scope->__pyx_v_variant_file->parseSamples = 0;

    /* "vcfnp/iter.pyx":564
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    __pyx_t_10 = (__pyx_cur_scope->__pyx_v_region != Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "vcfnp/iter.pyx":565
 *         variant_file.parseSamples = False
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)             # <<<<<<<<<<<<<<
 *             if not region_set:
 *                 raise StopIteration
 */
      __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_cur_scope->__pyx_v_region); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L1_error)
      try {
        __pyx_t_9 = __pyx_cur_scope->__pyx_v_variant_file->setRegion(__pyx_t_8);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 565, __pyx_L1_error)
      }
      __pyx_cur_scope->__pyx_v_region_set = __pyx_t_9;

      /* "vcfnp/iter.pyx":566
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      __pyx_t_11 = ((!(__pyx_cur_scope->__pyx_v_region_set != 0)) != 0);
      if (__pyx_t_11) {

        /* "vcfnp/iter.pyx":567
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
        __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
        __PYX_ERR(0, 567, __pyx_L1_error)

        /* "vcfnp/iter.pyx":566
 *         if region is not None:
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))
 */
      }

      /* "vcfnp/iter.pyx":564
 *         variant_file.parseInfo = parse_info
 *         variant_file.parseSamples = False
 *         if region is not None:             # <<<<<<<<<<<<<<
 *             region_set = variant_file.setRegion(region)
 *             if not region_set:
 */
    }

    /* "vcfnp/iter.pyx":568
 *             if not region_set:
 *                 raise StopIteration
 *         variant = new Variant(deref(variant_file))             # <<<<<<<<<<<<<<
 * 
 *         while _get_next_variant(variant_file, variant):
 */
    try {
      __pyx_t_12 = new vcf::Variant((*__pyx_cur_scope->__pyx_v_variant_file));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 568, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_variant = __pyx_t_12;

    /* "vcfnp/iter.pyx":570
 *         variant = new Variant(deref(variant_file))
 * 
 *         while _get_next_variant(variant_file, variant):             # <<<<<<<<<<<<<<
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,
 *                              flatten_filter, fill, flatteners)
 */
    while (1) {
      __pyx_t_1 = __pyx_f_5vcfnp_4iter__get_next_variant(__pyx_cur_scope->__pyx_v_variant_file, __pyx_cur_scope->__pyx_v_variant); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_11) break;

      /* "vcfnp/iter.pyx":571
 * 
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,             # <<<<<<<<<<<<<<
 *                              flatten_filter, fill, flatteners)
 * 
 */
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_fields))||((__pyx_cur_scope->__pyx_v_fields) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_fields)->tp_name), 0))) __PYX_ERR(0, 571, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_arities))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_arities)->tp_name), 0))) __PYX_ERR(0, 571, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_info_types))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_info_types)->tp_name), 0))) __PYX_ERR(0, 571, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_filter_ids))||((__pyx_cur_scope->__pyx_v_filter_ids) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_filter_ids)->tp_name), 0))) __PYX_ERR(0, 571, __pyx_L1_error)

      /* "vcfnp/iter.pyx":572
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,
 *                              flatten_filter, fill, flatteners)             # <<<<<<<<<<<<<<
 * 
 *         del variant_file
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_flatten_filter); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L1_error)
      if (!(likely(PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_flatteners))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_cur_scope->__pyx_v_flatteners)->tp_name), 0))) __PYX_ERR(0, 572, __pyx_L1_error)

      /* "vcfnp/iter.pyx":571
 * 
 *         while _get_next_variant(variant_file, variant):
 *             yield _mkvtblrow(variant, fields, arities, info_types, filter_ids,             # <<<<<<<<<<<<<<
 *                              flatten_filter, fill, flatteners)
 * 
 */
      __pyx_t_1 = __pyx_f_5vcfnp_4iter__mkvtblrow(__pyx_cur_scope->__pyx_v_variant, ((PyObject*)__pyx_cur_scope->__pyx_v_fields), ((PyObject*)__pyx_cur_scope->__pyx_v_arities), ((PyObject*)__pyx_cur_scope->__pyx_v_info_types), ((PyObject*)__pyx_cur_scope->__pyx_v_filter_ids), __pyx_t_11, __pyx_cur_scope->__pyx_v_fill, ((PyObject*)__pyx_cur_scope->__pyx_v_flatteners)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 571, __pyx_L1_error)
    }

    /* "vcfnp/iter.pyx":574
 *                              flatten_filter, fill, flatteners)
 * 
 *         del variant_file             # <<<<<<<<<<<<<<
 *         del variant
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant_file;

    /* "vcfnp/iter.pyx":575
 * 
 *         del variant_file
 *         del variant             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_cur_scope->__pyx_v_variant;

    /* "vcfnp/iter.pyx":559
 *     cdef Variant *variant
 * 
 *     for vcf_fn in vcf_fns:             # <<<<<<<<<<<<<<
 *         variant_file = new VariantCallFile()
 *         variant_file.open(vcf_fn)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":542
 * 
 * 
 * def itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                       filter_ids, flatten_filter, fill, flatteners):
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("itervariantstable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":578
 * 
 * 
 * cdef _mkvtblrow(Variant *variant, tuple fields, tuple arities,             # <<<<<<<<<<<<<<
 *                 tuple info_types, tuple filter_ids, bint flatten_filter,
 *                 object fill, tuple flatteners):
 */

static PyObject *__pyx_f_5vcfnp_4iter__mkvtblrow(vcf::Variant *__pyx_v_variant, PyObject *__pyx_v_fields, PyObject *__pyx_v_arities, PyObject *__pyx_v_info_types, PyObject *__pyx_v_filter_ids, int __pyx_v_flatten_filter, PyObject *__pyx_v_fill, PyObject *__pyx_v_flatteners) {
  PyObject *__pyx_v_out = NULL;
  std::string __pyx_v_field;
  std::string __pyx_v_flt;
  PyObject *__pyx_v_arity = NULL;
  PyObject *__pyx_v_vcf_type = NULL;
  PyObject *__pyx_v_flattener = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_val = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("_mkvtblrow", 0);

  /* "vcfnp/iter.pyx":581
 *                 tuple info_types, tuple filter_ids, bint flatten_filter,
 *                 object fill, tuple flatteners):
 *     out = list()             # <<<<<<<<<<<<<<
 *     cdef string field
 *     cdef string flt
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":584
 *     cdef string field
 *     cdef string flt
 *     for field, arity, vcf_type, flattener in zip(fields, arities, info_types,             # <<<<<<<<<<<<<<
 *                                                  flatteners):
 *         if field == FIELD_NAME_CHROM:
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fields);
  __Pyx_GIVEREF(__pyx_v_fields);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fields);
  __Pyx_INCREF(__pyx_v_arities);
  __Pyx_GIVEREF(__pyx_v_arities);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_arities);
  __Pyx_INCREF(__pyx_v_info_types);
  __Pyx_GIVEREF(__pyx_v_info_types);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_info_types);
  __Pyx_INCREF(__pyx_v_flatteners);
  __Pyx_GIVEREF(__pyx_v_flatteners);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_flatteners);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 584, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 584, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 584, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 584, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 584, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 584, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_field = __pyx_t_11;
    __Pyx_XDECREF_SET(__pyx_v_arity, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vcf_type, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flattener, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vcfnp/iter.pyx":586
 *     for field, arity, vcf_type, flattener in zip(fields, arities, info_types,
 *                                                  flatteners):
 *         if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:
 */
    __pyx_t_12 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_CHROM) != 0);
    if (__pyx_t_12) {

      /* "vcfnp/iter.pyx":587
 *                                                  flatteners):
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->sequenceName); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 587, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp/iter.pyx":586
 *     for field, arity, vcf_type, flattener in zip(fields, arities, info_types,
 *                                                  flatteners):
 *         if field == FIELD_NAME_CHROM:             # <<<<<<<<<<<<<<
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":588
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:
 */
    __pyx_t_12 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_POS) != 0);
    if (__pyx_t_12) {

      /* "vcfnp/iter.pyx":589
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)
 */
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_variant->position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp/iter.pyx":588
 *         if field == FIELD_NAME_CHROM:
 *             out.append(variant.sequenceName)
 *         elif field == FIELD_NAME_POS:             # <<<<<<<<<<<<<<
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":590
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:
 */
    __pyx_t_12 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_ID) != 0);
    if (__pyx_t_12) {

      /* "vcfnp/iter.pyx":591
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp/iter.pyx":590
 *         elif field == FIELD_NAME_POS:
 *             out.append(variant.position)
 *         elif field == FIELD_NAME_ID:             # <<<<<<<<<<<<<<
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":592
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 */
    __pyx_t_12 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_REF) != 0);
    if (__pyx_t_12) {

      /* "vcfnp/iter.pyx":593
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:
 */
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_variant->ref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 593, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vcfnp/iter.pyx":592
 *         elif field == FIELD_NAME_ID:
 *             out.append(variant.id)
 *         elif field == FIELD_NAME_REF:             # <<<<<<<<<<<<<<
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":594
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 */
    __pyx_t_12 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_ALT) != 0);
    if (__pyx_t_12) {

      /* "vcfnp/iter.pyx":595
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:             # <<<<<<<<<<<<<<
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 */
      __pyx_t_12 = (__pyx_v_arity != Py_None);
      __pyx_t_14 = (__pyx_t_12 != 0);
      if (__pyx_t_14) {

        /* "vcfnp/iter.pyx":596
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)             # <<<<<<<<<<<<<<
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:
 */
        __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L1_error)
        __pyx_t_2 = __pyx_f_5vcfnp_4iter__mktblval_multi(__pyx_v_variant->alt, __pyx_t_15, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "vcfnp/iter.pyx":597
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)             # <<<<<<<<<<<<<<
 *             elif variant.alt.size() == 0:
 *                 out.append(fill)
 */
        __pyx_t_13 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 597, __pyx_L1_error)

        /* "vcfnp/iter.pyx":595
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:
 *             if arity is not None:             # <<<<<<<<<<<<<<
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 */
        goto __pyx_L8;
      }

      /* "vcfnp/iter.pyx":598
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
      __pyx_t_14 = ((__pyx_v_variant->alt.size() == 0) != 0);
      if (__pyx_t_14) {

        /* "vcfnp/iter.pyx":599
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:
 *                 out.append(fill)             # <<<<<<<<<<<<<<
 *             else:
 *                 val = b','.join(variant.alt)
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 599, __pyx_L1_error)

        /* "vcfnp/iter.pyx":598
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 *                 out.extend(vals)
 *             elif variant.alt.size() == 0:             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
        goto __pyx_L8;
      }

      /* "vcfnp/iter.pyx":601
 *                 out.append(fill)
 *             else:
 *                 val = b','.join(variant.alt)             # <<<<<<<<<<<<<<
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:
 */
      /*else*/ {
        __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_variant->alt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyBytes_Join(__pyx_kp_b__15, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "vcfnp/iter.pyx":602
 *             else:
 *                 val = b','.join(variant.alt)
 *                 out.append(val)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 602, __pyx_L1_error)
      }
      __pyx_L8:;

      /* "vcfnp/iter.pyx":594
 *         elif field == FIELD_NAME_REF:
 *             out.append(variant.ref)
 *         elif field == FIELD_NAME_ALT:             # <<<<<<<<<<<<<<
 *             if arity is not None:
 *                 vals = _mktblval_multi(variant.alt, arity, fill)
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":603
 *                 val = b','.join(variant.alt)
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:
 */
    __pyx_t_14 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_QUAL) != 0);
    if (__pyx_t_14) {

      /* "vcfnp/iter.pyx":604
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_FILTER:
 *             flt = variant.filter
 */
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_variant->quality); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vcfnp/iter.pyx":603
 *                 val = b','.join(variant.alt)
 *                 out.append(val)
 *         elif field == FIELD_NAME_QUAL:             # <<<<<<<<<<<<<<
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":605
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *             flt = variant.filter
 *             if flatten_filter:
 */
    __pyx_t_14 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_FILTER) != 0);
    if (__pyx_t_14) {

      /* "vcfnp/iter.pyx":606
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:
 *             flt = variant.filter             # <<<<<<<<<<<<<<
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))
 */
      __pyx_t_11 = __pyx_v_variant->filter;
      __pyx_v_flt = __pyx_t_11;

      /* "vcfnp/iter.pyx":607
 *         elif field == FIELD_NAME_FILTER:
 *             flt = variant.filter
 *             if flatten_filter:             # <<<<<<<<<<<<<<
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif flt == b'.':
 */
      __pyx_t_14 = (__pyx_v_flatten_filter != 0);
      if (__pyx_t_14) {

        /* "vcfnp/iter.pyx":608
 *             flt = variant.filter
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))             # <<<<<<<<<<<<<<
 *             elif flt == b'.':
 *                 out.append(fill)
 */
        __pyx_t_8 = __pyx_f_5vcfnp_4iter__mkfilterval(__pyx_v_variant, __pyx_v_filter_ids); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vcfnp/iter.pyx":607
 *         elif field == FIELD_NAME_FILTER:
 *             flt = variant.filter
 *             if flatten_filter:             # <<<<<<<<<<<<<<
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif flt == b'.':
 */
        goto __pyx_L9;
      }

      /* "vcfnp/iter.pyx":609
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif flt == b'.':             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
      __pyx_t_14 = ((__pyx_v_flt == ((char *)".")) != 0);
      if (__pyx_t_14) {

        /* "vcfnp/iter.pyx":610
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif flt == b'.':
 *                 out.append(fill)             # <<<<<<<<<<<<<<
 *             else:
 *                 out.append(flt)
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 610, __pyx_L1_error)

        /* "vcfnp/iter.pyx":609
 *             if flatten_filter:
 *                 out.extend(_mkfilterval(variant, filter_ids))
 *             elif flt == b'.':             # <<<<<<<<<<<<<<
 *                 out.append(fill)
 *             else:
 */
        goto __pyx_L9;
      }

      /* "vcfnp/iter.pyx":612
 *                 out.append(fill)
 *             else:
 *                 out.append(flt)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)
 */
      /*else*/ {
        __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_flt); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 612, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_L9:;

      /* "vcfnp/iter.pyx":605
 *         elif field == FIELD_NAME_QUAL:
 *             out.append(variant.quality)
 *         elif field == FIELD_NAME_FILTER:             # <<<<<<<<<<<<<<
 *             flt = variant.filter
 *             if flatten_filter:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":613
 *             else:
 *                 out.append(flt)
 *         elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:
 */
    __pyx_t_14 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_NUM_ALLELES) != 0);
    if (__pyx_t_14) {

      /* "vcfnp/iter.pyx":614
 *                 out.append(flt)
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)             # <<<<<<<<<<<<<<
 *         elif field == FIELD_NAME_IS_SNP:
 *             out.append(_is_snp(variant))
 */
      __pyx_t_8 = __Pyx_PyInt_FromSize_t((__pyx_v_variant->alt.size() + 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vcfnp/iter.pyx":613
 *             else:
 *                 out.append(flt)
 *         elif field == FIELD_NAME_NUM_ALLELES:             # <<<<<<<<<<<<<<
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":615
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *             out.append(_is_snp(variant))
 *         else:
 */
    __pyx_t_14 = ((__pyx_v_field == __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_SNP) != 0);
    if (__pyx_t_14) {

      /* "vcfnp/iter.pyx":616
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:
 *             out.append(_is_snp(variant))             # <<<<<<<<<<<<<<
 *         else:
 *             if vcf_type == FIELD_BOOL:
 */
      __pyx_t_8 = __pyx_f_5vcfnp_4iter__is_snp(__pyx_v_variant); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_8); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vcfnp/iter.pyx":615
 *         elif field == FIELD_NAME_NUM_ALLELES:
 *             out.append(variant.alt.size() + 1)
 *         elif field == FIELD_NAME_IS_SNP:             # <<<<<<<<<<<<<<
 *             out.append(_is_snp(variant))
 *         else:
 */
      goto __pyx_L7;
    }

    /* "vcfnp/iter.pyx":618
 *             out.append(_is_snp(variant))
 *         else:
 *             if vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyInt_From_enum__vcf_3a__3a_VariantFieldType(vcf::FIELD_BOOL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_vcf_type, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_14) {

        /* "vcfnp/iter.pyx":620
 *             if vcf_type == FIELD_BOOL:
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)             # <<<<<<<<<<<<<<
 *                 out.append(val)
 *             else:
 */
        __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_variant->infoFlags.count(__pyx_v_field) > 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "vcfnp/iter.pyx":621
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)
 *                 out.append(val)             # <<<<<<<<<<<<<<
 *             else:
 *                 if arity is not None:
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_val); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 621, __pyx_L1_error)

        /* "vcfnp/iter.pyx":618
 *             out.append(_is_snp(variant))
 *         else:
 *             if vcf_type == FIELD_BOOL:             # <<<<<<<<<<<<<<
 *                 # ignore arity, this is a flag
 *                 val = (variant.infoFlags.count(field) > 0)
 */
        goto __pyx_L10;
      }

      /* "vcfnp/iter.pyx":623
 *                 out.append(val)
 *             else:
 *                 if arity is not None:             # <<<<<<<<<<<<<<
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 */
      /*else*/ {
        __pyx_t_14 = (__pyx_v_arity != Py_None);
        __pyx_t_12 = (__pyx_t_14 != 0);
        if (__pyx_t_12) {

          /* "vcfnp/iter.pyx":624
 *             else:
 *                 if arity is not None:
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)             # <<<<<<<<<<<<<<
 *                     out.extend(vals)
 *                 elif flattener is not None:
 */
          __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_arity); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
          __pyx_t_2 = __pyx_f_5vcfnp_4iter__mktblval_multi((__pyx_v_variant->info[__pyx_v_field]), __pyx_t_15, __pyx_v_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "vcfnp/iter.pyx":625
 *                 if arity is not None:
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)             # <<<<<<<<<<<<<<
 *                 elif flattener is not None:
 *                     _, t = flattener
 */
          __pyx_t_13 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 625, __pyx_L1_error)

          /* "vcfnp/iter.pyx":623
 *                 out.append(val)
 *             else:
 *                 if arity is not None:             # <<<<<<<<<<<<<<
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 */
          goto __pyx_L11;
        }

        /* "vcfnp/iter.pyx":626
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 *                 elif flattener is not None:             # <<<<<<<<<<<<<<
 *                     _, t = flattener
 *                     vals = t(variant.info[field])
 */
        __pyx_t_12 = (__pyx_v_flattener != Py_None);
        __pyx_t_14 = (__pyx_t_12 != 0);
        if (__pyx_t_14) {

          /* "vcfnp/iter.pyx":627
 *                     out.extend(vals)
 *                 elif flattener is not None:
 *                     _, t = flattener             # <<<<<<<<<<<<<<
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)
 */
          if ((likely(PyTuple_CheckExact(__pyx_v_flattener))) || (PyList_CheckExact(__pyx_v_flattener))) {
            PyObject* sequence = __pyx_v_flattener;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 627, __pyx_L1_error)
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            #else
            __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            Py_ssize_t index = -1;
            __pyx_t_7 = PyObject_GetIter(__pyx_v_flattener); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext;
            index = 0; __pyx_t_2 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_2);
            index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_7); if (unlikely(!__pyx_t_8)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_8);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_7), 2) < 0) __PYX_ERR(0, 627, __pyx_L1_error)
            __pyx_t_10 = NULL;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            goto __pyx_L13_unpacking_done;
            __pyx_L12_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_10 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 627, __pyx_L1_error)
            __pyx_L13_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "vcfnp/iter.pyx":628
 *                 elif flattener is not None:
 *                     _, t = flattener
 *                     vals = t(variant.info[field])             # <<<<<<<<<<<<<<
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:
 */
          __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_v_t);
          __pyx_t_7 = __pyx_v_t; __pyx_t_6 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_6) {
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else {
            __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "vcfnp/iter.pyx":629
 *                     _, t = flattener
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)             # <<<<<<<<<<<<<<
 *                 elif variant.info[field].size() == 0:
 *                     out.append(fill)
 */
          __pyx_t_13 = __Pyx_PyList_Extend(__pyx_v_out, __pyx_v_vals); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 629, __pyx_L1_error)

          /* "vcfnp/iter.pyx":626
 *                     vals = _mktblval_multi(variant.info[field], arity, fill)
 *                     out.extend(vals)
 *                 elif flattener is not None:             # <<<<<<<<<<<<<<
 *                     _, t = flattener
 *                     vals = t(variant.info[field])
 */
          goto __pyx_L11;
        }

        /* "vcfnp/iter.pyx":630
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:             # <<<<<<<<<<<<<<
 *                     out.append(fill)
 *                 else:
 */
        __pyx_t_14 = (((__pyx_v_variant->info[__pyx_v_field]).size() == 0) != 0);
        if (__pyx_t_14) {

          /* "vcfnp/iter.pyx":631
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:
 *                     out.append(fill)             # <<<<<<<<<<<<<<
 *                 else:
 *                     out.append(b','.join(variant.info[field]))
 */
          __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 631, __pyx_L1_error)

          /* "vcfnp/iter.pyx":630
 *                     vals = t(variant.info[field])
 *                     out.extend(vals)
 *                 elif variant.info[field].size() == 0:             # <<<<<<<<<<<<<<
 *                     out.append(fill)
 *                 else:
 */
          goto __pyx_L11;
        }

        /* "vcfnp/iter.pyx":633
 *                     out.append(fill)
 *                 else:
 *                     out.append(b','.join(variant.info[field]))             # <<<<<<<<<<<<<<
 *     # force back to str
 *     return _s(tuple(out))
 */
        /*else*/ {
          __pyx_t_8 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_variant->info[__pyx_v_field])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyBytes_Join(__pyx_kp_b__15, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 633, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_L11:;
      }
      __pyx_L10:;
    }
    __pyx_L7:;

    /* "vcfnp/iter.pyx":584
 *     cdef string field
 *     cdef string flt
 *     for field, arity, vcf_type, flattener in zip(fields, arities, info_types,             # <<<<<<<<<<<<<<
 *                                                  flatteners):
 *         if field == FIELD_NAME_CHROM:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":635
 *                     out.append(b','.join(variant.info[field]))
 *     # force back to str
 *     return _s(tuple(out))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_out); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_f_5vcfnp_6compat_s(__pyx_t_1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":578
 * 
 * 
 * cdef _mkvtblrow(Variant *variant, tuple fields, tuple arities,             # <<<<<<<<<<<<<<
 *                 tuple info_types, tuple filter_ids, bint flatten_filter,
 *                 object fill, tuple flatteners):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vcfnp.iter._mkvtblrow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_arity);
  __Pyx_XDECREF(__pyx_v_vcf_type);
  __Pyx_XDECREF(__pyx_v_flattener);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vcfnp/iter.pyx":638
 * 
 * 
 * cdef _mktblval_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

static PyObject *__pyx_f_5vcfnp_4iter__mktblval_multi(std::vector<std::string>  &__pyx_v_string_vals, int __pyx_v_arity, PyObject *__pyx_v_fill) {
  int __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_FakeReference<std::string> __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_mktblval_multi", 0);

  /* "vcfnp/iter.pyx":640
 * cdef _mktblval_multi(vector[string]& string_vals, int arity, object fill):
 *     cdef int i
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(arity):
 *         if i < string_vals.size():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vcfnp/iter.pyx":641
 *     cdef int i
 *     out = list()
 *     for i in range(arity):             # <<<<<<<<<<<<<<
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))
 */
  __pyx_t_2 = __pyx_v_arity;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "vcfnp/iter.pyx":642
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_string_vals.size()) != 0);
    if (__pyx_t_4) {

      /* "vcfnp/iter.pyx":643
 *     for i in range(arity):
 *         if i < string_vals.size():
 *             out.append(string_vals.at(i))             # <<<<<<<<<<<<<<
 *         else:
 *             out.append(fill)
 */
      try {
        __pyx_t_5 = __pyx_v_string_vals.at(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 643, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vcfnp/iter.pyx":642
 *     out = list()
 *     for i in range(arity):
 *         if i < string_vals.size():             # <<<<<<<<<<<<<<
 *             out.append(string_vals.at(i))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "vcfnp/iter.pyx":645
 *             out.append(string_vals.at(i))
 *         else:
 *             out.append(fill)             # <<<<<<<<<<<<<<
 *     return out
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_v_fill); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 645, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "vcfnp/iter.pyx":646
 *         else:
 *             out.append(fill)
 *     return out             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "vcfnp/iter.pyx":638
 * 
 * 
 * cdef _mktblval_multi(vector[string]& string_vals, int arity, object fill):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     out = list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vcfnp.iter._mktblval_multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *__pyx_freelist_5vcfnp_4iter___pyx_scope_struct___itervariants[8];
static int __pyx_freecount_5vcfnp_4iter___pyx_scope_struct___itervariants = 0;

static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct___itervariants(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct___itervariants > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp_4iter___pyx_scope_struct___itervariants[--__pyx_freecount_5vcfnp_4iter___pyx_scope_struct___itervariants];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct___itervariants(PyObject *o) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_flatten_filter);
  Py_CLEAR(p->__pyx_v_parse_info);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_region_start);
  Py_CLEAR(p->__pyx_v_region_start_stop);
  Py_CLEAR(p->__pyx_v_region_stop);
  Py_CLEAR(p->__pyx_v_truncate);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct___itervariants < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants)))) {
    __pyx_freelist_5vcfnp_4iter___pyx_scope_struct___itervariants[__pyx_freecount_5vcfnp_4iter___pyx_scope_struct___itervariants++] = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct___itervariants(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)o;
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_flatten_filter) {
    e = (*v)(p->__pyx_v_flatten_filter, a); if (e) return e;
  }
  if (p->__pyx_v_parse_info) {
    e = (*v)(p->__pyx_v_parse_info, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_region_start) {
    e = (*v)(p->__pyx_v_region_start, a); if (e) return e;
  }
  if (p->__pyx_v_region_start_stop) {
    e = (*v)(p->__pyx_v_region_start_stop, a); if (e) return e;
  }
  if (p->__pyx_v_region_stop) {
    e = (*v)(p->__pyx_v_region_stop, a); if (e) return e;
  }
  if (p->__pyx_v_truncate) {
    e = (*v)(p->__pyx_v_truncate, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct___itervariants(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants *)o;
  tmp = ((PyObject*)p->__pyx_v__);
  p->__pyx_v__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatten_filter);
  p->__pyx_v_flatten_filter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_parse_info);
  p->__pyx_v_parse_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start);
  p->__pyx_v_region_start = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start_stop);
  p->__pyx_v_region_start_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_stop);
  p->__pyx_v_region_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_truncate);
  p->__pyx_v_truncate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp_4iter___pyx_scope_struct___itervariants = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.iter.__pyx_scope_struct___itervariants", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct___itervariants), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct___itervariants, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct___itervariants, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct___itervariants, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp_4iter___pyx_scope_struct___itervariants, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition[8];
static int __pyx_freecount_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition = 0;

static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition[--__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(PyObject *o) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_condition);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_flatten_filter);
  Py_CLEAR(p->__pyx_v_parse_info);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_region_start);
  Py_CLEAR(p->__pyx_v_region_start_stop);
  Py_CLEAR(p->__pyx_v_region_stop);
  Py_CLEAR(p->__pyx_v_truncate);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition)))) {
    __pyx_freelist_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition[__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition++] = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)o;
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_condition) {
    e = (*v)(p->__pyx_v_condition, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_flatten_filter) {
    e = (*v)(p->__pyx_v_flatten_filter, a); if (e) return e;
  }
  if (p->__pyx_v_parse_info) {
    e = (*v)(p->__pyx_v_parse_info, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_region_start) {
    e = (*v)(p->__pyx_v_region_start, a); if (e) return e;
  }
  if (p->__pyx_v_region_start_stop) {
    e = (*v)(p->__pyx_v_region_start_stop, a); if (e) return e;
  }
  if (p->__pyx_v_region_stop) {
    e = (*v)(p->__pyx_v_region_stop, a); if (e) return e;
  }
  if (p->__pyx_v_truncate) {
    e = (*v)(p->__pyx_v_truncate, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition *)o;
  tmp = ((PyObject*)p->__pyx_v__);
  p->__pyx_v__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_condition);
  p->__pyx_v_condition = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatten_filter);
  p->__pyx_v_flatten_filter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_parse_info);
  p->__pyx_v_parse_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start);
  p->__pyx_v_region_start = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start_stop);
  p->__pyx_v_region_start_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_stop);
  p->__pyx_v_region_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_truncate);
  p->__pyx_v_truncate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.iter.__pyx_scope_struct_1__itervariants_with_condition", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_2__itercalldata[8];
static int __pyx_freecount_5vcfnp_4iter___pyx_scope_struct_2__itercalldata = 0;

static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_2__itercalldata > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_2__itercalldata[--__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_2__itercalldata];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(PyObject *o) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_ploidy);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_region_start);
  Py_CLEAR(p->__pyx_v_region_start_stop);
  Py_CLEAR(p->__pyx_v_region_stop);
  Py_CLEAR(p->__pyx_v_samples);
  Py_CLEAR(p->__pyx_v_truncate);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_2__itercalldata < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata)))) {
    __pyx_freelist_5vcfnp_4iter___pyx_scope_struct_2__itercalldata[__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_2__itercalldata++] = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)o;
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_ploidy) {
    e = (*v)(p->__pyx_v_ploidy, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_region_start) {
    e = (*v)(p->__pyx_v_region_start, a); if (e) return e;
  }
  if (p->__pyx_v_region_start_stop) {
    e = (*v)(p->__pyx_v_region_start_stop, a); if (e) return e;
  }
  if (p->__pyx_v_region_stop) {
    e = (*v)(p->__pyx_v_region_stop, a); if (e) return e;
  }
  if (p->__pyx_v_samples) {
    e = (*v)(p->__pyx_v_samples, a); if (e) return e;
  }
  if (p->__pyx_v_truncate) {
    e = (*v)(p->__pyx_v_truncate, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_2__itercalldata(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata *)o;
  tmp = ((PyObject*)p->__pyx_v__);
  p->__pyx_v__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ploidy);
  p->__pyx_v_ploidy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start);
  p->__pyx_v_region_start = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start_stop);
  p->__pyx_v_region_start_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_stop);
  p->__pyx_v_region_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_samples);
  p->__pyx_v_samples = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_truncate);
  p->__pyx_v_truncate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp_4iter___pyx_scope_struct_2__itercalldata = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.iter.__pyx_scope_struct_2__itercalldata", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_2__itercalldata), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_2__itercalldata, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_2__itercalldata, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_2__itercalldata, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_2__itercalldata, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition[8];
static int __pyx_freecount_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition = 0;

static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition[--__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(PyObject *o) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_condition);
  Py_CLEAR(p->__pyx_v_fieldspec);
  Py_CLEAR(p->__pyx_v_ploidy);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_region_start);
  Py_CLEAR(p->__pyx_v_region_start_stop);
  Py_CLEAR(p->__pyx_v_region_stop);
  Py_CLEAR(p->__pyx_v_samples);
  Py_CLEAR(p->__pyx_v_truncate);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition)))) {
    __pyx_freelist_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition[__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition++] = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)o;
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_condition) {
    e = (*v)(p->__pyx_v_condition, a); if (e) return e;
  }
  if (p->__pyx_v_fieldspec) {
    e = (*v)(p->__pyx_v_fieldspec, a); if (e) return e;
  }
  if (p->__pyx_v_ploidy) {
    e = (*v)(p->__pyx_v_ploidy, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_region_start) {
    e = (*v)(p->__pyx_v_region_start, a); if (e) return e;
  }
  if (p->__pyx_v_region_start_stop) {
    e = (*v)(p->__pyx_v_region_start_stop, a); if (e) return e;
  }
  if (p->__pyx_v_region_stop) {
    e = (*v)(p->__pyx_v_region_stop, a); if (e) return e;
  }
  if (p->__pyx_v_samples) {
    e = (*v)(p->__pyx_v_samples, a); if (e) return e;
  }
  if (p->__pyx_v_truncate) {
    e = (*v)(p->__pyx_v_truncate, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition *)o;
  tmp = ((PyObject*)p->__pyx_v__);
  p->__pyx_v__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_condition);
  p->__pyx_v_condition = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fieldspec);
  p->__pyx_v_fieldspec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ploidy);
  p->__pyx_v_ploidy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start);
  p->__pyx_v_region_start = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_start_stop);
  p->__pyx_v_region_start_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region_stop);
  p->__pyx_v_region_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_samples);
  p->__pyx_v_samples = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_truncate);
  p->__pyx_v_truncate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_v);
  p->__pyx_v_v = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.iter.__pyx_scope_struct_3__itercalldata_with_condition", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable[8];
static int __pyx_freecount_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable = 0;

static PyObject *__pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable)))) {
    o = (PyObject*)__pyx_freelist_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable[--__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable];
    memset(o, 0, sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(PyObject *o) {
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arities);
  Py_CLEAR(p->__pyx_v_fields);
  Py_CLEAR(p->__pyx_v_fill);
  Py_CLEAR(p->__pyx_v_filter_ids);
  Py_CLEAR(p->__pyx_v_flatten_filter);
  Py_CLEAR(p->__pyx_v_flatteners);
  Py_CLEAR(p->__pyx_v_info_types);
  Py_CLEAR(p->__pyx_v_parse_info);
  Py_CLEAR(p->__pyx_v_region);
  Py_CLEAR(p->__pyx_v_vcf_fn);
  Py_CLEAR(p->__pyx_v_vcf_fns);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable)))) {
    __pyx_freelist_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable[__pyx_freecount_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable++] = ((struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)o;
  if (p->__pyx_v_arities) {
    e = (*v)(p->__pyx_v_arities, a); if (e) return e;
  }
  if (p->__pyx_v_fields) {
    e = (*v)(p->__pyx_v_fields, a); if (e) return e;
  }
  if (p->__pyx_v_fill) {
    e = (*v)(p->__pyx_v_fill, a); if (e) return e;
  }
  if (p->__pyx_v_filter_ids) {
    e = (*v)(p->__pyx_v_filter_ids, a); if (e) return e;
  }
  if (p->__pyx_v_flatten_filter) {
    e = (*v)(p->__pyx_v_flatten_filter, a); if (e) return e;
  }
  if (p->__pyx_v_flatteners) {
    e = (*v)(p->__pyx_v_flatteners, a); if (e) return e;
  }
  if (p->__pyx_v_info_types) {
    e = (*v)(p->__pyx_v_info_types, a); if (e) return e;
  }
  if (p->__pyx_v_parse_info) {
    e = (*v)(p->__pyx_v_parse_info, a); if (e) return e;
  }
  if (p->__pyx_v_region) {
    e = (*v)(p->__pyx_v_region, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fn) {
    e = (*v)(p->__pyx_v_vcf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_vcf_fns) {
    e = (*v)(p->__pyx_v_vcf_fns, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *p = (struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable *)o;
  tmp = ((PyObject*)p->__pyx_v_arities);
  p->__pyx_v_arities = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fields);
  p->__pyx_v_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fill);
  p->__pyx_v_fill = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filter_ids);
  p->__pyx_v_filter_ids = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatten_filter);
  p->__pyx_v_flatten_filter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_flatteners);
  p->__pyx_v_flatteners = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_info_types);
  p->__pyx_v_info_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_parse_info);
  p->__pyx_v_parse_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_region);
  p->__pyx_v_region = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fn);
  p->__pyx_v_vcf_fn = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vcf_fns);
  p->__pyx_v_vcf_fns = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable = {
  PyVarObject_HEAD_INIT(0, 0)
  "vcfnp.iter.__pyx_scope_struct_4_itervariantstable", /*tp_name*/
  sizeof(struct __pyx_obj_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable, /*tp_traverse*/
  __pyx_tp_clear_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "iter",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_b_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 0, 1},
  {&__pyx_n_b_ALT, __pyx_k_ALT, sizeof(__pyx_k_ALT), 0, 0, 0, 1},
  {&__pyx_n_b_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 0, 1},
  {&__pyx_n_b_CHROM, __pyx_k_CHROM, sizeof(__pyx_k_CHROM), 0, 0, 0, 1},
  {&__pyx_n_b_FILTER, __pyx_k_FILTER, sizeof(__pyx_k_FILTER), 0, 0, 0, 1},
  {&__pyx_n_b_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 0, 1},
  {&__pyx_n_b_GT, __pyx_k_GT, sizeof(__pyx_k_GT), 0, 0, 0, 1},
  {&__pyx_n_b_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 0, 1},
  {&__pyx_n_b_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 0, 1},
  {&__pyx_n_b_POS, __pyx_k_POS, sizeof(__pyx_k_POS), 0, 0, 0, 1},
  {&__pyx_n_b_QUAL, __pyx_k_QUAL, sizeof(__pyx_k_QUAL), 0, 0, 0, 1},
  {&__pyx_n_b_REF, __pyx_k_REF, sizeof(__pyx_k_REF), 0, 0, 0, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_b_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 0, 1},
  {&__pyx_kp_b__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 0, 0},
  {&__pyx_kp_b__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 0, 0},
  {&__pyx_kp_b__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 0, 0},
  {&__pyx_kp_b__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 0, 0},
  {&__pyx_n_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 1},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_b__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_arities, __pyx_k_arities, sizeof(__pyx_k_arities), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_fieldspec, __pyx_k_fieldspec, sizeof(__pyx_k_fieldspec), 0, 0, 1, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_fills, __pyx_k_fills, sizeof(__pyx_k_fills), 0, 0, 1, 1},
  {&__pyx_n_s_filter_ids, __pyx_k_filter_ids, sizeof(__pyx_k_filter_ids), 0, 0, 1, 1},
  {&__pyx_n_s_flatten_filter, __pyx_k_flatten_filter, sizeof(__pyx_k_flatten_filter), 0, 0, 1, 1},
  {&__pyx_n_s_flatteners, __pyx_k_flatteners, sizeof(__pyx_k_flatteners), 0, 0, 1, 1},
  {&__pyx_n_s_format_types, __pyx_k_format_types, sizeof(__pyx_k_format_types), 0, 0, 1, 1},
  {&__pyx_n_b_genotype, __pyx_k_genotype, sizeof(__pyx_k_genotype), 0, 0, 0, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_k_home_aliman_src_github_alimanfo, sizeof(__pyx_k_home_aliman_src_github_alimanfo), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info_types, __pyx_k_info_types, sizeof(__pyx_k_info_types), 0, 0, 1, 1},
  {&__pyx_n_b_is_called, __pyx_k_is_called, sizeof(__pyx_k_is_called), 0, 0, 0, 1},
  {&__pyx_n_b_is_phased, __pyx_k_is_phased, sizeof(__pyx_k_is_phased), 0, 0, 0, 1},
  {&__pyx_n_b_is_snp, __pyx_k_is_snp, sizeof(__pyx_k_is_snp), 0, 0, 0, 1},
  {&__pyx_n_s_itercalldata, __pyx_k_itercalldata, sizeof(__pyx_k_itercalldata), 0, 0, 1, 1},
  {&__pyx_n_s_itercalldata_2, __pyx_k_itercalldata_2, sizeof(__pyx_k_itercalldata_2), 0, 0, 1, 1},
  {&__pyx_n_s_itercalldata_with_condition, __pyx_k_itercalldata_with_condition, sizeof(__pyx_k_itercalldata_with_condition), 0, 0, 1, 1},
  {&__pyx_n_s_itervariants, __pyx_k_itervariants, sizeof(__pyx_k_itervariants), 0, 0, 1, 1},
  {&__pyx_n_s_itervariants_2, __pyx_k_itervariants_2, sizeof(__pyx_k_itervariants_2), 0, 0, 1, 1},
  {&__pyx_n_s_itervariants_with_condition, __pyx_k_itervariants_with_condition, sizeof(__pyx_k_itervariants_with_condition), 0, 0, 1, 1},
  {&__pyx_n_s_itervariantstable, __pyx_k_itervariantstable, sizeof(__pyx_k_itervariantstable), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_b_num_alleles, __pyx_k_num_alleles, sizeof(__pyx_k_num_alleles), 0, 0, 0, 1},
  {&__pyx_n_s_parse_info, __pyx_k_parse_info, sizeof(__pyx_k_parse_info), 0, 0, 1, 1},
  {&__pyx_n_s_ploidy, __pyx_k_ploidy, sizeof(__pyx_k_ploidy), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_region, __pyx_k_region, sizeof(__pyx_k_region), 0, 0, 1, 1},
  {&__pyx_n_s_region_set, __pyx_k_region_set, sizeof(__pyx_k_region_set), 0, 0, 1, 1},
  {&__pyx_n_s_region_start, __pyx_k_region_start, sizeof(__pyx_k_region_start), 0, 0, 1, 1},
  {&__pyx_n_s_region_start_stop, __pyx_k_region_start_stop, sizeof(__pyx_k_region_start_stop), 0, 0, 1, 1},
  {&__pyx_n_s_region_stop, __pyx_k_region_stop, sizeof(__pyx_k_region_stop), 0, 0, 1, 1},
  {&__pyx_n_s_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_b_svlen, __pyx_k_svlen, sizeof(__pyx_k_svlen), 0, 0, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_transformers, __pyx_k_transformers, sizeof(__pyx_k_transformers), 0, 0, 1, 1},
  {&__pyx_n_s_truncate, __pyx_k_truncate, sizeof(__pyx_k_truncate), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_variant, __pyx_k_variant, sizeof(__pyx_k_variant), 0, 0, 1, 1},
  {&__pyx_n_s_variant_file, __pyx_k_variant_file, sizeof(__pyx_k_variant_file), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_fn, __pyx_k_vcf_fn, sizeof(__pyx_k_vcf_fn), 0, 0, 1, 1},
  {&__pyx_n_s_vcf_fns, __pyx_k_vcf_fns, sizeof(__pyx_k_vcf_fns), 0, 0, 1, 1},
  {&__pyx_n_s_vcfnp_iter, __pyx_k_vcfnp_iter, sizeof(__pyx_k_vcfnp_iter), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 252, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "vcfnp/iter.pyx":114
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "vcfnp/iter.pyx":116
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "vcfnp/iter.pyx":152
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "vcfnp/iter.pyx":154
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "vcfnp/iter.pyx":407
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "vcfnp/iter.pyx":409
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "vcfnp/iter.pyx":440
 *                 raise StopIteration
 *             if ':' in region:
 *                 _, region_start_stop = region.split(':')             # <<<<<<<<<<<<<<
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "vcfnp/iter.pyx":442
 *                 _, region_start_stop = region.split(':')
 *                 region_start, region_stop = [int(v) for v in
 *                                              region_start_stop.split('-')]             # <<<<<<<<<<<<<<
 *         variant = new Variant(deref(variant_file))
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "vcfnp/iter.pyx":517
 *             return -1
 *         else:
 *             return (-1,) * ploidy             # <<<<<<<<<<<<<<
 *     else:
 *         split(gts.at(0), GT_DELIMS, allele_strings)
 */
  __pyx_tuple__14 = PyTuple_New(1); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__14, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "vcfnp/iter.pyx":59
 * 
 * 
 * def itervariants(vcf_fns, region, fields, arities, fills, info_types,             # <<<<<<<<<<<<<<
 *                  transformers, filter_ids, flatten_filter, parse_info,
 *                  condition, truncate):
 */
  __pyx_tuple__17 = PyTuple_Pack(13, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_info_types, __pyx_n_s_transformers, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_parse_info, __pyx_n_s_condition, __pyx_n_s_truncate, __pyx_n_s_fieldspec); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(12, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariants_2, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "vcfnp/iter.pyx":92
 * 
 * 
 * def _itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                   parse_info, truncate):
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(16, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fieldspec, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_parse_info, __pyx_n_s_truncate, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_start, __pyx_n_s_region_stop, __pyx_n_s_region_set, __pyx_n_s__19, __pyx_n_s_region_start_stop, __pyx_n_s_v); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(7, 0, 16, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariants, 92, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 92, __pyx_L1_error)

  /* "vcfnp/iter.pyx":131
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter, parse_info, condition,
 *                                  truncate):
 */
  __pyx_tuple__22 = PyTuple_Pack(19, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fieldspec, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_parse_info, __pyx_n_s_condition, __pyx_n_s_truncate, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_vcf_fn, __pyx_n_s_region_start, __pyx_n_s_region_stop, __pyx_n_s_region_set, __pyx_n_s__19, __pyx_n_s_region_start_stop, __pyx_n_s_v); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(8, 0, 19, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariants_with_condition, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 131, __pyx_L1_error)

  /* "vcfnp/iter.pyx":366
 * 
 * 
 * def itercalldata(vcf_fns, region, samples, ploidy, fields, arities, fills,             # <<<<<<<<<<<<<<
 *                  format_types, condition, truncate):
 *     """Iterate over call data (genotypes, etc.) returning tuples suitable for
 */
  __pyx_tuple__24 = PyTuple_Pack(11, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_fills, __pyx_n_s_format_types, __pyx_n_s_condition, __pyx_n_s_truncate, __pyx_n_s_fieldspec); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(10, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itercalldata_2, 366, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "vcfnp/iter.pyx":392
 * 
 * 
 * def _itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
  __pyx_tuple__26 = PyTuple_Pack(15, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fieldspec, __pyx_n_s_truncate, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_start, __pyx_n_s_region_stop, __pyx_n_s_region_set, __pyx_n_s__19, __pyx_n_s_region_start_stop, __pyx_n_s_v); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(6, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itercalldata, 392, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 392, __pyx_L1_error)

  /* "vcfnp/iter.pyx":422
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                                  condition, truncate):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_tuple__28 = PyTuple_Pack(18, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_samples, __pyx_n_s_ploidy, __pyx_n_s_fieldspec, __pyx_n_s_condition, __pyx_n_s_truncate, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_vcf_fn, __pyx_n_s_region_start, __pyx_n_s_region_stop, __pyx_n_s_region_set, __pyx_n_s__19, __pyx_n_s_region_start_stop, __pyx_n_s_v); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(7, 0, 18, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itercalldata_with_condition, 422, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 422, __pyx_L1_error)

  /* "vcfnp/iter.pyx":542
 * 
 * 
 * def itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                       filter_ids, flatten_filter, fill, flatteners):
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(14, __pyx_n_s_vcf_fns, __pyx_n_s_region, __pyx_n_s_fields, __pyx_n_s_arities, __pyx_n_s_info_types, __pyx_n_s_parse_info, __pyx_n_s_filter_ids, __pyx_n_s_flatten_filter, __pyx_n_s_fill, __pyx_n_s_flatteners, __pyx_n_s_variant_file, __pyx_n_s_variant, __pyx_n_s_vcf_fn, __pyx_n_s_region_set); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(10, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_aliman_src_github_alimanfo, __pyx_n_s_itervariantstable, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inititer(void); /*proto*/
PyMODINIT_FUNC inititer(void)
#else
PyMODINIT_FUNC PyInit_iter(void); /*proto*/
PyMODINIT_FUNC PyInit_iter(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_iter(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("iter", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_vcfnp__iter) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "vcfnp.iter")) {
      if (unlikely(PyDict_SetItemString(modules, "vcfnp.iter", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5vcfnp_4iter___pyx_scope_struct___itervariants) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_type_5vcfnp_4iter___pyx_scope_struct___itervariants.tp_print = 0;
  __pyx_ptype_5vcfnp_4iter___pyx_scope_struct___itervariants = &__pyx_type_5vcfnp_4iter___pyx_scope_struct___itervariants;
  if (PyType_Ready(&__pyx_type_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_type_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition.tp_print = 0;
  __pyx_ptype_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition = &__pyx_type_5vcfnp_4iter___pyx_scope_struct_1__itervariants_with_condition;
  if (PyType_Ready(&__pyx_type_5vcfnp_4iter___pyx_scope_struct_2__itercalldata) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_type_5vcfnp_4iter___pyx_scope_struct_2__itercalldata.tp_print = 0;
  __pyx_ptype_5vcfnp_4iter___pyx_scope_struct_2__itercalldata = &__pyx_type_5vcfnp_4iter___pyx_scope_struct_2__itercalldata;
  if (PyType_Ready(&__pyx_type_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition) < 0) __PYX_ERR(0, 422, __pyx_L1_error)
  __pyx_type_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition.tp_print = 0;
  __pyx_ptype_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition = &__pyx_type_5vcfnp_4iter___pyx_scope_struct_3__itercalldata_with_condition;
  if (PyType_Ready(&__pyx_type_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_type_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable.tp_print = 0;
  __pyx_ptype_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable = &__pyx_type_5vcfnp_4iter___pyx_scope_struct_4_itervariantstable;
  /*--- Type import code ---*/
  __pyx_ptype_5vcfnp_6vcflib_PyVariantCallFile = __Pyx_ImportType("vcfnp.vcflib", "PyVariantCallFile", sizeof(struct __pyx_obj_5vcfnp_6vcflib_PyVariantCallFile), 1); if (unlikely(!__pyx_ptype_5vcfnp_6vcflib_PyVariantCallFile)) __PYX_ERR(2, 143, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("vcfnp.compat"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "s", (void (**)(void))&__pyx_f_5vcfnp_6compat_s, "PyObject *(PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "b", (void (**)(void))&__pyx_f_5vcfnp_6compat_b, "PyObject *(PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "vcfnp/iter.pyx":14
 * # noinspection PyUnresolvedReferences
 * from cython.operator cimport dereference as deref
 * import logging             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":23
 * 
 * 
 * logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 * debug = logger.debug
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vcfnp/iter.pyx":24
 * 
 * logger = logging.getLogger(__name__)
 * debug = logger.debug             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_debug, __pyx_t_4) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":27
 * 
 * 
 * cdef size_t npos = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_5vcfnp_4iter_npos = -1L;

  /* "vcfnp/iter.pyx":39
 * 
 * 
 * cdef char SEMICOLON = b';'             # <<<<<<<<<<<<<<
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'
 */
  __pyx_v_5vcfnp_4iter_SEMICOLON = ';';

  /* "vcfnp/iter.pyx":40
 * 
 * cdef char SEMICOLON = b';'
 * cdef string DOT = b'.'             # <<<<<<<<<<<<<<
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_DOT = __pyx_t_7;

  /* "vcfnp/iter.pyx":41
 * cdef char SEMICOLON = b';'
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__16); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_GT_DELIMS = __pyx_t_7;

  /* "vcfnp/iter.pyx":42
 * cdef string DOT = b'.'
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_CHROM); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_CHROM = __pyx_t_7;

  /* "vcfnp/iter.pyx":43
 * cdef string GT_DELIMS = b'/|'
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_POS); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_POS = __pyx_t_7;

  /* "vcfnp/iter.pyx":44
 * cdef string FIELD_NAME_CHROM = b'CHROM'
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_ID = __pyx_t_7;

  /* "vcfnp/iter.pyx":45
 * cdef string FIELD_NAME_POS = b'POS'
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_REF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_REF = __pyx_t_7;

  /* "vcfnp/iter.pyx":46
 * cdef string FIELD_NAME_ID = b'ID'
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_ALT); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_ALT = __pyx_t_7;

  /* "vcfnp/iter.pyx":47
 * cdef string FIELD_NAME_REF = b'REF'
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_QUAL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_QUAL = __pyx_t_7;

  /* "vcfnp/iter.pyx":48
 * cdef string FIELD_NAME_ALT = b'ALT'
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_FILTER); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_FILTER = __pyx_t_7;

  /* "vcfnp/iter.pyx":49
 * cdef string FIELD_NAME_QUAL = b'QUAL'
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_INFO); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_INFO = __pyx_t_7;

  /* "vcfnp/iter.pyx":50
 * cdef string FIELD_NAME_FILTER = b'FILTER'
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_num_alleles); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_NUM_ALLELES = __pyx_t_7;

  /* "vcfnp/iter.pyx":51
 * cdef string FIELD_NAME_INFO = b'INFO'
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_is_snp); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_SNP = __pyx_t_7;

  /* "vcfnp/iter.pyx":52
 * cdef string FIELD_NAME_NUM_ALLELES = b'num_alleles'
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_svlen); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_SVLEN = __pyx_t_7;

  /* "vcfnp/iter.pyx":53
 * cdef string FIELD_NAME_IS_SNP = b'is_snp'
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_is_called); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_CALLED = __pyx_t_7;

  /* "vcfnp/iter.pyx":54
 * cdef string FIELD_NAME_SVLEN = b'svlen'
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 * cdef string FIELD_NAME_GT = b'GT'
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_is_phased); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_IS_PHASED = __pyx_t_7;

  /* "vcfnp/iter.pyx":55
 * cdef string FIELD_NAME_IS_CALLED = b'is_called'
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'             # <<<<<<<<<<<<<<
 * cdef string FIELD_NAME_GT = b'GT'
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_genotype); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_GENOTYPE = __pyx_t_7;

  /* "vcfnp/iter.pyx":56
 * cdef string FIELD_NAME_IS_PHASED = b'is_phased'
 * cdef string FIELD_NAME_GENOTYPE = b'genotype'
 * cdef string FIELD_NAME_GT = b'GT'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_GT); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_v_5vcfnp_4iter_FIELD_NAME_GT = __pyx_t_7;

  /* "vcfnp/iter.pyx":59
 * 
 * 
 * def itervariants(vcf_fns, region, fields, arities, fills, info_types,             # <<<<<<<<<<<<<<
 *                  transformers, filter_ids, flatten_filter, parse_info,
 *                  condition, truncate):
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_1itervariants, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariants_2, __pyx_t_4) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":92
 * 
 * 
 * def _itervariants(vcf_fns, region, fieldspec, filter_ids, flatten_filter,             # <<<<<<<<<<<<<<
 *                   parse_info, truncate):
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_3_itervariants, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariants, __pyx_t_4) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":131
 * 
 * 
 * def _itervariants_with_condition(vcf_fns, region, fieldspec, filter_ids,             # <<<<<<<<<<<<<<
 *                                  flatten_filter, parse_info, condition,
 *                                  truncate):
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_6_itervariants_with_condition, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariants_with_condition, __pyx_t_4) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":366
 * 
 * 
 * def itercalldata(vcf_fns, region, samples, ploidy, fields, arities, fills,             # <<<<<<<<<<<<<<
 *                  format_types, condition, truncate):
 *     """Iterate over call data (genotypes, etc.) returning tuples suitable for
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_9itercalldata, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itercalldata_2, __pyx_t_4) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":392
 * 
 * 
 * def _itercalldata(vcf_fns, region, samples, ploidy, fieldspec, truncate):             # <<<<<<<<<<<<<<
 *     cdef VariantCallFile *variant_file
 *     cdef Variant *variant
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_11_itercalldata, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itercalldata, __pyx_t_4) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":422
 * 
 * 
 * def _itercalldata_with_condition(vcf_fns, region, samples, ploidy, fieldspec,             # <<<<<<<<<<<<<<
 *                                  condition, truncate):
 *     cdef VariantCallFile *variant_file
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_14_itercalldata_with_condition, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itercalldata_with_condition, __pyx_t_4) < 0) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":542
 * 
 * 
 * def itervariantstable(vcf_fns, region, fields, arities, info_types, parse_info,             # <<<<<<<<<<<<<<
 *                       filter_ids, flatten_filter, fill, flatteners):
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_5vcfnp_4iter_17itervariantstable, NULL, __pyx_n_s_vcfnp_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itervariantstable, __pyx_t_4) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vcfnp/iter.pyx":1
 * # cython: profile = False             # <<<<<<<<<<<<<<
 * # cython: boundscheck = True
 * # cython: wraparound = False
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init vcfnp.iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init vcfnp.iter");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyErrFetchRestore */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetItemInt */
    static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SliceObject */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* StringJoin */
      #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__vcf_3a__3a_VariantFieldType(enum vcf::VariantFieldType value) {
    const enum vcf::VariantFieldType neg_one = (enum vcf::VariantFieldType) -1, const_zero = (enum vcf::VariantFieldType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum vcf::VariantFieldType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum vcf::VariantFieldType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum vcf::VariantFieldType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum vcf::VariantFieldType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum vcf::VariantFieldType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum vcf::VariantFieldType),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FetchCommonType */
      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
      static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
      #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
          static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
          #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
          static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
          #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
